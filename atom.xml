<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平谷の博客</title>
  <icon>https://www.gravatar.com/avatar/ecc90863939e362c74e1f5651eb913f6</icon>
  <subtitle>平谷の博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-11T08:31:58.484Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>PGXIE</name>
    <email>2505552027@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/07/11/qi-ta-ji-zhu/hexo/hexo-typora-kai-fa-hexo-cha-jian-jie-jue-tu-pian-lu-jing-bu-yi-zhi/"/>
    <id>http://example.com/2022/07/11/qi-ta-ji-zhu/hexo/hexo-typora-kai-fa-hexo-cha-jian-jie-jue-tu-pian-lu-jing-bu-yi-zhi/</id>
    <published>2022-07-11T08:26:25.847Z</published>
    <updated>2022-07-11T08:31:58.484Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Typora+Hexo图片上传路径问题</strong></p><p>最近在搭自己的博客，发现在typora上用markdown的语法——“<img src alt>”附上的图片没办法在博客上面正确显示。找了一圈，最后确定是图片的路径问题。</p><p>首先要安装好hexo-asset-image插件，没安装过的可以在cmd中使用npm安装（在自己博客文件夹的根目录下运行）</p><p>npm install hexo-asset-image –save</p><p>可以使用下面这句代码查看自己的版本号</p><p>npm hexo-asset-image -version</p><p>把要引用的图片放在和自己的.md文件的同名文件夹下面</p><p><em>（另外嘀咕一下，看网上很多教程说要把这个post_asset_folder设为true，其实设不设无所谓，可以自己新建一个同名文件夹，另外也不是非要hexo new 新建.md文件时自动生成的同名文件夹）</em></p><p><img src="/2022/07/11/qi-ta-ji-zhu/hexo/hexo-typora-kai-fa-hexo-cha-jian-jie-jue-tu-pian-lu-jing-bu-yi-zhi/bb3c3594394750b5588a346e9474103d.jpeg" alt>看网上很多教程说要把这个post_asset_folder设为true，其实设不设无所谓，可以自己新建一个同名文件夹</p><p>在typora中我引用图片用的是相对路径</p><p><img src="/2022/07/11/qi-ta-ji-zhu/hexo/hexo-typora-kai-fa-hexo-cha-jian-jie-jue-tu-pian-lu-jing-bu-yi-zhi/8c79e3a0d7273b621bc9bc347a085ca7.jpeg" alt>相对路径</p><p>然后就是用hexo对博客进行编译，转换成html代码</p><p>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</p><p><img src="/2022/07/11/qi-ta-ji-zhu/hexo/hexo-typora-kai-fa-hexo-cha-jian-jie-jue-tu-pian-lu-jing-bu-yi-zhi/87ce678bbd222effb0c2c2ed73fdeda9.jpeg" alt>注意这个路径</p><p>在开启server后可以在网页浏览器上面查看和修改图片的路径，鼠标右击图片点“检查(N)”就可以看到它的html代码（图片显示不正常也可以查看，可以双击自己修改一下看看正确的路径是什么）</p><p><img src="/2022/07/11/qi-ta-ji-zhu/hexo/hexo-typora-kai-fa-hexo-cha-jian-jie-jue-tu-pian-lu-jing-bu-yi-zhi/a1f316eb8e6f73f17b3af3f2fadf8887.jpeg" alt>博客中图片的路径</p><p>要注意博客【根目录】—— blog前面有个&quot;/&quot;</p><p>/blog/2021/11/29/something_about_determinant/example.png</p><p>如果你的图片路径不对，你就要进入下面的目录里面修改index.js文件（注意要安装hexo-asset-image插件）</p><p>*\node_modules\hexo-asset-image</p><p><img src="/2022/07/11/qi-ta-ji-zhu/hexo/hexo-typora-kai-fa-hexo-cha-jian-jie-jue-tu-pian-lu-jing-bu-yi-zhi/4c385545cc9182653a67a57b53ffc667.jpeg" alt></p><p>大概在60行左右就可以看到这两句代码，被注释掉的是原来的，运行的是我自己修改的</p><p><em>//$(this).attr(‘src’, config.root + link + src);</em></p><p>$(<strong>this</strong>).attr(‘src’,’/’<strong>+</strong> link <strong>+</strong> src);</p><p><em><a href="//console.info">//console.info</a>&amp;&amp;<a href="http://console.info">console.info</a>(“update link as:–&gt;”+config.root + link + src);</em></p><p><a href="http://console.info">console.info</a>**&amp;&amp;**<a href="http://console.info">console.info</a>(“update link as:–&gt;” <strong>+</strong> ‘/’ <strong>+</strong> link <strong>+</strong> src);</p><p>（因为我发现我的link里面已经含有根目录blog了，所以就把config.root删掉了，然后再在前面加上“/”）</p><p>如果你们要使用绝对路径，也是在这里改，把图片路径拼拼剪剪，路径对了图片就可以正常显示了。</p><p>编辑于 2021-12-01 19:48</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Typora+Hexo图片上传路径问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近在搭自己的博客，发现在typora上用markdown的语法——“&lt;img src alt&gt;”附上的图片没办法在博客上面正确显示。找了一圈，最后确定是图片的路径问题。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/07/11/duo-xian-cheng/"/>
    <id>http://example.com/2022/07/11/duo-xian-cheng/</id>
    <published>2022-07-11T08:21:12.212Z</published>
    <updated>2022-07-11T08:22:20.988Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/07/11/duo-xian-cheng/c534e4f9ac661fbe55ea0ffef758b81d.png" alt>返回当前线程的名称：Thread.currentThread().getName()</p><p>线程的名称是由：Thread-编号定义的。编号从0开始。</p><p>线程要运行的代码都统一存放在了<strong>run</strong>方法中。</p><p>线程要运行必须要通过类中指定的方法开启。<strong>start</strong>方法。（启动后，就多了一条执行路径）</p><p>start方法： 1）启动了线程； 2）让jvm调用了run方法。</p><p><strong>线程的启动</strong></p><p>☆ <strong>Thread类中run()和start()方法的区别：</strong></p><p><strong>start</strong>()：用start方法来启动线程，真正实现了多线程运行，这时<strong>无需等待run方法体代码执行完毕而直接继续执行下面的代码</strong>。通过调用Thread类的start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里方法run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。</p><p><strong>run</strong>()：run()方法只是类的一个普通方法而已，如果直接调用Run方法，程<strong>序中依然只有主线程这一个线程</strong>，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。</p><p><strong>总结</strong>：start()方法最本质的功能是从CPU中申请另一个线程空间来执行 run()方法中的代码,它和当前的线程是两条线,在相对独立的线程空间运行,也就是说,如果你直接调用线程对象的run()方法,当然也会执行,但那是 在当前线程中执行,run()方法执行完成后继续执行下面的代码.而调用start()方法后,run()方法的代码会和当前线程并发(单CPU)或并行 (多CPU)执行。所以请记住一句话：<strong>调用线程对象的run方法不会产生一个新的线程，虽然可以达到相同的执行结果,但执行过程和执行效率不同</strong></p><p><strong>线程的创建</strong></p><p>☆ <strong>创建线程的第一种方式</strong>：继承Thread ，由子类复写run方法。</p><p><strong>步骤</strong>：</p><p>1，定义类继承Thread类；</p><p>2，目的是复写run方法，将要让线程运行的代码都存储到run方法中；</p><p>3，通过创建Thread类的子类对象，创建线程对象；</p><p>4，调用线程的start方法，开启线程，并执行run方法。</p><p>☆ <strong>线程状态：</strong></p><p>被创建：start()</p><p>运行：具备执行资格，同时具备执行权；</p><p>冻结：sleep(time),wait()—notify()唤醒；线程释放了执行权，同时释放执行资格；</p><p>临时阻塞状态：线程具备cpu的执行资格，没有cpu的执行权；</p><p>消亡：stop()</p><p>☆ <strong>创建线程的第二种方式</strong>：实现一个接口Runnable。</p><p><strong>步骤：</strong></p><p>1，定义类实现Runnable接口。</p><p>2，覆盖接口中的run方法（用于封装线程要运行的代码）。</p><p>3，通过Thread类创建线程对象；</p><p>4，将实现了Runnable接口的子类对象作为实际参数传递给Thread类中的构造函数。</p><p>为什么要传递呢？因为要让线程对象明确要运行的run方法所属的对象。</p><p>5，调用Thread对象的start方法。开启线程，并运行Runnable接口子类中的run方法。</p><p>☆ <strong>为什么要有Runnable接口的出现？</strong></p><p>1：通过继承Thread类的方式，可以完成多线程的建立。但是这种方式有一个局限性，如果一个类已经有了自己的父类，就不可以继承Thread类，因为java单继承的局限性。</p><p>☆ <strong>可是该类中的还有部分代码需要被多个线程同时执行</strong>。这时怎么办呢？</p><p>只有对该类进行额外的功能扩展，java就提供了一个接口Runnable。这个接口中定义了run方法，其实run方法的定义就是为了存储多线程要运行的代码。</p><p>所以，通常创建线程都用第二种方式。因为实现Runnable接口可以避免单继承的局限性。</p><p>2：其实是将不同类中需要被多线程执行的代码进行抽取。将多线程要运行的代码的位置单独定义到接口中。为其他类进行功能扩展提供了前提。</p><p>所以Thread类在描述线程时，内部定义的run方法，也来自于Runnable接口。</p><p>实现Runnable接口可以避免单继承的局限性。而且，继承Thread，是可以对Thread类中的方法，进行子类复写的。但是不需要做这个复写动作的话，只为定义线程代码存放位置，实现Runnable接口更方便一些。所以Runnable接口将线程要执行的任务封装成了对象。</p><p><strong>同步</strong></p><p>☆ <strong>synchronized关键字</strong></p><p>一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</p><p>二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</p><p>三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。</p><p>四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。</p><p>五、以上规则对其它对象锁同样适用.</p><table><thead><tr><th><strong>public class</strong> Thread1 <strong>implements</strong> Runnable {  <strong>public</strong> void run() {  <strong>synchronized</strong>(<strong>this</strong>) {  <strong>for</strong> (int i = 0; i &lt; 5; i++) {  System.out.println(Thread.currentThread().getName()+&quot;synchronized loop &quot; + i);  }  }  } }</th></tr></thead><tbody></tbody></table><p>☆ synchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。</p><p><strong>1. synchronized 方法</strong>：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如：</p><p>public synchronized void accessVal(int newVal);</p><p>synchronized 方法控制对类成员变量的访问：<strong>每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能执行</strong>，否则所属线程阻塞，<strong>方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放</strong>，此后被阻塞的线程方能获得该锁，重新进入可执行状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）。</p><p>在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成员变量的访问。</p><p>synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供了更好的解决办法，那就是 synchronized 块。</p><p><strong>2. synchronized 块</strong>：通过 synchronized关键字来声明synchronized 块。语法如下：</p><p>synchronized(syncObject) {</p><p>//允许访问控制的代码</p><p>}</p><p>synchronized 块是这样一个代码块，其中的代码必须获得对象 syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。</p><p>☆ <strong>同步</strong>：</p><p><strong>好处</strong>：解决了线程安全问题。Synchronized</p><p><strong>弊端</strong>：相对降低性能，因为判断锁需要消耗资源，产生了死锁。</p><p><strong>同步的第二种表现形式</strong>： //对共享资源的方法定义同步</p><p><strong>同步函数</strong>：其实就是将同步关键字定义在<strong>函数</strong>上，让函数具备了同步性。</p><p><strong>同步函数是用的哪个锁呢？</strong> //synchronized(this)用以定义需要进行同步的某一部分代码块。通过验证，函数都有自己所属的对象this，所以同步函数所使用的锁就是this锁。This.方法名</p><p>☆ <strong>当同步函数被static修饰时，这时的同步用的是哪个锁呢？</strong></p><p>静态函数在加载时所属于类，这时有可能还没有该类产生的对象，但是该类的字节码文件加载进内存就已经被封装成了对象，这个对象就是该类的字节码文件对象。</p><p>所以静态加载时，只有一个对象存在，那么静态同步函数就使用的这个对象。</p><p>这个对象就是 类名.class</p><p>☆ <strong>同步代码块和同步函数的区别？</strong></p><ul><li>同步代码块使用的锁可以是任意对象。<ul><li><p>同步函数使用的锁是this，静态同步函数的锁是该类的字节码文件对象。</p></li><li><p>在一个类中只有一个同步的话，可以使用同步函数。如果有多同步，必须使用同步代码块，来确定不同的锁。所以同步代码块相对灵活一些。</p><p>★考点问题：请写一个延迟加载的单例模式？写懒汉式；当出现多线程访问时怎么解决？加同步，解决安全问题；效率高吗？不高；怎样解决？通过双重判断的形式解决。</p><p>//懒汉式：延迟加载方式。</p><p>当多线程访问懒汉式时，因为懒汉式的方法内对共性数据进行多条语句的操作。所以容易出现线程安全问题。为了解决，加入同步机制，解决安全问题。但是却带来了效率降低。</p><p>为了效率问题，通过双重判断的形式解决。</p></li></ul></li></ul><table><thead><tr><th><strong>class</strong> Single{  <strong>private</strong> static Single s = <strong>null</strong>;  <strong>private</strong> Single(){}  <strong>public</strong> static Single getInstance(){ <em>//锁是谁？字节码文件对象；</em>  <strong>if</strong>(s == <strong>null</strong>){  <strong>synchronized</strong>(Single.class){  <strong>if</strong>(s == <strong>null</strong>)  s = <strong>new</strong> Single();  }  }  <strong>return</strong> s;  } }</th></tr></thead><tbody></tbody></table><p>☆ <strong>等待唤醒机制</strong>：</p><p><strong>涉及的方法：</strong></p><p><strong>wait</strong>:将同步中的线程处于冻结状态。释放了执行权，释放了资格。同时将线程对象存储到线程池中。</p><p><strong>notify</strong>：唤醒线程池中某一个等待线程。</p><p><strong>notifyAll</strong>: 唤醒的是线程池中的所有线程。</p><p><strong>注意</strong>：</p><p>1：这些方法都需要定义在同步中。</p><p>2：因为这些方法必须要标示所属的锁。</p><p>你要知道 A锁上的线程被wait了,那这个线程就相当于处于A锁的线程池中，只能A锁的notify唤醒。</p><p>3：这三个方法都定义在Object类中。为什么操作线程的方法定义在Object类中？</p><p>因为这三个方法都需要定义同步内，并标示所属的同步锁，既然被锁调用，而锁又可以是任意对象，那么能被任意对象调用的方法一定定义在Object类中。</p><p>☆ <strong>wait 和 sleep区别</strong>： 分析这两个方法：从执行权和锁上来分析：</p><p>wait：可以指定时间也可以不指定时间。不指定时间，只能由对应的notify或者notifyAll来唤醒。</p><p>sleep：必须指定时间，时间到自动从冻结状态转成运行状态(临时阻塞状态)。</p><p>wait：线程会释放执行权，而且线程会释放锁。</p><p>sleep：线程会释放执行权，但不是不释放锁。</p><p><strong>线程的停止</strong>：通过stop方法就可以停止线程。但是这个方式过时了。</p><p>停止线程：原理就是：让线程运行的代码结束，也就是结束run方法。</p><p>☆ **怎么结束run方法？**一般run方法里肯定定义循环。所以只要结束循环即可。</p><p>第一种方式：定义循环的结束标记。</p><p>第二种方式：如果线程处于了冻结状态，是不可能读到标记的，这时就需要通过Thread类中的interrupt方法，将其冻结状态强制清除。让线程恢复具备执行资格的状态，让线程可以读到标记，并结束。</p><p>☆ <strong>Thread 的方法</strong></p><p>---------&lt; java.lang.Thread &gt;----------</p><p><strong>interrupt</strong>()：中断线程。</p><p><strong>setPriority</strong>(int newPriority)：更改线程的优先级。</p><p><strong>getPriority</strong>()：返回线程的优先级。</p><p><strong>toString</strong>()：返回该线程的字符串表示形式，包括线程名称、优先级和线程组。</p><p>Thread.<strong>yield</strong>()：暂停当前正在执行的线程对象，并执行其他线程。</p><p><strong>setDaemon</strong>(true)：将该线程标记为守护线程或用户线程。将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。该方法必须在启动线程前调用。</p><p><strong>join</strong>：临时加入一个线程的时候可以使用join方法。</p><p>当A线程执行到了B线程的join方式。A线程处于冻结状态，释放了执行权，B开始执行。A什么时候执行呢？只有当B线程运行结束后，A才从冻结状态恢复运行状态执行。</p><table><thead><tr><th><strong>public class</strong> A{  <strong>public</strong> static void main(String args[]){  B = <strong>new</strong> B();<em>// B extends Thread</em>  b.start();  b.join();  <strong>…</strong>  } }</th></tr></thead><tbody></tbody></table><p>☆ <strong>Lock</strong></p><p><strong>LOCK</strong>的出现替代了同步：lock.lock();………lock.unlock();</p><p>Lock接口：多线程在JDK1.5版本升级时，推出一个接口Lock接口。</p><p>解决线程安全问题使用同步的形式，(同步代码块，要么同步函数)其实最终使用的都是锁机制。</p><p>到了后期版本，直接将锁封装成了对象。线程进入同步就是具备了锁，执行完，离开同步，就是释放了锁。</p><p>在后期对锁的分析过程中，发现，获取锁，或者释放锁的动作应该是锁这个事物更清楚。所以将这些动作定义在了锁当中，并把锁定义成对象。</p><p>所以同步是隐示的锁操作，而Lock对象是显示的锁操作，它的出现就替代了同步。</p><p>在之前的版本中使用Object类中<strong>wait</strong>、<strong>notify</strong>、<strong>notifyAll</strong>的方式来完成的。那是因为同步中的锁是任意对象，所以操作锁的等待唤醒的方法都定义在Object类中。</p><p>而现在锁是指定对象Lock。所以查找等待唤醒机制方式需要通过Lock接口来完成。而Lock接口中并没有直接操作等待唤醒的方法，而是将这些方式又单独封装到了一个对象中。这个对象就是Condition，将Object中的三个方法进行单独的封装。并提供了功能一致的方法 <strong>await</strong>()、<strong>signal</strong>()、<strong>signalAll</strong>()体现新版本对象的好处。</p><p>&lt; java.util.concurrent.locks &gt; Condition接口：await()、signal()、signalAll()；</p><table><thead><tr><th><strong>class</strong> BoundedBuffer {  final Lock lock = <strong>new</strong> ReentrantLock();  final Condition notFull = lock.newCondition();  final Condition notEmpty = lock.newCondition();  final Object[] items = <strong>new</strong> Object[100];  int putptr, takeptr, count;    <strong>public</strong> void put(Object x) <strong>throws</strong> InterruptedException {  lock.lock();  <strong>try</strong> {  <strong>while</strong> (count == items.length)  notFull.await();<em>//栈满时阻塞</em>  items[putptr] = x;  <strong>if</strong> (++putptr == items.length)   putptr = 0;  ++count;  notEmpty.signal();<em>//解其他线程的 notEmpty.await() 锁</em>  }<strong>finally</strong> {  lock.unlock();  }  }    <strong>public</strong> Object take() <strong>throws</strong> InterruptedException {  lock.lock();  <strong>try</strong> {   <strong>while</strong> (count == 0)   notEmpty.await();<em>//栈空时阻塞</em>   Object x = items[takeptr];   <strong>if</strong> (++takeptr == items.length) takeptr = 0;   --count;   notFull.signal();   <strong>return</strong> x;   }<strong>finally</strong> {  lock.unlock();   }  } }</th></tr></thead><tbody></tbody></table><p><strong>线程池</strong></p><p>* ****线程池：****其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</p><p><strong>Executors</strong>： `public static ExecutorService <strong>newFixedThreadPool</strong>(int nThreads)`：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</p><p><strong>ExecutorService</strong> ： `public Future&lt;?&gt; submit(Runnable task)`:获取线程池中的某一个线程对象，并执行</p><p>使用线程池中线程对象的步骤：</p><p>1. 创建线程池对象。</p><p>2. 创建Runnable接口子类对象。(task)</p><p>3. 提交Runnable接口子类对象。(take task)</p><p>4. 关闭线程池(一般不做)。</p><p>public class <strong>MyRunnable</strong> implements Runnable {</p><p>@Override</p><p>public void <strong>run</strong>() {</p><p>System.out.println(“我要一个教练”);</p><p>try {</p><p>Thread.sleep(2000);</p><p>} catch (InterruptedException e) {</p><p>e.printStackTrace();</p><p>}</p><p>System.out.println(&quot;教练来了： &quot; + Thread.currentThread().getName());</p><p>System.out.println(“教我游泳,交完后，教练回到了游泳池”);</p><p>}</p><p>}</p><p>线程池测试类：</p><p>// 创建线程池对象</p><p>ExecutorService service = Executors.newFixedThreadPool(2);//包含2个线程对象</p><p>// 创建Runnable实例对象</p><p>MyRunnable r = new MyRunnable();</p><p>//自己创建线程对象的方式</p><p>// Thread t = new Thread®;</p><p>// t.start(); —&gt; 调用MyRunnable中的run()</p><p>// 从线程池中获取线程对象,然后调用MyRunnable中的run()</p><p>service.submit®;</p><p>// 再获取个线程对象，调用MyRunnable中的run()</p><p>service.submit®;</p><p>service.submit®;</p><p>// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</p><p>// 将使用完的线程又归还到了线程池中</p><p>// 关闭线程池</p><p><a href="//service.shutdown">//service.shutdown</a>();</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/07/11/duo-xian-cheng/c534e4f9ac661fbe55ea0ffef758b81d.png&quot; alt&gt;返回当前线程的名称：Thread.currentThread().getName()&lt;/p&gt;
&lt;p&gt;线程的名称是由：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaSE IO流</title>
    <link href="http://example.com/2022/07/11/javase/javase-io/"/>
    <id>http://example.com/2022/07/11/javase/javase-io/</id>
    <published>2022-07-10T16:00:00.000Z</published>
    <updated>2022-07-11T13:16:09.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javase-io流"><a class="markdownIt-Anchor" href="#javase-io流"></a> JavaSE IO流</h1><h1 id="1-流的分类"><a class="markdownIt-Anchor" href="#1-流的分类"></a> 1 流的分类</h1><p><img src="/2022/07/11/javase/javase-io/36c3d7543e716543977949bf30f7a251.png" alt></p><p>注意：输入流和输出流都是站在程序（内存）的角度上来说</p><h1 id="2-结点流与处理流"><a class="markdownIt-Anchor" href="#2-结点流与处理流"></a> 2 结点流与处理流</h1><p><img src="/2022/07/11/javase/javase-io/2ea683048d4a3c7ca4a4b31a594e695e.png" alt></p><p><strong>节点流类型</strong></p><p><img src="/2022/07/11/javase/javase-io/383b7a13c83a87b20e6458afb28343ce.png" alt></p><p><strong>节点流就是一根管道直接插到数据源上面，直接读数据源里面的数据，或者是直接往数据源里面写入数据</strong>。典型的节点流是文件流：文件的字节输入流（FileInputStream），文件的字节输出流（FileOutputStream），文件的字符输入流（FileReader），文件的字符输出流（FileWriter）。</p><p><strong>处理流类型</strong></p><p><img src="/2022/07/11/javase/javase-io/cbc88111138cf344e89328840b5be15c.png" alt></p><p>处理流是包在别的流上面的流，相当于是包到别的管道上面的管道。</p><h1 id="3-基本流介绍"><a class="markdownIt-Anchor" href="#3-基本流介绍"></a> 3 基本流介绍</h1><p><strong>InputStream</strong></p><p><img src="/2022/07/11/javase/javase-io/4dd87dc729d57a5862d8941be7bc73e1.png" alt></p><p><strong>OutputStream</strong></p><p><img src="/2022/07/11/javase/javase-io/f6bde3f5d2e898025250ee4e73cf9ab1.png" alt></p><p><strong>Reader</strong></p><p><img src="/2022/07/11/javase/javase-io/2d59ddd77c2a7c60ee17109df2df1c77.png" alt></p><p><strong>Writer</strong></p><p><img src="/2022/07/11/javase/javase-io/7bd93ed72448499ab4b1eb780e53e88e.png" alt></p><h1 id="4-结点流介绍"><a class="markdownIt-Anchor" href="#4-结点流介绍"></a> 4 结点流介绍</h1><h2 id="fileinputstream"><a class="markdownIt-Anchor" href="#fileinputstream"></a> <strong>FileInputStream</strong></h2><p><strong>1 构造方法</strong></p><ul><li><em>FileInputStream(File file)</em>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</li><li><em>FileInputStream(String name)</em>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<em>FileNotFoundException</em> 。</p><p><strong>2 读取字节数据</strong></p><p><strong>读取字节</strong>：<em>read</em>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回*-1*</p><p><strong>使用字节数组读取</strong>：<em>read(byte[] b)</em>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回*-1*</p><blockquote><p>小贴士：</p><ul><li>虽然读取了一个字节，但是会自动提升为int类型。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ul></blockquote><h2 id="fileoutputstream"><a class="markdownIt-Anchor" href="#fileoutputstream"></a> <strong>FileOutputStream</strong></h2><p><strong>1 构造方法</strong></p><ul><li><em>public FileOutputStream(File file)</em>：创建文件输出流以写入由指定的 File对象表示的文件。</li><li><em>public FileOutputStream(String name)</em>： 创建文件输出流以指定的名称写入文件。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><p><strong>2 写出字节数据</strong></p><p><strong>写出字节</strong>：<em>write(int b)</em> 方法，每次可以写出一个字节数据</p><p><strong>写出字节数组</strong>：<em>write(byte[] b)</em>，每次可以写出数组中的数据</p><p><strong>写出指定长度字节数组</strong>：<em>write(byte[] b, int off, int len)</em> ,每次写出从off索引开始，len个字节</p><p><strong>3 数据追加续写</strong></p><ul><li><em>public FileOutputStream(File file, boolean append)</em>： 创建文件输出流以写入由指定的 File对象表示的文件。</li><li><em>public FileOutputStream(String name, boolean append)</em>： 创建文件输出流以指定的名称写入文件。</li></ul><p><strong>4 写出换行</strong></p><p>Windows系统里，换行符号是 <em>\r\n</em></p><h2 id="filereader"><a class="markdownIt-Anchor" href="#filereader"></a> <strong>FileReader</strong></h2><p><strong>1 构造方法</strong></p><ul><li><em>FileReader(File file)</em>： 创建一个新的 FileReader ，给定要读取的File对象。</li><li><em>FileReader(String fileName)</em>： 创建一个新的 FileReader ，给定要读取的文件的名称。</li></ul><p><strong>2 读取字符数据</strong></p><p><strong>读取字符</strong>：<em>read</em>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回*-1*，循环读取</p><p><strong>使用字符数组读取</strong>：<em>read(char[] cbuf)</em>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回*-1*</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 读取文件常用的格式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FISRead</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用文件名称创建流对象</span>         <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 定义变量，保存有效字符个数</span>        <span class="token keyword">int</span> len <span class="token punctuation">;</span>        <span class="token comment">// 定义字符数组，作为装字符数据的容器</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭资源</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="filewriter"><a class="markdownIt-Anchor" href="#filewriter"></a> <strong>FileWriter</strong></h2><p><strong>1 构造方法</strong></p><ul><li><em>FileWriter(File file)</em>： 创建一个新的 FileWriter，给定要读取的File对象。</li><li><em>FileWriter(String fileName)</em>： 创建一个新的 FileWriter，给定要读取的文件的名称。</li></ul><p><strong>2 基本写出数据</strong></p><p><strong>写出字符</strong>：<em>write(int b)</em> 方法，每次可以写出一个字符数据</p><p><strong>写出字符数组</strong> ：<em>write(char[] cbuf)</em> 和 <em>write(char[] cbuf, int off, int len)</em> ，每次可以写出字符数组中的数据，用法类似FileOutputStream</p><p><strong>写出字符串</strong>：<em>write(String str)</em> 和 <em>write(String str, int off, int len)</em> ，每次可以写出字符串中的数据，更为方便</p><p><strong>3 关闭和刷新</strong></p><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<em>flush</em> 方法了。</p><ul><li><em>flush</em> ：刷新缓冲区，流对象可以继续使用。</li><li><em>close</em>: 先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//写出数据常用的格式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FWWrite</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"HELLO WORLD!"</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//HELLO WORLD!</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// WORLD</span>        <span class="token comment">// 关闭资源</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-处理流介绍"><a class="markdownIt-Anchor" href="#5-处理流介绍"></a> 5 处理流介绍</h1><h2 id="缓冲流buffering"><a class="markdownIt-Anchor" href="#缓冲流buffering"></a> <strong>缓冲流(Buffering)</strong></h2><p>带有缓冲区的流，缓冲区(Buffer)就是内存里面的一小块区域，读写数据时都是先把数据放到这块缓冲区域里面，减少io对硬盘的访问次数，保护我们的硬盘</p><p>使用步骤：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBufferStream</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/java/TestFileInputStream.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 在FileInputStream节点流的外面套接一层处理流BufferedInputStream</span>            <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bis<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在第100个字符处做一个标记</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bis<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重新回到原来标记的地方</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBufferStream1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\java\\dat.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在节点流FileWriter的外面再套一层处理流BufferedWriter</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//“Math.random()”将会生成一系列介于0～1之间的随机数。</span>                <span class="token comment">// static String valueOf(double d)这个valueOf()方法的作用就是把一个double类型的数转换成字符串</span>                <span class="token comment">//valueOf()是一个静态方法，所以可以使用“类型.静态方法名”的形式来调用 </span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把随机数字符串写入到指定文件中</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用newLine()方法使得每写入一个随机数就换行显示</span>            <span class="token punctuation">&#125;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用flush()方法清空缓冲区</span>                    <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:/java/dat.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//在节点流FileReader的外面再套一层处理流BufferedReader</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//使用BufferedReader处理流里面提供String readLine()方法读取文件中的数据时是一行一行读取的</span>                <span class="token comment">//循环结束的条件就是使用readLine()方法读取数据返回的字符串为空值后则表示已经读取到文件的末尾了。</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换流"><a class="markdownIt-Anchor" href="#转换流"></a> <strong>转换流</strong></h2><p>转换流非常的有用，它可以把一个字节流转换成一个字符流，转换流有两种，一种叫InputStreamReader，另一种叫OutputStreamWriter。</p><p>InputStream是字节流，Reader是字符流，<strong>InputStreamReader就是把InputStream转换成Reader</strong>。</p><p>OutputStream是字节流，Writer是字符流，<strong>OutputStreamWriter就是把OutputStream转换成Writer</strong>。</p><p>把OutputStream转换成Writer之后就可以一个字符一个字符地通过管道写入数据了，而且还可以写入字符串。我们如果用一个FileOutputStream流往文件里面写东西，得要一个字节一个字节地写进去，但是如果我们在FileOutputStream流上面套上一个字符转换流，那我们就可以一个字符串一个字符串地写进去。</p><ul><li><strong>InputStreamReader</strong>：是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</li><li><strong>OutputStreamWriter</strong>：将内存中字符数据以字节的形式写出到文件是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransform1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/java/char.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"MircosoftsunIBMOracleApplet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把字符串写入到指定的文件中去</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>osw<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用getEncoding()方法取得当前系统的默认字符编码</span>            osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>                    <span class="token string">"D:\\java\\char.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ISO8859_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果在调用FileOutputStream的构造方法时没有加入true，那么新加入的字符串就会替换掉原来写入的字符串，在调用构造方法时指定了字符的编码</span>            osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"MircosoftsunIBMOracleApplet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 再次向指定的文件写入字符串，新写入的字符串加入到原来字符串的后面</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>osw<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransform2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//System.in这里的in是一个标准的输入流，用来接收从键盘输入的数据</span>            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用readLine()方法把读取到的一行字符串保存到字符串变量s中去</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把保存在内存s中的字符串打印出来</span>                s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在循环体内继续接收从键盘的输入</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//只要输入exit循环就结束，就会退出</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据流</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>gacl<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDataStream</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在调用构造方法时，首先会在内存里面创建一个ByteArray字节数组</span>        <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在输出流的外面套上一层数据流，用来处理int，double类型的数</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            dos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把产生的随机数直接写入到字节数组ByteArray中</span>            dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//布尔类型的数据在内存中就只占一个字节</span>                <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bais<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先写进去的就先读出来，调用readDouble()方法读取出写入的随机数</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后写进去的就后读出来，这里面的读取顺序不能更改位置，否则会打印出不正确的结果</span>            dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bais<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过bais这个流往外读取数据的时候，是一个字节一个字节地往外读取的，因此读出来的数据无法判断是字符串还是bool类型的值，因此要在它的外面再套一个流，通过dataInputStream把读出来的数据转换就可以判断了。注意了：读取数据的时候是先写进去的就先读出来，因此读ByteArray字节数组数据的顺序应该是先把占8个字节的double类型的数读出来，然后再读那个只占一个字节的boolean类型的数，因为double类型的数是先写进数组里面的，读的时候也要先读它。这就是所谓的先写的要先读。如果先读Boolean类型的那个数，那么读出来的情况可能就是把double类型数的8个字节里面的一个字节读了出来</p><p><strong>打印流</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*这个小程序是重新设置打印输出的窗口， * 把默认在命令行窗口输出打印内容设置成其他指定的打印显示窗口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPrintStream</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/java/log.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在输出流的外面套接一层打印流，用来控制打印输出</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里调用setOut()方法改变了输出窗口，以前写System.out.print()默认的输出窗口就是命令行窗口.</span>                    <span class="token comment">//但现在使用System.setOut(ps)将打印输出窗口改成了由ps指定的文件里面，通过这样设置以后，打印输出时都会在指定的文件内打印输出</span>                    <span class="token comment">//在这里将打印输出窗口设置到了log.txt这个文件里面，所以打印出来的内容会在log.txt这个文件里面看到</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>c<span class="token operator">&lt;=</span><span class="token number">60000</span><span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把世界各国的文字打印到log.txt这个文件中去</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象流</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestObjectIo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// 把k的值修改为8</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>                    <span class="token string">"D:/java/TestObjectIo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ObjectOutputStream流专门用来处理Object的，在fos流的外面套接ObjectOutputStream流就可以直接把一个Object写进去</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接把一个t对象写入到指定的文件里面</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>                    <span class="token string">"D:/java/TestObjectIo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ObjectInputStream专门用来读一个Object的</span>            <span class="token class-name">T</span> tRead <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 直接把文件里面的内容全部读取出来然后分解成一个Object对象，并使用强制转换成指定类型T</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tRead<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> tRead<span class="token punctuation">.</span>j <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> tRead<span class="token punctuation">.</span>d <span class="token operator">+</span> <span class="token string">"\t"</span>                    <span class="token operator">+</span> tRead<span class="token punctuation">.</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 凡是要将一个类的对象序列化成一个字节流就必须实现Serializable接口 * Serializable接口中没有定义方法，Serializable接口是一个标记性接口，用来给类作标记，只是起到一个标记作用。 * 这个标记是给编译器看的，编译器看到这个标记之后就可以知道这个类可以被序列化 如果想把某个类的对象序列化，就必须得实现Serializable接口 */</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Serializable的意思是可以被序列化的</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">2.3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token comment">// transient int k = 15;</span>    <span class="token comment">// 在声明变量时如果加上transient关键字，那么这个变量就会被当作是透明的，即不存在。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接实现Serializable接口的类是JDK自动把这个类的对象序列化，而如果实现public interface Externalizable extends Serializable的类则可以自己控制对象的序列化，建议能让JDK自己控制序列化的就不要让自己去控制</p><p><strong>6 IO流总结</strong></p><p><img src="/2022/07/11/javase/javase-io/8dc7d40a78e26f223de7bafb670697f8.png" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;javase-io流&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javase-io流&quot;&gt;&lt;/a&gt; JavaSE IO流&lt;/h1&gt;
&lt;h1 id=&quot;1-流的分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;</summary>
      
    
    
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
    <category term="IO流" scheme="http://example.com/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 异常</title>
    <link href="http://example.com/2022/07/11/javase/javase-yi-chang/"/>
    <id>http://example.com/2022/07/11/javase/javase-yi-chang/</id>
    <published>2022-07-10T16:00:00.000Z</published>
    <updated>2022-07-11T03:22:49.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h1><h1 id="异常的分类"><a class="markdownIt-Anchor" href="#异常的分类"></a> 异常的分类</h1><p><img src="/2022/07/11/javase/javase-yi-chang/5484db441c581408ff737e0792806e09.png" alt></p><p>Throwable：可抛出的。</p><ul><li><p>Error：错误，一般情况下，不编写针对性的代码进行处理，通常是jvm发生的，需要对程序进行修正。</p></li><li><p>Exception：异常，可以有针对性的处理方式</p></li></ul><p>这个体系中的所有类和对象都具备一个独有的特点；就是可抛性。</p><p>可抛性的体现：就是这个体系中的类和对象都可以被throws和throw两个关键字所操作。</p><h1 id="异常的处理"><a class="markdownIt-Anchor" href="#异常的处理"></a> 异常的处理</h1><p>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></p><p>☆ <strong>throw与throws区别：</strong></p><p>throws 是用来声明一个方法可能抛出的所有异常信息，而throw则是指抛出的一个具体的异常类型。此外throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。</p><p>throw用于抛出异常对象，后面跟的是异常对象；<strong>throw用在函数内。</strong></p><p>throws用于抛出异常类，后面跟的异常类名，可以跟多个，用逗号隔开。<strong>throws用在函数上。</strong></p><p>throws格式：方法名（参数）throws 异常类1，异常类2，…</p><p>throw：就是自己进行异常处理，处理的时候有两种方式，要么自己捕获异常（也就是try catch进行捕捉），要么声明抛出一个异常（就是throws 异常~~）。</p><p>☆ <strong>处理方式有两种</strong>：1、捕捉；2、抛出。</p><p><strong>定义异常处理时，什么时候定义try，什么时候定义throws呢？</strong></p><p>功能内部如果出现异常，如果内部可以处理，就用try；</p><p>如果功能内部处理不了，就必须声明出来，让调用者处理。使用throws抛出，交给调用者处理。谁调用了这个功能谁就是调用者；</p><p>☆ <strong>自定义异常的步骤：</strong></p><p>1：定义一个子类继承Exception或RuntimeException，让该类具备可抛性(既可以使用throw和throws去调用此类)。</p><p>2：通过throw 或者throws进行操作。</p><p>异常的转换思想：当出现的异常是调用者处理不了的，就需要将此异常转换为一个调用者可以处理的异常抛出。</p><p><strong>注意：</strong></p><p>如果父类或者接口中的方法没有抛出过异常，那么子类是不可以抛出异常的，如果子类的覆盖的方法中出现了异常，只能try不能throws。</p><p>如果这个异常子类无法处理，已经影响了子类方法的具体运算，这时可以在子类方法中，通过throw抛出RuntimeException异常或者其子类，这样，子类的方法上是不需要throws声明的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异常&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#异常&quot;&gt;&lt;/a&gt; 异常&lt;/h1&gt;
&lt;h1 id=&quot;异常的分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#异常的分类&quot;&gt;&lt;/a&gt; 异常的分类&lt;/h1&gt;
&lt;</summary>
      
    
    
    
    <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
    <category term="异常" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客之butterfly主题优雅魔改系列</title>
    <link href="http://example.com/2022/07/11/qi-ta-ji-zhu/hexo/hexo-bo-ke-zhi-butterfly-zhu-ti-you-ya-mo-gai-xi-lie/"/>
    <id>http://example.com/2022/07/11/qi-ta-ji-zhu/hexo/hexo-bo-ke-zhi-butterfly-zhu-ti-you-ya-mo-gai-xi-lie/</id>
    <published>2022-07-10T16:00:00.000Z</published>
    <updated>2022-07-11T06:28:50.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客之butterfly主题优雅魔改系列"><a class="markdownIt-Anchor" href="#hexo博客之butterfly主题优雅魔改系列"></a> Hexo博客之butterfly主题优雅魔改系列</h1><p><a href="https://www.cnblogs.com/antmoe/p/12846393.html">转载</a></p><p>为了便于各位博主了解到是否新增了魔改方案，请查看<a href="https://share.mubu.com/doc/765JBkIK8_V">更新记录页</a></p><p>直接体验魔改效果可以访问我的个人博客 <a href="https://www.antmoe.com/">小康博客</a></p><p>此文更新可能不及时，如果更新记录有新的方案后，本文没有那么请移至我的<a href="https://www.antmoe.com/posts/a811d614/index.html">个人博客</a>进行查找。</p><h2 id="前置说明"><a class="markdownIt-Anchor" href="#前置说明"></a> 前置说明</h2><p>魔改亮点</p><p>🆙主题可升级：几乎不改动主题源码。即便魔改，也不需要为升级主题而烦恼。</p><p>🍳简单快速：简单上手，快速修改。</p><p>🍭看我72变：多种背景随意更换。</p><p>📕优雅阅读：对卡片进行不同的透明度设置，实现更优雅的阅读。</p><p>👦个性友联：为你的好友设置不同的颜色</p><p>🎈页脚更炫酷：彩色渐变footer喜欢么？</p><p>🍟更多优点等你发现</p><p>为什么写这篇文章?</p><p>相信在这之前，大家肯定看过网上的各种魔改教程。但是这些魔改教程基本上千篇一律，都是一种方式，大量修改模板（主题源文件）。这种方式的好处就是简单快速且直接，缺点就是每次升级😏，不用我说了吧。除非你不打算在升级。</p><p>但是对于一个热爱升级的我来说，我怎么可以这样。于是乎我便写了这篇文章。按照此教程进行的魔改，大部分都是通过引入新的js文件和css文件实现的。这意味着再也不用因为升级而再次魔改而苦恼了😄。同样的缺点也还是有的，引入新文件必定导致页面加载速度下降，下降多少取决于访客网速、电脑配置及服务器的带宽。具体速度可以参考本博客。</p><p>此博客环境：Coding + Jsdeliver</p><blockquote><p>这篇文章大部分修改全部没有改动pug模板。基本都是添加css文件和js文件实现的修改。</p><p>至此（2020-05-06）只有两项（友链页、双评论）修改改动了pug模板。</p><p>至于友链页 ，可改动空间并不大，因此升级主题只需要直接将文件覆盖作者文件即可。</p><p>而双评论，只需要每次升级主题将对应文件的<code>else if</code> 改为<code>if</code>即可。</p><p>相信上述两项pug模板的修改不需要刻意记录也能印在心头把？</p></blockquote><h2 id="jscss如何使用"><a class="markdownIt-Anchor" href="#jscss如何使用"></a> JS/CSS如何使用</h2><p>下面关于各种修改我会直接给出参考代码，你可以每做一个修改都建立一个新的css/js文件，也可以将所有的代码都复制到一个css/js文件。</p><h2 id="jscss如何引用"><a class="markdownIt-Anchor" href="#jscss如何引用"></a> JS/CSS如何引用</h2><p>此篇文章所说的一切引用（包括css和js）都可以参考这里。</p><ol><li>打开主题配置文件（butterfly.yml）</li><li>定位搜索 inject</li><li>其中head是用来引入css的。bottom是用来引入js的。</li></ol><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">inject:  head:    - &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;sviptzk&#x2F;HexoStaticFile@master&#x2F;Hexo&#x2F;css&#x2F;flink.min.css&quot;&gt;  bottom:    - &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;sviptzk&#x2F;HexoStaticFile@master&#x2F;Hexo&#x2F;js&#x2F;hideMobileSidebar.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：以上方式2.3.5版本可用，其他版本请自行查找引入自定义js及css的地方。</strong></p><h3 id="引用方式说明"><a class="markdownIt-Anchor" href="#引用方式说明"></a> 引用方式说明</h3><p>引用方式二选一即可。</p><h3 id="以相对路径引入"><a class="markdownIt-Anchor" href="#以相对路径引入"></a> 以相对路径引入</h3><ol><li><p>将写好的css文件移动到<code>\Butterfly\source\css\</code>目录下。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzAyL2I3ZGYxOGNjZDQzNGViZTQyMTJhMmZmMGY4MGE5MGI5LnBuZw?x-oss-process=image/format,png" alt></p></li><li><p>然后修改配置文件的引入方式</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzAyL2IzMjAxZDQ3ZjkxYjA3ODAzMDkzZDRjOGVkMGY3MGZiLnBuZw?x-oss-process=image/format,png" alt></p></li></ol><h3 id="以外链的方式引入"><a class="markdownIt-Anchor" href="#以外链的方式引入"></a> 以外链的方式引入</h3><p>同样的可以将这个文件上传到cdn，如七牛云、又拍云、GitHub+Jsdeliver等。</p><p>只需要将引入地址写为你的文件外链地址即可。</p><p>例如我的jsd链接<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzAyL2I5YjhlOTBmYjhkMTdlMDk1ZDBmMjI1MWYxZWI1NGI0LnBuZw?x-oss-process=image/format,png" alt></p><p>注：不同版本可能设置略有不同，请仔细对照你所使用版本的文档。引入并非写个连接，而是使用html标签引入。</p><h2 id="视觉体验"><a class="markdownIt-Anchor" href="#视觉体验"></a> 视觉体验</h2><p>这部分修改主要是针对进入博客后的直观感受。</p><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>与本博客同款背景。开启需关闭背景图片设置，可能也需要关闭js动态背景。具体请自己尝试，本人没有尝试过。（<em>主题的background请设置<code>'#efefef'</code></em>）</p><p><strong>背景可参照<a href="https://www.antmoe.com/posts/7198453/index.html">Hexo博客之butterfly主题优化更换背景</a>这篇文章进行魔改</strong></p><h3 id="鼠标样式"><a class="markdownIt-Anchor" href="#鼠标样式"></a> 鼠标样式</h3><p>将以下代码复制到你所创建的css文件即可。</p><pre class="line-numbers language-none"><code class="language-none">body &#123;    cursor: url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;sviptzk&#x2F;HexoStaticFile@latest&#x2F;Hexo&#x2F;img&#x2F;default.cur),        default;&#125;a,img &#123;    cursor: url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;sviptzk&#x2F;HexoStaticFile@latest&#x2F;Hexo&#x2F;img&#x2F;pointer.cur),        default;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码解读：以上代码表示当鼠标在<code>body</code>元素及<code>a</code>、<code>img</code>元素上时所显示的鼠标为url路径里的样式。</p><p>因此你可以将里边的文件替换为任意鼠标样式。</p></blockquote><h3 id="页脚渐变"><a class="markdownIt-Anchor" href="#页脚渐变"></a> 页脚渐变</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA2LzFjZDc0NzRhODcxZTVlM2RmZjg2MmQ4ZTg1YzE5ZDFiLnBuZw?x-oss-process=image/format,png" alt="效果图"></p><p>同样的将以下代码复制到你所创建的css文件即可。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 页脚footer *&#x2F;&#x2F;* 渐变色滚动动画 *&#x2F;@-webkit-keyframes Gradient &#123;    0% &#123;        background-position: 0 50%;    &#125;    50% &#123;        background-position: 100% 50%;    &#125;    100% &#123;        background-position: 0 50%;    &#125;&#125;@-moz-keyframes Gradient &#123;    0% &#123;        background-position: 0 50%;    &#125;    50% &#123;        background-position: 100% 50%;    &#125;    100% &#123;        background-position: 0 50%;    &#125;&#125;@keyframes Gradient &#123;    0% &#123;        background-position: 0 50%;    &#125;    50% &#123;        background-position: 100% 50%;    &#125;    100% &#123;        background-position: 0 50%;    &#125;&#125;#footer &#123;    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite;    -o-user-select: none;    -ms-user-select: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    border-top-left-radius: 10px;    border-top-right-radius: 10px;&#125;#footer:before &#123;    background-color: rgba(0, 0, 0, 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="滚动条"><a class="markdownIt-Anchor" href="#滚动条"></a> 滚动条</h3><p>将以下代码复制到你所创建的css文件即可。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA2Lzc2NTk0OTg4YjUwNzgyZWIyZTRiNWQ2Mjk2OWYxZmQ5LnBuZw?x-oss-process=image/format,png" alt></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 滚动条 *&#x2F;::-webkit-scrollbar &#123;  width: 8px;  height: 8px;&#125;::-webkit-scrollbar-track &#123;  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;&#125;::-webkit-scrollbar-thumb &#123;  background-color: #49b1f5;  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;&#125;::-webkit-scrollbar-corner &#123;  background-color: transparent;&#125;::-moz-selection &#123;  color: #fff;  background-color: #49b1f5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手机侧边栏默认不展开"><a class="markdownIt-Anchor" href="#手机侧边栏默认不展开"></a> 手机侧边栏默认不展开</h3><p>这段修改需要将下边的代码复制到新建的<strong>js</strong>文件中。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzAzLzA4ZDg0NzY1Y2I2MzI1NjQyMjQxNDdmOTUzMDg3NDgyLnBuZw?x-oss-process=image/format,png" alt></p><pre class="line-numbers language-none"><code class="language-none">var mobile_sidebar_menus &#x3D; document.getElementById(&quot;mobile-sidebar-menus&quot;);var menus_item_child &#x3D; mobile_sidebar_menus.getElementsByClassName(    &quot;menus_item_child&quot;);var menus_expand &#x3D; mobile_sidebar_menus.getElementsByClassName(&quot;menus-expand&quot;);for (var i &#x3D; 0; i &lt; menus_item_child.length; i++) &#123;    menus_item_child[i].style.display &#x3D; &quot;none&quot;;    menus_expand[i].className +&#x3D; &quot; menus-closed&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里提供一个现成的地址，可以直接在引用处填写。也可以复制上边的代码到你自己的js文件中。</p><p>在线地址：<a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/hideMobileSidebar.js">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/hideMobileSidebar.js</a></p></blockquote><h3 id="分类卡片隐藏"><a class="markdownIt-Anchor" href="#分类卡片隐藏"></a> 分类卡片隐藏</h3><p>分类卡片隐藏需要同时引入css和js文件。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA2L2Q1MmEyODBlZGM1ODgxMTVmNzAxMWI1MDljOTA2M2VhLnBuZw?x-oss-process=image/format,png" alt></p><ol><li><p>JavaScript代码</p><pre class="line-numbers language-none"><code class="language-none">var card_category_list &#x3D; document.getElementsByClassName(    &quot;card-category-list child&quot;);var item &#x3D; document.getElementsByClassName(&quot;card-category-list-item&quot;);function toggle(t) &#123;    var display &#x3D; t.parentElement.nextSibling.style.display;    if (display &#x3D;&#x3D; &quot;none&quot;) &#123;        t.parentElement.nextSibling.style.display &#x3D; &quot;block&quot;;        t.parentElement.nextSibling.style.height &#x3D; &quot;100%&quot;;        t.className &#x3D; t.className.replace(&quot;fa-chevron-up&quot;, &quot;fa-chevron-down&quot;);    &#125; else &#123;        t.parentElement.nextSibling.style.display &#x3D; &quot;none&quot;;        t.className &#x3D; t.className.replace(&quot;fa-chevron-down&quot;, &quot;fa-chevron-up&quot;);    &#125;&#125;for (var i &#x3D; 0; i &lt; card_category_list.length; i++) &#123;    card_category_list[i].style.display &#x3D; &quot;none&quot;;    card_category_list[i].style.transition &#x3D; &quot;all 1s&quot;;    card_category_list[i].previousSibling.innerHTML +&#x3D;        &#39;&lt;i class&#x3D;&quot;fa fa-chevron-up menus-expand  menus-closed&quot; aria-hidden&#x3D;&quot;true&quot; style&#x3D;&quot;margin-left:20px;&quot; onclick&#x3D;&quot;toggle(this)&quot;&gt;&lt;&#x2F;i&gt;&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CSS代码</p><pre class="line-numbers language-none"><code class="language-none">#aside_content.card-archivesul.card-archive-list&gt; .card-archive-list-itemaspan:first-child,#aside_content.card-categoriesul.card-category-list&gt; .card-category-list-itemaspan:first-child &#123;    width: auto;    min-width: 50%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>同样的，这个魔改也提供在线地址。</p><ul><li><p>JS</p><p><a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/hideCategory.min.js">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/hideCategory.min.js</a></p></li><li><p>CSS</p><p><a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/hideCategory.min.css">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/hideCategory.min.css</a></p></li></ul></blockquote><h2 id="页面类修改"><a class="markdownIt-Anchor" href="#页面类修改"></a> 页面类修改</h2><p>这部分的修改主要是针对一些特殊的页面，例如友链页。</p><h3 id="友情链接页面修改"><a class="markdownIt-Anchor" href="#友情链接页面修改"></a> 友情链接页面修改</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA2L2VmZmUxYzI5MTFlYWJmN2E0NWJkNWJlNjdkNDcyZDMwLnBuZw?x-oss-process=image/format,png" alt="效果图"></p><p>友情链接修改内容过大，不建议小白修改。</p><p>此修改需要<strong>替换</strong>作者文件（及<code>flink.pug</code>），位置<code>\themes\Butterfly\layout\</code></p><p><code>flink.pug</code>下载地址：<a href="https://tzk.lanzous.com/ibidw1a">https://tzk.lanzous.com/ibidw1a</a></p><p>替换完pug模板之后将以下css复制到你所创建的css文件中即可。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 边框呼吸灯效果 *&#x2F;@keyframes link_custom &#123;  from &#123;    box-shadow: 0 0 5px var(--primary-color, grey),      inset 0 0 5px var(--primary-color, grey),      0 1px 0 var(--primary-color, grey);  &#125;  to &#123;    box-shadow: 0 0 20px var(--primary-color, grey),      inset 0 0 10px var(--primary-color, grey),      0 1px 0 var(--primary-color, grey);  &#125;&#125;&#x2F;* 边框彩色呼吸灯 *&#x2F;@keyframes link_custom1 &#123;  0% &#123;    box-shadow: 0 0 4px #ca00ff;  &#125;  25% &#123;    box-shadow: 0 0 16px #00b5e5;  &#125;  50% &#123;    box-shadow: 0 0 4px #00f;  &#125;  75% &#123;    box-shadow: 0 0 16px #b1da21;  &#125;  100% &#123;    box-shadow: 0 0 4px #f00;  &#125;&#125;&#x2F;* 边框闪烁 *&#x2F;@keyframes flash &#123;  from &#123;    border-color: transparent;  &#125;  to &#123;    border-color: var(--primary-color, grey);  &#125;&#125;&#x2F;* 头像自动旋转 *&#x2F;@keyframes auto_rotate_left &#123;  from &#123;    transform: rotate(0);  &#125;  to &#123;    transform: rotate(-360deg);  &#125;&#125;@keyframes auto_rotate_right &#123;  from &#123;    transform: rotate(0);  &#125;  to &#123;    transform: rotate(360deg);  &#125;&#125;.flink#article-container .post-cards .md-links &gt; .md-links-item a:hover &#123;  color: #fff;&#125;.flink .post-cards .md-links &gt; .md-links-item a &#123;  color: var(--primary-color, #49b1f5);  text-decoration: none;&#125;.flink .post-cards .md-links &gt; .md-links-item:hover &#123;  box-shadow: 0 2px 20px var(--primary-color, #49b1f5);  animation-play-state: paused;&#125;.flink#article-container .post-cards .md-links &gt; .md-links-item:before &#123;  background: var(--primary-color, #49b1f5);&#125;.flink .post-cards .md-links &gt; .md-links-item &#123;  border: 0px solid var(--primary-color, #49b1f5);&#125;.flink#article-container .post-cards .md-links &gt; .md-links-item:hover img &#123;  -webkit-transform: rotate(var(--primary-rotate));  -moz-transform: rotate(var(--primary-rotate));  -o-transform: rotate(var(--primary-rotate));  -ms-transform: rotate(var(--primary-rotate));  transform: rotate(var(--primary-rotate));&#125;&#x2F;* 头像自动旋转 *&#x2F;.flink#article-container .post-cards .md-links &gt; .md-links-item a .lauto &#123;  animation: auto_rotate_left var(--autotime) linear infinite;&#125;.flink#article-container .post-cards .md-links &gt; .md-links-item a .rauto &#123;  animation: auto_rotate_right var(--autotime) linear infinite;&#125;&#x2F;* 友联字体颜色 *&#x2F;&#x2F;* name与desc的颜色 *&#x2F;.flink#article-container .post-cards .md-links &gt; .md-links-item .customcolor &#123;  color: var(--namecolor, #1f2d3d);&#125;&#x2F;* name与des鼠标悬停的字体颜色 *&#x2F;.flink#article-container  .post-cards  .md-links  &gt; .md-links-item  .customcolor:hover &#123;  color: #fff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字段说明"><a class="markdownIt-Anchor" href="#字段说明"></a> 字段说明</h4><p>至于如何配合使用，请自行尝试（此配置加在<code>link.yml</code>下即可）</p><pre class="line-numbers language-none"><code class="language-none">name: 小康博客link: https:&#x2F;&#x2F;antmoe.comavatar: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;sviptzk&#x2F;HexoStaticFile@latest&#x2F;avatar.jpgdescr: 更多效果自行搭配# 边框大小 默认为0 width: 0px# 边框样式 默认 solidstyle: solid# 边框颜色 默认淡蓝色 #49b1f5color: &quot;#0078e7&quot;# 自动旋转 可选值 flash（闪现） link_custom（单色呼吸灯） link_custom1（彩色呼吸灯）custom: link_custom1# 动画时长设定，默认为0time: 4s# name的颜色namecolor: &quot;#ff9191&quot;# descr的颜色descolor: &quot;#ff9191&quot;# 背景颜色background: 0# 鼠标悬停旋转角度rotate: 360deg# 自动旋转 latuo左旋转 rauto右旋转autorotate: &quot;lauto&quot;# 旋转的周期（时长）autotime: 2s#移除此链接的权重 0为否 非0为移除remove: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景设置页"><a class="markdownIt-Anchor" href="#背景设置页"></a> 背景设置页</h3><p>这个页面的初衷是为了测试不同背景下的博客效果。但可以勉强当作背景设置页。效果参考地址：<a href="https://www.antmoe.com/background/">butterfly主题背景更换</a></p><p>这个修改同样需要同时添加css与js代码。</p><ol><li><p>JavaScript代码</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 获取标签&#x2F;&#x2F; 全局背景divvar web_bg &#x3D; document.getElementById(&quot;web_bg&quot;);&#x2F;&#x2F; 公共父级var content_inner &#x3D; document.getElementById(&quot;content-inner&quot;);&#x2F;&#x2F; 获取Cookies&#x2F;&#x2F; 透明度var opacity &#x3D; Cookies.get(&quot;opacity&quot;);&#x2F;&#x2F; 背景var bg &#x3D; Cookies.get(&quot;bg&quot;);&#x2F;&#x2F; 动画var animation &#x3D; Cookies.get(&quot;animation&quot;);&#x2F;&#x2F; 背景类型var type &#x3D; Cookies.get(&quot;type&quot;);&#x2F;&#x2F; 声明遍历 用于记录当前color&#x2F;&#x2F; 设置背景if (bg) &#123;  web_bg.style.background &#x3D; bg;  web_bg.setAttribute(&quot;data-type&quot;, type);  if (animation) &#123;    web_bg.style.animation &#x3D; animation;  &#125;&#125;function setColor(opacity) &#123;  &#x2F;&#x2F; style&#x3D;&quot;--light_bg_color: rgb(255, 255, 255,.3);--dark_bg_color: rgba(18,18,18,.2);&quot;  var light_bg_color &#x3D; &quot;--light_bg_color: rgb(255, 255, 255,&quot; + opacity + &quot;);&quot;;  var dark_bg_color &#x3D; &quot;--dark_bg_color: rgba(18,18,18,&quot; + opacity + &quot;);&quot;;  content_inner.setAttribute(&quot;style&quot;, light_bg_color + dark_bg_color);&#125;setColor(opacity);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CSS代码</p><pre class="line-numbers language-none"><code class="language-none">#aside_content .card-widget,#recent-posts&gt;.recent-post-item,.layout_page&gt;div:first-child:not(.recent-posts),.layout_post&gt;#page,.layout_post&gt;#post,.read-mode .layout_post&gt;#post &#123;    background: var(--light_bg_color)&#125;[data-theme&#x3D;dark] #nav,[data-theme&#x3D;dark] .layout_page&gt;div:first-child:not(.recent-posts),[data-theme&#x3D;dark] .layout_post&gt;#post &#123;    background-color: var(--dark_bg_color)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>将以上js与css全部引入后，新建一个页面。然后在其<code>index.md</code>中（正文部分）写入以下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;@keyframes gradientBG&#123;0%&#123;background-position: 0% 50%;&#125;50%&#123;background-position: 100% 50%;&#125;100% &#123;background-position: 0% 50%;&#125;&#125;#rightside&#123;display:none;&#125;&lt;&#x2F;style&gt;&gt; 这个页面是用来测试渐变背景的效果，以及不同透明度的效果。如果你有能力可以直接看 css 样式。否则请返回[Hexo 博客之 butterfly 主题优化更换背景](https:&#x2F;&#x2F;www.antmoe.com&#x2F;posts&#x2F;7198453&#x2F;index.html#附录)复制代码。&gt; 阅读体验及个标签样式请自己进行调整。## 透明度调节&lt;center style&#x3D;&#39;margin-bottom:20px&#39; id &#x3D; &#39;opt&#39;&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0&quot;&gt;透明度0&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.1&quot;&gt;透明度0.1&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.2&quot;&gt;透明度0.2&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.3&quot;&gt;透明度0.3&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.4&quot;&gt;透明度0.4&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.5&quot;&gt;透明度0.5&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.6&quot;&gt;透明度0.6&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.7&quot;&gt;透明度0.7&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.8&quot;&gt;透明度0.8&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;0.9&quot;&gt;透明度0.9&lt;&#x2F;a&gt;&lt;a style&#x3D;&quot;color: #FFF;margin-bottom: 10px;&quot;  style&#x3D;&quot;color: #FFF;&quot; href&#x3D;&quot;#&quot; class&#x3D;&quot;button button-primary button-rounded button-small&quot; data-opacity&#x3D;&quot;1&quot;&gt;透明度1&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;## 背景调节&lt;div id&#x3D;&#39;demo_style&#39; style&#x3D;&#39;text-align:center;margin:0 auto;&#39;&gt;### 渐变类&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px;background: url(&quot;https:&#x2F;&#x2F;ae01.alicdn.com&#x2F;kf&#x2F;H5662031fbf344418aa2c8bf74c68826eV.png&quot;),linear-gradient(45deg, #6dd0f2 15%, #f59abe 85%);text-align: center;line-height: 200px;margin-bottom:5px;cursor: pointer;&quot;&gt;粉蓝色有图片&lt;&#x2F;div&gt;&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px;background: linear-gradient(45deg, #6dd0f2 15%, #f59abe 85%);text-align: center;line-height: 200px;cursor: pointer;&quot;&gt;粉蓝色无图片&lt;&#x2F;div&gt;&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px;background: linear-gradient(102.7deg,#fddaff 8.2%,#dfadfc 19.6%,#adcdfc 36.8%,#adfcf4 73.2%,#caf8d0 90.9%);text-align: center;line-height: 200px;cursor: pointer;&quot;&gt;美美哒渐变&lt;&#x2F;div&gt;&lt;div data-type&#x3D;&quot;color&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px; background: linear-gradient(90deg,rgba(247,149,51,.1) 0,rgba(243,112,85,.1) 15%,rgba(239,78,123,.1) 30%,rgba(161,102,171,.1) 44%,rgba(80,115,184,.1) 58%,rgba(16,152,173,.1) 72%,rgba(7,179,155,.1) 86%,rgba(109,186,130,.1) 100%);text-align: center;line-height: 200px;cursor: pointer;&quot;&gt;博主同款&lt;&#x2F;div&gt;&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px; background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    background-size: 400% 400%;animation: gradientBG 15s ease infinite;text-align: center;line-height: 200px;cursor: pointer;&quot;&gt;动态渐变&lt;&#x2F;div&gt;&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px; background: linear-gradient(to right bottom, rgb(0, 255, 240), rgb(92, 159, 247) 40%, rgb(211, 34, 255) 80%);text-align: center;line-height: 200px;cursor: pointer;&quot;&gt;紫蓝色渐变&lt;&#x2F;div&gt;### 渐变加图片类&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px; background: linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)), url(https:&#x2F;&#x2F;ae01.alicdn.com&#x2F;kf&#x2F;H18a4b998752a4ae68b8e85d432a5aef0l.png),url(https:&#x2F;&#x2F;ae01.alicdn.com&#x2F;kf&#x2F;H21b5f6b8496141a1979a33666e1074d9x.jpg)0% 0% &#x2F; cover;text-align: center;line-height: 200px;cursor: pointer; background-size: cover;&quot;&gt;紫蓝色渐变&lt;&#x2F;div&gt;### 图片类&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px; background: url(https:&#x2F;&#x2F;api.abcyun.co&#x2F;api&#x2F;tool&#x2F;bing&#x2F;token&#x2F;5d8f31cf6a8ab);text-align: center;line-height: 200px;cursor: pointer; background-size: cover;&quot;&gt;必应壁纸&lt;&#x2F;div&gt;&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px; background: url(https:&#x2F;&#x2F;api.abcyun.co&#x2F;api&#x2F;others&#x2F;randacgimage&#x2F;token&#x2F;5d8f31cf6a8ab);text-align: center;line-height: 200px;cursor: pointer; background-size: cover;&quot;&gt;随机二次元图&lt;&#x2F;div&gt;&lt;div data-type&#x3D;&quot;photo&quot; class&#x3D;&#39;bg_test&#39; style&#x3D;&quot;display:inline-block;width: 200px;height:200px; background: url(https:&#x2F;&#x2F;api.abcyun.co&#x2F;api&#x2F;others&#x2F;randacgblogbg&#x2F;token&#x2F;5d8f31cf6a8ab);text-align: center;line-height: 200px;cursor: pointer; background-size: cover;&quot;&gt;随机二次元背景图&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;## 测试文章### 春盼望着，盼望着，东风来了，春天的脚步近了。一切都像刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水长起来了，太阳的脸红起来了。小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满是的。坐着，躺着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏。风轻悄悄的，草绵软软的。桃树、杏树、梨树，你不让我，我不让你，都开满了花赶趟儿。红的像火，粉的像霞，白的像雪。花里带着甜味，闭了眼，树上仿佛已经满是桃儿、杏儿、梨儿。花下成千成百的蜜蜂嗡嗡地闹着，大小的蝴蝶飞来飞去。野花遍地是：杂样儿，有名字的，没名字的，散在花丛里，像眼睛，像星星，还眨呀眨的。“吹面不寒杨柳风”，不错的，像母亲的手抚摸着你。风里带来些新翻的泥土的气息，混着青草味，还有各种花的香，都在微微润湿的空气里酝酿。鸟儿将窠巢安在繁花嫩叶当中，高兴起来了，呼朋引伴地卖弄清脆的喉咙，唱出宛转的曲子，与轻风流水应和着。牛背上牧童的短笛，这时候也成天在嘹亮地响。雨是最寻常的，一下就是三两天。可别恼。看，像牛毛，像花针，像细丝，密密地斜织着，人家屋顶上全笼着一层薄烟。树叶子却绿得发亮，小草也青得逼你的眼。傍晚时候，上灯了，一点点黄晕的光，烘托出一片这安静而和平的夜。乡下去，小路上，石桥边，撑起伞慢慢走着的人;还有地里工作的农夫，披着蓑，戴着笠的。他们的草屋，稀稀疏疏的在雨里静默着。天上风筝渐渐多了，地上孩子也多了。城里乡下，家家户户，老老小小，他们也赶趟儿似的，一个个都出来了。舒活舒活筋骨，抖擞抖擞精神，各做各的一份事去，“一年之计在于春”;刚起头儿，有的是工夫，有的是希望。春天像刚落地的娃娃，从头到脚都是新的，它生长着。春天像小姑娘，花枝招展的，笑着，走着。春天像健壮的青年，有铁一般的胳膊和腰脚，他领着我们上前去。1. 有序列表2. 有序3. 有- 无需列表- 测试&#123;% note default icon %&#125;default&#123;% endnote %&#125;&#123;% note primary icon %&#125;primary&#123;% endnote %&#125;&#123;% note success icon %&#125;success&#123;% endnote %&#125;&#123;% note info icon %&#125;info&#123;% endnote %&#125;&#123;% note warning icon %&#125;warning&#123;% endnote %&#125;&#123;% note danger icon %&#125;danger&#123;% endnote %&#125;&#123;% note primary no-icon%&#125;#### Primary Header**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)&#123;% endnote %&#125;&lt;script&gt;var article_container&#x3D;document.getElementById(&quot;demo_style&quot;),opt&#x3D;document.getElementById(&quot;opt&quot;);article_container.addEventListener(&quot;click&quot;,function(e)&#123;var t&#x3D;e.target;&quot;DIV&quot;&#x3D;&#x3D;&#x3D;t.nodeName&amp;&amp;&quot;bg_test&quot;&#x3D;&#x3D;&#x3D;t.className&amp;&amp;(web_bg.style.background&#x3D;t.style.background,web_bg.style.animation&#x3D;t.style.animation),Cookies.set(&quot;bg&quot;,t.style.background,&#123;expires:1&#125;),Cookies.set(&quot;animation&quot;,t.style.animation,&#123;expires:1&#125;),Cookies.set(&quot;type&quot;,t.getAttribute(&quot;data-type&quot;),&#123;expires:1&#125;)&#125;),opt.addEventListener(&quot;click&quot;,function(e)&#123;var t&#x3D;e.target;if(&quot;A&quot;&#x3D;&#x3D;&#x3D;t.nodeName)&#123;var a&#x3D;t.getAttribute(&quot;data-opacity&quot;);if(a)&#123;Cookies.set(&quot;opacity&quot;,a,&#123;expires:1&#125;);var n&#x3D;&quot;--light_bg_color: rgb(255, 255, 255,&quot;+a+&quot;);&quot;,i&#x3D;&quot;--dark_bg_color: rgba(18,18,18,&quot;+a+&quot;);&quot;;document.getElementById(&quot;content-inner&quot;).setAttribute(&quot;style&quot;,n+i)&#125;&#125;e.preventDefault()&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="功能扩展"><a class="markdownIt-Anchor" href="#功能扩展"></a> 功能扩展</h2><p>这里的修改主要是针对一些功能性的拓展，例如tab，轮播图等。</p><h3 id="标签外挂"><a class="markdownIt-Anchor" href="#标签外挂"></a> 标签外挂</h3><p>此部分修改来源于<a href="https://github.com/xaoxuu/hexo-theme-volantis/">Volantis主题</a>，扩展的标签分别为<code>Checkbox &amp; Radio</code>、<code>富文本按钮</code>、<code>Tab</code>、<code>Folding</code>。</p><p>此项修改需要在源文件中添加新的文件，当然了并不会修改作者源文件。升级时只需要重新把这几个文件放入相应文件即可。文件下载地址：<a href="https://tzk.lanzous.com/icbscdg">https://tzk.lanzous.com/icbscdg</a>。</p><p>添加的位置为：主题目录下的<code>scripts</code>中的<code>tags</code>文件夹中。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA2LzcxOTIwZTBjZjY5ZDZhNzgxNWI4OGZlZjMxZjMxNDAyLnBuZw?x-oss-process=image/format,png" alt></p><p>接下来继续添加css、js代码即可。</p><ol><li><p>CSS代码</p><pre class="line-numbers language-none"><code class="language-none">div.tabs &#123;  display: block;  position: relative;  margin-top: 0.5rem;  margin-bottom: 0.5rem;  border-radius: 4px;  background: #fff;  border: 1px solid rgba(85, 85, 85, 0.2);  font-size: 0.7375rem;&#125;.tab::before &#123;  content: none !important;&#125;div.tabs ul li &#123;  padding: 0 !important;  margin: 0 !important;&#125;div.tabs ul li a &#123;  border-radius: 0;&#125;[data-theme&#x3D;&quot;dark&quot;] div.tabs &#123;  border-radius: 2px;  border-color: rgba(0, 0, 0, 0.8);&#125;[data-theme&#x3D;&quot;dark&quot;] div.tabs ul.nav-tabs &#123;  background: rgba(0, 0, 0, 0.8);  color: white;  filter: brightness(0.7);&#125;[data-theme&#x3D;&quot;dark&quot;] div.tabs .tab-content .tab-pane &#123;  background: rgba(0, 0, 0, 0.8);  color: rgba(255, 255, 255, 0.7);&#125;div.tabs .highlight,div.tabs details,div.tabs div.note,div.tabs ol,div.tabs p,div.tabs ul &#123;  margin-top: 0.5rem;  margin-bottom: 0.5rem;&#125;div.tabs ul.nav-tabs &#123;  display: -ms-flexbox;  display: flex;  overflow-x: auto;  white-space: nowrap;  -ms-flex-pack: start;  justify-content: flex-start;  margin: 0 !important;  padding: 0 !important;  background: #f6f6f6;  border-radius: 4px 4px 0 0;  line-height: 1.4em;&#125;div.tabs ul.nav-tabs li.tab &#123;  list-style-type: none;  margin-top: 0;  margin-bottom: 0;&#125;div.tabs ul.nav-tabs li.tab:last-child &#123;  padding-right: 16px;&#125;div.tabs ul.nav-tabs li.tab a &#123;  display: block;  cursor: pointer;  border-radius: 4px 4px 0 0;  padding: 8px;  text-align: center;  line-height: inherit;  font-weight: 700;  color: rgba(68, 68, 68, 0.65);  border: 1px solid transparent;&#125;div.tabs ul.nav-tabs li.tab a:hover &#123;  color: #555;&#125;div.tabs ul.nav-tabs li.tab.active a &#123;  cursor: default;  color: #555;  background: #fff;  border: 1px solid rgba(85, 85, 85, 0.2);  border-bottom: 1px solid #fff;&#125;div.tabs .tab-content &#123;  border-top: 1px solid rgba(85, 85, 85, 0.2);  margin-top: -1px;&#125;div.tabs .tab-content .tab-pane &#123;  padding: 16px;&#125;div.tabs .tab-content .tab-pane:not(.active) &#123;  display: none;  opacity: 0;&#125;div.tabs .tab-content .tab-pane.active &#123;  display: block;  opacity: 1;&#125;div.tabs .tab-content .tab-pane &gt; .fancybox:first-child,div.tabs .tab-content .tab-pane &gt; .highlight:first-child,div.tabs .tab-content .tab-pane &gt; .note:first-child,div.tabs .tab-content .tab-pane &gt; .tabs:first-child,div.tabs .tab-content .tab-pane &gt; ol:first-child,div.tabs .tab-content .tab-pane &gt; p:first-child,div.tabs .tab-content .tab-pane &gt; ul:first-child &#123;  margin-top: 0;&#125;div.tabs .tab-content .tab-pane &gt; .fancybox:last-child,div.tabs .tab-content .tab-pane &gt; .highlight:last-child,div.tabs .tab-content .tab-pane &gt; .note:last-child,div.tabs .tab-content .tab-pane &gt; .tabs:last-child,div.tabs .tab-content .tab-pane &gt; ol:last-child,div.tabs .tab-content .tab-pane &gt; p:last-child,div.tabs .tab-content .tab-pane &gt; ul:last-child &#123;  margin-bottom: 0;&#125;div.btns &#123;  margin: 0 -8px;  display: -ms-flexbox;  display: flex;  -ms-flex-wrap: wrap;  flex-wrap: wrap;  -ms-flex-align: start;  align-items: flex-start;  overflow: visible;&#125;[data-theme&#x3D;&quot;dark&quot;] div.btns &#123;  filter: brightness(0.7);&#125;[data-theme&#x3D;&quot;dark&quot;] div.btns a &#123;  background: 0 0;&#125;div.btns,div.btns a,div.btns p &#123;  font-size: 0.8125rem;  color: #555;&#125;div.btns b &#123;  font-size: 0.875rem;&#125;.btns img &#123;  margin: 0 !important;&#125;div.btns.wide &gt; a &#123;  padding-left: 32px;  padding-right: 32px;&#125;div.btns.fill &gt; a &#123;  -ms-flex-positive: 1;  flex-grow: 1;  width: auto;&#125;div.btns.around &#123;  -ms-flex-pack: distribute;  justify-content: space-around;&#125;div.btns.center &#123;  -ms-flex-pack: center;  justify-content: center;&#125;div.btns.grid2 &gt; a &#123;  width: calc(100% &#x2F; 2 - 16px);&#125;@media screen and (max-width: 1024px) &#123;  div.btns.grid2 &gt; a &#123;    width: calc(100% &#x2F; 2 - 16px);  &#125;&#125;@media screen and (max-width: 768px) &#123;  div.btns.grid2 &gt; a &#123;    width: calc(100% &#x2F; 2 - 16px);  &#125;&#125;@media screen and (max-width: 500px) &#123;  div.btns.grid2 &gt; a &#123;    width: calc(100% &#x2F; 1 - 16px);  &#125;&#125;div.btns.grid3 &gt; a &#123;  width: calc(100% &#x2F; 3 - 16px);&#125;@media screen and (max-width: 1024px) &#123;  div.btns.grid3 &gt; a &#123;    width: calc(100% &#x2F; 3 - 16px);  &#125;&#125;@media screen and (max-width: 768px) &#123;  div.btns.grid3 &gt; a &#123;    width: calc(100% &#x2F; 3 - 16px);  &#125;&#125;@media screen and (max-width: 500px) &#123;  div.btns.grid3 &gt; a &#123;    width: calc(100% &#x2F; 1 - 16px);  &#125;&#125;div.btns.grid4 &gt; a &#123;  width: calc(100% &#x2F; 4 - 16px);&#125;@media screen and (max-width: 1024px) &#123;  div.btns.grid4 &gt; a &#123;    width: calc(100% &#x2F; 3 - 16px);  &#125;&#125;@media screen and (max-width: 768px) &#123;  div.btns.grid4 &gt; a &#123;    width: calc(100% &#x2F; 3 - 16px);  &#125;&#125;@media screen and (max-width: 500px) &#123;  div.btns.grid4 &gt; a &#123;    width: calc(100% &#x2F; 2 - 16px);  &#125;&#125;div.btns.grid5 &gt; a &#123;  width: calc(100% &#x2F; 5 - 16px);&#125;@media screen and (max-width: 1024px) &#123;  div.btns.grid5 &gt; a &#123;    width: calc(100% &#x2F; 4 - 16px);  &#125;&#125;@media screen and (max-width: 768px) &#123;  div.btns.grid5 &gt; a &#123;    width: calc(100% &#x2F; 3 - 16px);  &#125;&#125;@media screen and (max-width: 500px) &#123;  div.btns.grid5 &gt; a &#123;    width: calc(100% &#x2F; 2 - 16px);  &#125;&#125;div.btns a &#123;  transition: all 0.28s ease;  -moz-transition: all 0.28s ease;  -webkit-transition: all 0.28s ease;  -o-transition: all 0.28s ease;  margin: 8px;  margin-top: calc(1.25 * 16px + 32px);  min-width: 120px;  font-weight: 700;  display: -ms-flexbox;  display: flex;  -ms-flex-pack: start;  justify-content: flex-start;  -ms-flex-line-pack: center;  align-content: center;  -ms-flex-align: center;  align-items: center;  -ms-flex-direction: column;  flex-direction: column;  padding: 8px;  text-align: center;  background: #f6f6f6;  border-radius: 4px;&#125;div.btns a &gt; i:first-child,div.btns a &gt; img:first-child &#123;  transition: all 0.28s ease;  -moz-transition: all 0.28s ease;  -webkit-transition: all 0.28s ease;  -o-transition: all 0.28s ease;  height: 64px;  width: 64px;  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);  margin: 16px 8px 4px 8px;  margin-top: calc(-1.25 * 16px - 32px);  border: 2px solid #fff;  background: #fff;  line-height: 60px;  font-size: 28px;&#125;div.btns a &gt; i:first-child.auto,div.btns a &gt; img:first-child.auto &#123;  width: auto;&#125;div.btns a &gt; i:first-child &#123;  color: #fff;  background: #2196f3;&#125;div.btns a b,div.btns a p &#123;  margin: 0.25em;  font-weight: 400;  line-height: 1.25;  word-wrap: break-word;&#125;div.btns a b &#123;  font-weight: 700;  line-height: 1.3;&#125;div.btns a img &#123;  margin: 0.4em auto;&#125;div.btns a:not([href]) &#123;  cursor: default;  color: inherit;&#125;div.btns a[href]:hover &#123;  background: rgba(255, 87, 34, 0.15);&#125;div.btns a[href]:hover,div.btns a[href]:hover b &#123;  color: #ff5722;&#125;div.btns a[href]:hover &gt; i:first-child,div.btns a[href]:hover &gt; img:first-child &#123;  transform: scale(1.1) translateY(-8px);  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);&#125;div.btns a[href]:hover &gt; i:first-child &#123;  background: #ff5722;&#125;div.btns.circle a &gt; i:first-child,div.btns.circle a &gt; img:first-child &#123;  border-radius: 32px;&#125;div.btns.rounded a &gt; i:first-child,div.btns.rounded a &gt; img:first-child &#123;  border-radius: 16px;&#125;.checkbox &#123;  display: -ms-flexbox;  display: flex;  -ms-flex-align: center;  align-items: center;&#125;.checkbox input &#123;  -webkit-appearance: none;  -moz-appearance: none;  -ms-appearance: none;  -o-appearance: none;  appearance: none;  position: relative;  height: 16px;  width: 16px;  transition: all 0.15s ease-out 0s;  cursor: pointer;  display: inline-block;  outline: 0;  border-radius: 2px;  -ms-flex-negative: 0;  flex-shrink: 0;  margin-right: 8px;&#125;[data-theme&#x3D;&quot;dark&quot;] .checkbox &#123;  filter: brightness(0.7);&#125;.checkbox input[type&#x3D;&quot;checkbox&quot;]:after,.checkbox input[type&#x3D;&quot;checkbox&quot;]:before &#123;  position: absolute;  content: &quot;&quot;;  background: #fff;&#125;.checkbox input[type&#x3D;&quot;checkbox&quot;]:before &#123;  left: 1px;  top: 5px;  width: 0;  height: 2px;  transition: all 0.2s ease-in;  transform: rotate(45deg);  -webkit-transform: rotate(45deg);  -moz-transform: rotate(45deg);  -ms-transform: rotate(45deg);  -o-transform: rotate(45deg);&#125;.checkbox input[type&#x3D;&quot;checkbox&quot;]:after &#123;  right: 7px;  bottom: 3px;  width: 2px;  height: 0;  transition: all 0.2s ease-out;  transform: rotate(40deg);  -webkit-transform: rotate(40deg);  -moz-transform: rotate(40deg);  -ms-transform: rotate(40deg);  -o-transform: rotate(40deg);  transition-delay: 0.25s;&#125;.checkbox input[type&#x3D;&quot;checkbox&quot;]:checked:before &#123;  left: 0;  top: 7px;  width: 6px;  height: 2px;&#125;.checkbox input[type&#x3D;&quot;checkbox&quot;]:checked:after &#123;  right: 3px;  bottom: 1px;  width: 2px;  height: 10px;&#125;.checkbox.minus input[type&#x3D;&quot;checkbox&quot;]:before &#123;  transform: rotate(0);  left: 1px;  top: 5px;  width: 0;  height: 2px;&#125;.checkbox.minus input[type&#x3D;&quot;checkbox&quot;]:after &#123;  transform: rotate(0);  left: 1px;  top: 5px;  width: 0;  height: 2px;&#125;.checkbox.minus input[type&#x3D;&quot;checkbox&quot;]:checked:before &#123;  left: 1px;  top: 5px;  width: 10px;  height: 2px;&#125;.checkbox.minus input[type&#x3D;&quot;checkbox&quot;]:checked:after &#123;  left: 1px;  top: 5px;  width: 10px;  height: 2px;&#125;.checkbox.plus input[type&#x3D;&quot;checkbox&quot;]:before &#123;  transform: rotate(0);  left: 1px;  top: 5px;  width: 0;  height: 2px;&#125;.checkbox.plus input[type&#x3D;&quot;checkbox&quot;]:after &#123;  transform: rotate(0);  left: 5px;  top: 1px;  width: 2px;  height: 0;&#125;.checkbox.plus input[type&#x3D;&quot;checkbox&quot;]:checked:before &#123;  left: 1px;  top: 5px;  width: 10px;  height: 2px;&#125;.checkbox.plus input[type&#x3D;&quot;checkbox&quot;]:checked:after &#123;  left: 5px;  top: 1px;  width: 2px;  height: 10px;&#125;.checkbox.times input[type&#x3D;&quot;checkbox&quot;]:before &#123;  transform: rotate(45deg);  left: 3px;  top: 1px;  width: 0;  height: 2px;&#125;.checkbox.times input[type&#x3D;&quot;checkbox&quot;]:after &#123;  transform: rotate(135deg);  right: 3px;  top: 1px;  width: 0;  height: 2px;&#125;.checkbox.times input[type&#x3D;&quot;checkbox&quot;]:checked:before &#123;  left: 1px;  top: 5px;  width: 10px;  height: 2px;&#125;.checkbox.times input[type&#x3D;&quot;checkbox&quot;]:checked:after &#123;  right: 1px;  top: 5px;  width: 10px;  height: 2px;&#125;.checkbox input[type&#x3D;&quot;radio&quot;] &#123;  border-radius: 50%;&#125;.checkbox input[type&#x3D;&quot;radio&quot;]:before &#123;  content: &quot;&quot;;  display: block;  width: 8px;  height: 8px;  border-radius: 50%;  margin: 2px;  transform: scale(0);  transition: all 0.25s ease-out;&#125;.checkbox input[type&#x3D;&quot;radio&quot;]:checked:before &#123;  transform: scale(1);&#125;.checkbox input &#123;  border: 2px solid #2196f3;&#125;.checkbox input[type&#x3D;&quot;checkbox&quot;]:checked &#123;  background: #2196f3;&#125;.checkbox input[type&#x3D;&quot;radio&quot;]:checked:before &#123;  background: #2196f3;&#125;.checkbox.red input &#123;  border-color: #fe5f58;&#125;.checkbox.red input[type&#x3D;&quot;checkbox&quot;]:checked &#123;  background: #fe5f58;&#125;.checkbox.red input[type&#x3D;&quot;radio&quot;]:checked:before &#123;  background: #fe5f58;&#125;.checkbox.green input &#123;  border-color: #3dc550;&#125;.checkbox.green input[type&#x3D;&quot;checkbox&quot;]:checked &#123;  background: #3dc550;&#125;.checkbox.green input[type&#x3D;&quot;radio&quot;]:checked:before &#123;  background: #3dc550;&#125;.checkbox.yellow input &#123;  border-color: #ffbd2b;&#125;.checkbox.yellow input[type&#x3D;&quot;checkbox&quot;]:checked &#123;  background: #ffbd2b;&#125;.checkbox.yellow input[type&#x3D;&quot;radio&quot;]:checked:before &#123;  background: #ffbd2b;&#125;.checkbox.cyan input &#123;  border-color: #1bcdfc;&#125;.checkbox.cyan input[type&#x3D;&quot;checkbox&quot;]:checked &#123;  background: #1bcdfc;&#125;.checkbox.cyan input[type&#x3D;&quot;radio&quot;]:checked:before &#123;  background: #1bcdfc;&#125;.checkbox.blue input &#123;  border-color: #2196f3;&#125;.checkbox.blue input[type&#x3D;&quot;checkbox&quot;]:checked &#123;  background: #2196f3;&#125;.checkbox.blue input[type&#x3D;&quot;radio&quot;]:checked:before &#123;  background: #2196f3;&#125;.checkbox p &#123;  display: inline-block;  margin-top: 2px !important;  margin-bottom: 0 !important;&#125;div.tabs details &#123;  margin-top: 0.5rem;  margin-bottom: 0.5rem;&#125;details &#123;  display: block;  padding: 16px;  margin: 0.5rem 0;  border-radius: 4px;  font-size: 0.7375rem;  transition: all 0.28s ease;  -moz-transition: all 0.28s ease;  -webkit-transition: all 0.28s ease;  -o-transition: all 0.28s ease;  border: 1px solid #f6f6f6;  line-height: 1.3;&#125;[data-theme&#x3D;&quot;dark&quot;] details &#123;  filter: brightness(0.7);&#125;details summary &#123;  cursor: pointer;  padding: 16px;  margin: -16px;  border-radius: 4px;  color: rgba(85, 85, 85, 0.7);  font-size: 0.775rem;  font-weight: 700;  position: relative;&#125;details summary &gt; h1,details summary &gt; h2,details summary &gt; h3,details summary &gt; h4,details summary &gt; h5,details summary &gt; h6,details summary &gt; p &#123;  display: inline;  border-bottom: none !important;  margin-top: 2px;  margin-bottom: 0;&#125;details summary:hover &#123;  color: #555;&#125;details summary:hover:after &#123;  position: absolute;  content: &quot;+&quot;;  text-align: center;  top: 50%;  transform: translateY(-50%);  right: 16px;&#125;details &gt; summary &#123;  background: #f6f6f6;&#125;details[blue] &#123;  border-color: #e8f4fd;&#125;details[blue] &gt; summary &#123;  background: #e8f4fd;&#125;details[cyan] &#123;  border-color: #e8fafe;&#125;details[cyan] &gt; summary &#123;  background: #e8fafe;&#125;details[green] &#123;  border-color: #ebf9ed;&#125;details[green] &gt; summary &#123;  background: #ebf9ed;&#125;details[yellow] &#123;  border-color: #fff8e9;&#125;details[yellow] &gt; summary &#123;  background: #fff8e9;&#125;details[red] &#123;  border-color: #feefee;&#125;details[red] &gt; summary &#123;  background: #feefee;&#125;details[open] &#123;  border-color: rgba(85, 85, 85, 0.2);&#125;details[open] &gt; summary &#123;  border-bottom: 1px solid rgba(85, 85, 85, 0.2);  border-bottom-left-radius: 0;  border-bottom-right-radius: 0;&#125;details[open][blue] &#123;  border-color: rgba(33, 150, 243, 0.3);&#125;details[open][blue] &gt; summary &#123;  border-bottom-color: rgba(33, 150, 243, 0.3);&#125;details[open][cyan] &#123;  border-color: rgba(27, 205, 252, 0.3);&#125;details[open][cyan] &gt; summary &#123;  border-bottom-color: rgba(27, 205, 252, 0.3);&#125;details[open][green] &#123;  border-color: rgba(61, 197, 80, 0.3);&#125;details[open][green] &gt; summary &#123;  border-bottom-color: rgba(61, 197, 80, 0.3);&#125;details[open][yellow] &#123;  border-color: rgba(255, 189, 43, 0.3);&#125;details[open][yellow] &gt; summary &#123;  border-bottom-color: rgba(255, 189, 43, 0.3);&#125;details[open][red] &#123;  border-color: rgba(254, 95, 88, 0.3);&#125;details[open][red] &gt; summary &#123;  border-bottom-color: rgba(254, 95, 88, 0.3);&#125;details[open] &gt; summary &#123;  color: #555;  margin-bottom: 0;&#125;details[open] &gt; summary:hover:after &#123;  content: &quot;-&quot;;&#125;details[open] &gt; div.content &#123;  padding: 16px;  margin: -16px;  margin-top: 0;&#125;details[open] &gt; div.content &gt; .fancybox:first-child,details[open] &gt; div.content &gt; .highlight:first-child,details[open] &gt; div.content &gt; .note:first-child,details[open] &gt; div.content &gt; .tabs:first-child,details[open] &gt; div.content &gt; ol:first-child,details[open] &gt; div.content &gt; p:first-child,details[open] &gt; div.content &gt; ul:first-child &#123;  margin-top: 0;&#125;details[open] &gt; div.content &gt; .fancybox:last-child,details[open] &gt; div.content &gt; .highlight:last-child,details[open] &gt; div.content &gt; .note:last-child,details[open] &gt; div.content &gt; .tabs:last-child,details[open] &gt; div.content &gt; ol:last-child,details[open] &gt; div.content &gt; p:last-child,details[open] &gt; div.content &gt; ul:last-child &#123;  margin-bottom: 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JS代码</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* eslint-disable *&#x2F;(function ($) &#123;  &quot;use strict&quot;;  function setTabs() &#123;    const $tabs &#x3D; $(&quot;.tabs&quot;);    if ($tabs.length &#x3D;&#x3D;&#x3D; 0) return;    let $navs &#x3D; $tabs.find(&quot;.nav-tabs .tab&quot;);    for (var i &#x3D; 0; i &lt; $navs.length; i++) &#123;      let $a &#x3D; $tabs.find($navs[i].children[0]);      $a.addClass($a.attr(&quot;href&quot;));      $a.removeAttr(&quot;href&quot;);    &#125;    $(&quot;.tabs .nav-tabs&quot;).on(&quot;click&quot;, &quot;a&quot;, (e) &#x3D;&gt; &#123;      e.preventDefault();      e.stopPropagation();      let $tab &#x3D; $(e.target.parentElement.parentElement.parentElement);      $tab.find(&quot;.nav-tabs .active&quot;).removeClass(&quot;active&quot;);      $tab.find(e.target.parentElement).addClass(&quot;active&quot;);      $tab.find(&quot;.tab-content .active&quot;).removeClass(&quot;active&quot;);      $tab.find($(e.target).attr(&quot;class&quot;)).addClass(&quot;active&quot;);      return false;    &#125;);  &#125;  $(function () &#123;    setTabs();    &#x2F;&#x2F; $(&quot;.article .video-container&quot;).fitVids();    $(&quot;.scroll-down&quot;).on(&quot;click&quot;, function () &#123;      scrolltoElement(&quot;.l_body&quot;);    &#125;);    setTimeout(function () &#123;      $(&quot;#loading-bar-wrapper&quot;).fadeOut(500);    &#125;, 300);  &#125;);&#125;)(jQuery);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>接下来就可以使用扩展标签了，具体语法可以参照<a href="https://volantis.js.org/v2/tag-plugins/">源主题文档</a>。</p><p><strong>注意：不是所有的标签都可以使用，请对应功能进行使用。</strong></p></blockquote><h3 id="自定义note图标-颜色"><a class="markdownIt-Anchor" href="#自定义note图标-颜色"></a> 自定义note（图标、颜色）</h3><p>此项修改引用的图标是阿里iconfont图标。并不适用于Font Awesome。且你所使用的图标需引入的css中存在。关于如何使用阿里iconfont请参考<a href="https://www.antmoe.com/posts/80c43671/index.html">Hexo博客之优雅使用阿里iconfont图标</a>。这里只介绍成功引入阿里图标后如何自定义note标签的图标及颜色。</p><p>需要在css中加入以下规则。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 自定义note *&#x2F;.note.custom &#123;  background-color: #f7f7f7;  border-left-color: #777;  display: block;&#125;.custom:not(.no-icon)::before &#123;  font-family: &quot;iconfont&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来便可以在md中直接使用HTML标签自定义图标了。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;note icon custom iconfont 图标名&quot; style&#x3D;&quot;background: #f7f7f7;border-left-color: #777;&quot;&gt;&lt;p&gt;default&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上代码中的<code>class</code>名中的图标名在项目中查找。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA3LzQxZjY5YmZlNmVjOGQwNWIzOTZkODg0ODFmY2Y3ODk3LnBuZw?x-oss-process=image/format,png" alt></p><ul><li><p><code>background</code></p><p>表示note的背景，可以自行设置。当然渐变背景理论上也是可以的。</p></li><li><p><code>border-left-color</code></p><p>左边框的颜色。</p></li></ul><p>点击复制代码即可粘贴到图表名。例如以下代码效果。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;note icon custom iconfont icon-QQ&quot; style&#x3D;&quot;background: #f7f7f7;border-left-color: #777;&quot;&gt;&lt;p&gt;default&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>QQ图标</p><p><em>因为每个人的项目图标不一样，因此可能会出现class名相同但图标不一样的效果。具体效果以图标项目仓库为准。</em></p><p>常用配色搭配</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* default *&#x2F;&lt;div class&#x3D;&quot;note  icon custom iconfont icon-QQ2&quot; style&#x3D;&quot;background: #f7f7f7;border-left-color: #777;&quot;&gt;&lt;p&gt;default&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&#x2F;* success *&#x2F;&lt;div class&#x3D;&quot;note  icon custom iconfont icon-QQ2&quot; style&#x3D;&quot;background: #eff8f0;border-left-color: #5cb85c;&quot;&gt;&lt;p&gt;success&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&#x2F;* primary *&#x2F;&lt;div class&#x3D;&quot;note  icon custom iconfont icon-QQ2&quot; style&#x3D;&quot;background: #f5f0fa;border-left-color: #6f42c1;&quot;&gt;&lt;p&gt;primary&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&#x2F;* info *&#x2F;&lt;div class&#x3D;&quot;note  icon custom iconfont icon-QQ2&quot; style&#x3D;&quot;background: #eef7fa;border-left-color: #428bca;&quot;&gt;&lt;p&gt;info&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&#x2F;* warning *&#x2F;&lt;div class&#x3D;&quot;note  icon custom iconfont icon-QQ2&quot; style&#x3D;&quot;background: #fdf8ea;border-left-color: #f0ad4e;&quot;&gt;&lt;p&gt;warning&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&#x2F;* danger *&#x2F;&lt;div class&#x3D;&quot;note  icon custom iconfont icon-QQ2&quot; style&#x3D;&quot;background: #fcf1f2;border-left-color: #d9534f;&quot;&gt;&lt;p&gt;danger&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主题自带隐藏按钮"><a class="markdownIt-Anchor" href="#主题自带隐藏按钮"></a> 主题自带隐藏按钮</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA2L2VmNGY0M2I0MGM1NTE5MDI3NTJhN2JkMjBlODIxZTU1LnBuZw?x-oss-process=image/format,png" alt></p><p>主题自带的隐藏按钮点击后消失，则不可以再次隐藏。修改方法很简单，一段css代码即可。</p><pre class="line-numbers language-none"><code class="language-none">.hide-block&gt;a.hide-button.open, .hide-inline&gt;a.hide-button.open &#123;    display: inline-block;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="轮播图"><a class="markdownIt-Anchor" href="#轮播图"></a> 轮播图</h3><p>轮播图的修改来源于网络（jq）的一个插件。此项修改引入js文件即可。</p><pre class="line-numbers language-none"><code class="language-none">(function () &#123;  function Slider(option) &#123;    this.wrap &#x3D; option.wrap;    this.imgList &#x3D; option.imgList;    this.imgNum &#x3D; this.imgList.length;    this.width &#x3D; option.width || $(this.wrap).width();    this.height &#x3D; option.height || $(this.wrap).height();    this.isAuto &#x3D; option.isAuto || true;    this.moveTime &#x3D; option.moveTime;    this.direction &#x3D; option.direction || &quot;right&quot;;    this.btnWidth &#x3D; option.btnWidth;    this.btnHeight &#x3D; option.btnHeight;    this.spanWidth &#x3D; option.spanWidth;    this.spanHeight &#x3D; option.spanHeight;    this.spanColor &#x3D; option.spanColor;    this.activeSpanColor &#x3D; option.activeSpanColor;    this.btnBackgroundColor &#x3D; option.btnBackgroundColor;    this.spanRadius &#x3D; option.spanRadius;    this.spanMargin &#x3D; option.spanMargin;    this.flag &#x3D; false;    this.nowIndex &#x3D; 0;    this.createDom();    this.initStyle();    this.bindEvent();    if (this.isAuto &#x3D;&#x3D;&#x3D; true) &#123;      this.autoMove();    &#125;  &#125;  Slider.prototype.createDom &#x3D; function () &#123;    var oUl &#x3D; $(&#39;&lt;ul class&#x3D;&quot;imgList&quot;&gt;&lt;&#x2F;ul&gt;&#39;);    var Spot &#x3D; $(&#39;&lt;div class&#x3D;&quot;spot&quot;&gt;&lt;&#x2F;div&gt;&#39;);    this.imgList.forEach(function (item) &#123;      var oLi &#x3D;        &#39;&lt;li&gt;&lt;a  href&#x3D;&quot; &#39; +        item.a +        &#39;target&#x3D;&quot;_blank&quot; &quot;&gt;&lt;img src&#x3D;&quot; &#39; +        item.img +        &#39; &quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;;      oUl.append(oLi);      var span &#x3D; &quot;&lt;span&gt;&lt;&#x2F;span&gt;&quot;;      Spot.append(span);    &#125;);    var leftBtn &#x3D; $(      &#39;&lt;div class&#x3D;&quot;left-btn&quot;&gt;&lt;i class&#x3D;&quot;fas fa-angle-left&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;div&gt;&#39;    );    var rightBtn &#x3D; $(      &#39;&lt;div class&#x3D;&quot;right-btn&quot;&gt;&lt;i class&#x3D;&quot;fas fa-angle-right&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;div&gt;&#39;    );    this.wrap.append(oUl).append(leftBtn).append(rightBtn).append(Spot);  &#125;;  Slider.prototype.initStyle &#x3D; function () &#123;    $(&quot;*&quot;, this.wrap).css(&#123; margin: 0, padding: 0, listStyle: &quot;none&quot; &#125;);    $(this.wrap).css(&#123; overflow: &quot;hidden&quot;, position: &quot;relative&quot; &#125;);    $(&quot;.imgList&quot;, this.wrap).css(&#123;      width: this.width,      height: this.height,      position: &quot;relative&quot;,    &#125;);    $(&quot;.imgList li&quot;, this.wrap)      .css(&#123;        width: this.width,        height: this.height,        position: &quot;absolute&quot;,        left: 0,        top: 0,        display: &quot;none&quot;,      &#125;)      .eq(this.nowIndex)      .css(&#123; display: &quot;block&quot; &#125;);    $(&quot;.imgList li a, .imgList li a img&quot;, this.wrap).css(&#123;      display: &quot;inline-block&quot;,      width: this.width,      height: this.height,    &#125;);    $(&quot;.left-btn, .right-btn&quot;, this.wrap).css(&#123;      width: this.btnWidth,      height: this.btnHeight,      backgroundColor: this.btnBackgroundColor,      color: &quot;#fff&quot;,      textAlign: &quot;center&quot;,      lineHeight: this.btnHeight + &quot;px&quot;,      position: &quot;absolute&quot;,      top: &quot;50%&quot;,      marginTop: -this.btnHeight &#x2F; 2,      cursor: &quot;pointer&quot;,    &#125;);    $(&quot;.right-btn&quot;, this.wrap).css(&#123; right: 0 &#125;);    $(&quot;.spot&quot;, this.wrap).css(&#123;      height: this.spanHeight + this.spanMargin * 2,      position: &quot;absolute&quot;,      left: &quot;50%&quot;,      marginLeft: (-this.imgNum * (this.spanWidth + this.spanMargin * 2)) &#x2F; 2,      bottom: 10,    &#125;);    $(&quot;.spot span&quot;, this.wrap)      .css(&#123;        display: &quot;inline-block&quot;,        width: this.spanWidth,        height: this.spanHeight,        margin: this.spanMargin,        backgroundColor: this.spanColor,        borderRadius: this.spanRadius,        cursor: &quot;pointer&quot;,      &#125;)      .eq(this.nowIndex)      .css(&#123; backgroundColor: this.activeSpanColor &#125;);  &#125;;  Slider.prototype.bindEvent &#x3D; function () &#123;    var self &#x3D; this;    $(&quot;.left-btn&quot;, this.wrap).click(function () &#123;      self.move(&quot;prev&quot;);    &#125;);    $(&quot;.right-btn&quot;, this.wrap).click(function () &#123;      self.move(&quot;next&quot;);    &#125;);    $(&quot;.spot span&quot;).click(function (e) &#123;      self.move($(this).index());    &#125;);    $(this.wrap).mouseenter(function () &#123;      clearInterval(self.time);    &#125;);  &#125;;  Slider.prototype.move &#x3D; function (dir) &#123;    if (this.flag) &#123;      return false;    &#125;    this.flag &#x3D; true;    switch (dir) &#123;      case &quot;prev&quot;:        if (this.nowIndex &#x3D;&#x3D;&#x3D; 0) &#123;          this.nowIndex &#x3D; this.imgNum - 1;        &#125; else &#123;          this.nowIndex--;        &#125;        break;      case &quot;next&quot;:        if (this.nowIndex &#x3D;&#x3D;&#x3D; this.imgNum - 1) &#123;          this.nowIndex &#x3D; 0;        &#125; else &#123;          this.nowIndex++;        &#125;        break;      default:        this.nowIndex &#x3D; dir;        break;    &#125;    var self &#x3D; this;    $(&quot;.imgList li&quot;, this.wrap)      .fadeOut()      .eq(this.nowIndex)      .fadeIn(function () &#123;        self.flag &#x3D; false;      &#125;);    $(&quot;.spot  span&quot;, this.wrap)      .css(&#123; backgroundColor: this.spanColor &#125;)      .eq(this.nowIndex % this.imgNum)      .css(&#123; backgroundColor: this.activeSpanColor &#125;);  &#125;;  Slider.prototype.autoMove &#x3D; function () &#123;    var self &#x3D; this;    this.time &#x3D; setInterval(function () &#123;      if (this.direction &#x3D;&#x3D; &quot;left&quot;) &#123;        $(&quot;.left-btn&quot;, this.wrap).trigger(&quot;click&quot;);      &#125; else &#123;        $(&quot;.right-btn&quot;, this.wrap).trigger(&quot;click&quot;);      &#125;    &#125;, self.moveTime);  &#125;;  $.fn.extend(&#123;    slider: function (option) &#123;      option.wrap &#x3D; this;      new Slider(option);    &#125;,  &#125;);&#125;)();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用也很简单，只要在md文章中写入以下内容即可</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;&lt;script&gt;    function tt()&#123;        $(&#39;.demo&#39;).slider(&#123;    imgList: [        &#123;            img: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;blogimg&#x2F;picbed@master&#x2F;2020&#x2F;04&#x2F;13&#x2F;2a877ea5da1292c817cbc2a254c01c31.png&#39;,            a: &#39;跳转url地址&#39;,        &#125;,        &#123;            img: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;blogimg&#x2F;picbed@master&#x2F;2020&#x2F;04&#x2F;13&#x2F;5005109d1aa2ffd28984c2b02b8cbfbe.png&#39;,            a: &#39;跳转url地址&#39;,        &#125;,        &#123;            img: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;blogimg&#x2F;picbed@master&#x2F;2020&#x2F;04&#x2F;13&#x2F;163a2ade4361d1ed705ed523091af67e.png&#39;,            a: &#39;跳转url地址&#39;,        &#125;    ], &#x2F;&#x2F;图片的列表，a属性里面存放的是网络地址，img存放的是图片地址    width: &quot;100%&quot;, &#x2F;&#x2F;图片的宽    height: 500, &#x2F;&#x2F;图片的高    isAuto: false, &#x2F;&#x2F;是否自动轮播    moveTime: 3000, &#x2F;&#x2F;运动时间    direction: &#39;right&#39;, &#x2F;&#x2F;轮播的方向    btnWidth: 30, &#x2F;&#x2F;按钮的宽    btnHeight: 30, &#x2F;&#x2F;按钮的高    spanWidth: 10, &#x2F;&#x2F;span按钮的宽    spanHeight: 10, &#x2F;&#x2F;span按钮的高    spanColor: &#39;#fff&#39;, &#x2F;&#x2F;span按钮的颜色    activeSpanColor: &#39;red&#39;, &#x2F;&#x2F;选中的span颜色    btnBackgroundColor: &#39;rgba(0, 0, 0, 0.3)&#39;, &#x2F;&#x2F;两侧按钮的颜色    spanRadius: &#39;50%&#39;, &#x2F;&#x2F;span按钮的圆角程度    spanMargin: 3, &#x2F;&#x2F;span之间的距离&#125;)    &#125;    window.addEventListener(&#39;DOMContentLoaded&#39;,tt)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码解读：<code>&lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</code>用于下边JS代码定位元素用。如果改变class名，下边的JS选择器也需要做出对应的改变。</p><p>下边的Javascript代码用于生成轮播图。各项配置看注释即可。</p></blockquote><h3 id="特殊按钮"><a class="markdownIt-Anchor" href="#特殊按钮"></a> 特殊按钮</h3><p>只需要引入一个css即可解决。由于css过长，因此只给出一个在线链接，你可以将其下载放到自己的空间里，也可以直接引用。</p><p>地址：<a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/buttons.min.css">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/buttons.min.css</a></p><p>样式及使用请参考<a href="https://www.antmoe.com/posts/58a62380/index.html">https://www.antmoe.com/posts/58a62380/index.html</a></p><h3 id="使用阿里iconfont图标"><a class="markdownIt-Anchor" href="#使用阿里iconfont图标"></a> 使用阿里Iconfont图标</h3><p>参考<a href="https://www.antmoe.com/posts/80c43671/index.html">Hexo博客之优雅使用阿里iconfont图标</a></p><h2 id="评论类修改"><a class="markdownIt-Anchor" href="#评论类修改"></a> 评论类修改</h2><p>此项修改主要是针对valine评论以及双评论。</p><h3 id="valine评论小标签"><a class="markdownIt-Anchor" href="#valine评论小标签"></a> valine评论小标签</h3><p>这里valine的修改主要是一些小标签（访客，博主等。）</p><p>可以参照：<a href="https://blog.hclonely.com/posts/409d3090/#%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%9B%BE%E6%A0%87">HCLonely Blog的修改教程</a></p><h3 id="双评论支持"><a class="markdownIt-Anchor" href="#双评论支持"></a> 双评论支持</h3><p>双评论支持也是源于<a href="https://blog.hclonely.com/posts/57bd67ce/#%E5%8F%8C%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F">HCLonely Blog的修改教程</a>,但是他的教程需要改动三个pug模板，因此这种做法对于升级主题来说成本还是有点高的。因此我的解决方案最大限度的减少了更改pug模板的成本。但还是需要改动pug模板的。</p><ol><li><p>修改pug模板</p><p>位置：<code>\themes\Butterfly\layout\includes\comments\index.pug</code></p><p>修改内容：将所有的 else if 改为 if。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvcGljYmVkQGxhdGVzdC8yMDIwLzA1LzA2LzRkNmVkMDY5NjA3NDcwZTMyYjVlN2U1NDgyYmI4NmRlLnBuZw?x-oss-process=image/format,png" alt></p></li><li><p>添加JS代码</p><p>将以下代码复制到你自己创建的JS文件中。</p><pre class="line-numbers language-none"><code class="language-none">function switchComment() &#123;  const t &#x3D;      &quot;切换为Gitalk&quot; &#x3D;&#x3D;&#x3D; $(&quot;#switch-comment&quot;).attr(&quot;title&quot;)        ? &quot;切换为Valine&quot;        : &quot;切换为Gitalk&quot;,    o &#x3D; $(&quot;#switch-comment&gt;i&quot;);  &quot;none&quot; &#x3D;&#x3D;&#x3D; $(&quot;#gitalk-container&quot;).css(&quot;display&quot;)    ? $(&quot;#vcomment&quot;).slideUp(&quot;normal&quot;, () &#x3D;&gt; &#123;        $(&quot;#gitalk-container&quot;).slideDown(&quot;normal&quot;, () &#x3D;&gt; &#123;          $(&quot;#switch-comment&quot;).attr(&quot;title&quot;, t),            o.hasClass(&quot;fa-toggle-off&quot;)              ? o.removeClass(&quot;fa-toggle-off&quot;).addClass(&quot;fa-toggle-on&quot;)              : o.removeClass(&quot;fa-toggle-on&quot;).addClass(&quot;fa-toggle-off&quot;);        &#125;);      &#125;)    : $(&quot;#gitalk-container&quot;).slideUp(&quot;normal&quot;, () &#x3D;&gt; &#123;        $(&quot;#vcomment&quot;).slideDown(&quot;normal&quot;, () &#x3D;&gt; &#123;          $(&quot;#switch-comment&quot;).attr(&quot;title&quot;, t),            o.hasClass(&quot;fa-toggle-off&quot;)              ? o.removeClass(&quot;fa-toggle-off&quot;).addClass(&quot;fa-toggle-on&quot;)              : o.removeClass(&quot;fa-toggle-on&quot;).addClass(&quot;fa-toggle-off&quot;);        &#125;);      &#125;);&#125;var commentElement &#x3D; document.getElementsByClassName(&quot;comment_headling&quot;)[0];if (commentElement !&#x3D; undefined) &#123;  commentElement.innerHTML +&#x3D;    &#39;&lt;a id&#x3D;&quot;switch-comment&quot; href&#x3D;&quot;javascript:void(0);&quot; title&#x3D;&quot;切换为Gitalk&quot; target&#x3D;&quot;_self&quot;&gt;&lt;i class&#x3D;&quot;fa fas fa-toggle-off&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;&#39;;  document.getElementById(&quot;gitalk-container&quot;).style.display &#x3D; &quot;none&quot;;&#125;$(&quot;#switch-comment&quot;).click(function () &#123;  return switchComment(), !1;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>这个js脚本也提供现成的链接，<a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/switch.min.js">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/switch.min.js</a></p></blockquote><p>至此即可完成双评论的修改，只修改<code>else if</code> 为<code>if</code>是不是比修改三处pug模板简单多了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2Jsb2dpbWcvZW1vdGlvbi9iaWxpYmlsaS9mYWNlXyVFNSU5MCU4MyVFNyU5MyU5Qy5wbmc?x-oss-process=image/format,png" alt="吃瓜-小康博客"></p><h3 id="valine评论添加表情"><a class="markdownIt-Anchor" href="#valine评论添加表情"></a> Valine评论添加表情</h3><p>参考<a href="https://www.antmoe.com/posts/284f2e1c/index.html">Valine如何添加多个表情</a></p><h3 id="valien评论qq-微信提醒"><a class="markdownIt-Anchor" href="#valien评论qq-微信提醒"></a> Valien评论QQ、微信提醒</h3><p>两份方案任选其一即可。</p><p><a href="https://www.antmoe.com/posts/2380732b/index.html">Hexo博客valine评论微信、qq提醒</a>与<a href="https://blog.hclonely.com/posts/409d3090/#%E8%AF%84%E8%AE%BA%E5%BE%AE%E4%BF%A1%E9%80%9A%E7%9F%A5%E5%8F%8Aqq%E9%80%9A%E7%9F%A5">评论微信通知及qq通知</a></p><h2 id="在线css提供"><a class="markdownIt-Anchor" href="#在线css提供"></a> 在线css提供</h2><p>以下链接不完整，更多链接请到我的<a href="https://github.com/sviptzk/HexoStaticFile">仓库</a>自行寻觅！</p><ul><li><p>背景、滚动条、鼠标三合一</p><p>背景颜色及鼠标不单独提供，如需单独启动，请自行创建css并引用</p><p><a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/custom.min.css">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/custom.min.css</a></p></li><li><p>单独页脚渐变</p><p><a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/footer.min.css">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/footer.min.css</a></p></li><li><p>友链页面css</p><p><a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/flink.min.css">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/flink.min.css</a></p></li><li><p>多种按钮</p><p><a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/buttons.min.css">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/buttons.min.css</a></p></li></ul><h2 id="遇到问题"><a class="markdownIt-Anchor" href="#遇到问题"></a> 遇到问题</h2><p>如果遇到什么问题例如：修改完成后样式不对、缺少文件（<sub>写文章时可能忘记加上</sub>）等问题可以在下方留言或者将问题发送到我的邮箱。我会在第一时间内帮助解决问题。</p><p>温馨提示</p><p>如果不知道怎么引入css/js请仔细看文章开头部分。</p><p>如果还是看不懂，那么我建议你不要魔改。</p><p>本文转自 <a href="https://www.cnblogs.com/antmoe/p/12846393.html">https://www.cnblogs.com/antmoe/p/12846393.html</a>，如有侵权，请联系删除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo博客之butterfly主题优雅魔改系列&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexo博客之butterfly主题优雅魔改系列&quot;&gt;&lt;/a&gt; Hexo博客之butterfly主题优雅魔改系列&lt;/h1&gt;
&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+github免费搭建个人博客网站</title>
    <link href="http://example.com/2022/07/11/qi-ta-ji-zhu/hexo/shi-yong-hexo-github-mian-fei-da-jian-ge-ren-bo-ke-wang-zhan-chao-xiang-xi-jiao-cheng/"/>
    <id>http://example.com/2022/07/11/qi-ta-ji-zhu/hexo/shi-yong-hexo-github-mian-fei-da-jian-ge-ren-bo-ke-wang-zhan-chao-xiang-xi-jiao-cheng/</id>
    <published>2022-07-10T16:00:00.000Z</published>
    <updated>2022-07-11T05:46:36.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用hexogithub免费搭建个人博客网站超详细教程"><a class="markdownIt-Anchor" href="#使用hexogithub免费搭建个人博客网站超详细教程"></a> 使用hexo+github免费搭建个人博客网站超详细教程</h1><p><a href="https://blog.csdn.net/wapchief/article/details/54602515">参考依据</a></p><p>优点<br>1、不需要服务器，github免费提供的托管服务<br>2、不需要域名，github同样提供了一个.io的域名<br>3、不用自己写xml、hexo提供了很多开源的博客模板。<br>4、便于维护更新，换风格直接换模板就行。</p><h1 id="安装相关工具"><a class="markdownIt-Anchor" href="#安装相关工具"></a> 安装相关工具</h1><h2 id="1-安装nodejs"><a class="markdownIt-Anchor" href="#1-安装nodejs"></a> 1、安装Node.js</h2><p><a href="https://nodejs.org/en/">nodejs官网</a><br>普通用户建议安装稳定版（第一个）</p><h2 id="2-安装git"><a class="markdownIt-Anchor" href="#2-安装git"></a> 2、安装Git</h2><p><a href="https://git-scm.com/downloads">git官网</a></p><p>打开cmd命令行(win+r 输入cmd回车)分别执行，查看是否安装成功</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">node -vnpm -vgit --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>安装hexo时，nodejs和git版本有一定的关系，建议都安装最新的稳定版本</p></blockquote><p>会得到相对应的版本信息（如图）<br><img src="https://img-blog.csdnimg.cn/img_convert/1ec40855d0ad6bfb6a53101a416216a2.png" alt="wapchief"><br>如果都可以成功运行出现版本信息证明安装成功。<br>这里写过一篇介绍git的文章，如果安装遇到问题可以去查看：<br><a href="http://www.jianshu.com/p/555e7a188312">《必须要会的Git基本使用及常用命令操作》</a></p><h2 id="3-安装hexo"><a class="markdownIt-Anchor" href="#3-安装hexo"></a> 3、安装Hexo</h2><p>必须按照步骤来，因为hexo需要使用node.js的npm命令。<br>打开cmd命令行(win+r 输入cmd回车)分别执行</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等待自动安装完成后。输入</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查是否安装成功<br>到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目了。</p><h1 id="在github上创建并设置远程库"><a class="markdownIt-Anchor" href="#在github上创建并设置远程库"></a> 在github上创建并设置远程库</h1><p>注册登录略过，不会的请自行百度。<br>登录后点击“+”号，选择New repository，下一步<br>在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。例如填写<code>pgxie.github.io</code>以后就在地址栏直接输入<code>pgxie.github.io</code>就可以访问网站<br>按照提示一步步完成创建。<br>创建之后，点击setting设置远程库：<br><strong>找到GitHub Pages点击Automatic page generator</strong><br>等待github pages创建完成，然后输入你创建的地址测试github pager是否创建成功。此时页面是空的没有任何东西。<br><img src="https://img-blog.csdnimg.cn/img_convert/52dcbd638f8efd76e8470d25a3f57c05.png" alt="wapchief"><br>下面要做的就是使用hexo模板将源码放到github。</p><h1 id="初始化hexo"><a class="markdownIt-Anchor" href="#初始化hexo"></a> 初始化Hexo</h1><p>创建一个文件夹用于存放hexo。然后右键该文件夹使用</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">git bash here<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令就可以直接定位到当前目录。<br><img src="https://img-blog.csdnimg.cn/img_convert/58d2ae43a960d22364376e9107a8580d.png" alt="wapchief"><br>然后使用</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">npm install hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化hexo。这个命令和git 仓库命令相似。意思一样都是初始化。<br>接着输入</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置node。然后输入</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加载hexo基础html、css、js等文件。<br>在这完成后等于已经在本地创建了一个网页，想查看的话，输入</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。<br>(如图)<br><img src="https://img-blog.csdnimg.cn/img_convert/67a710a0902dd36bdd23c43954713a86.png" alt="wapchief">在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000/</a><br>会看到这样的页面，证明本地hexo默认模板配置成功，<br><img src="https://img-blog.csdnimg.cn/img_convert/b26252eb40bc11f27ab2808484f82dd0.png" alt="wapchief"><br>到这一步如果将hexo放到github page，那么使用github.io访问的将是一个默认的页面。下面我们要把他diy成自己的博客，包括导入模板主题等。</p><h1 id="安装主题"><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h1><p>关于主题大多都是以压缩包形式，可以去github上搜hexo theme或者<a href="https://hexo.io/themes/">hexo官网</a>找，会出来很多，里面都有介绍。</p><p>可以通过两种方法下载，比如安装<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly<br></a>主题</p><ol><li>直接直接下载压缩包</li></ol><ul><li>code  -&gt;download zip</li></ul><ol start="2"><li>直接使用git命令，在本地hexo目录输入</li></ol><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">git clone https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等待下载完成。如果出现失败的提示，有可能是网络环境不好。重试即可。<br>下载完主题后，将主题文件夹房子themes目录下，（git下载会直接放到该目录下）</p><p>接下来回到hexo根目录下用记事本打开<code>\_config.yml</code>文件。<br><img src="https://img-blog.csdnimg.cn/img_convert/63dfff68a564eeff38ab21b8bc5683b2.png" alt>把landscape修改成与themes下主题名字相对应的名称。</p><p>然后再运行</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器地址栏输http://localhost:4000/<br><img src="/2022/07/11/qi-ta-ji-zhu/hexo/shi-yong-hexo-github-mian-fei-da-jian-ge-ren-bo-ke-wang-zhan-chao-xiang-xi-jiao-cheng/hexo1.png" alt>现在是我们修改主题后的页面。</p><h1 id="修改内容"><a class="markdownIt-Anchor" href="#修改内容"></a> 修改内容</h1><p>内容较多建议参考<a href="https://hexo.io/zh-cn/docs/configuration.html">官方文档</a></p><p>修改完之后，可以重新执行<code>hexo s</code>在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。<br>项目根目录_config.yml文件中：</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto"># Sitetitle: 网站标题subtitle: 副标题description: 个人签名author: 姓名language: zh-Hanstimezone:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外需要看一下主题的README帮助文档，一般是再主题内的_config.yml，不过少部分可能需要在根目录的_config.yml修改</p><p>这里有几个坑需要注意一下：</p><blockquote><p>1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。<br>2、language是设置语言。zh-CN是中文。<br>3、如果设置zh-CN后仍出现乱码问题。需要更改文件的字符编码集为UTF-8,方法很多具体，就不详细介绍了。</p></blockquote><p><strong>注意同时要在，根_config.yml中配置自己的远程仓库地址</strong></p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;pgxie&#x2F;pgxie.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这一步很关键，不要漏了。</strong></p><h1 id="提交项目部署"><a class="markdownIt-Anchor" href="#提交项目部署"></a> 提交项目，部署</h1><p>继续在本目录命令行<br>安装部署工具（方便以后更新）<br><code>npm install hexo-deployer-git -save</code><br>1、初始化本地仓库：<br><code>git init</code><br>2、连接远程仓库：<br>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。（如果用户名密码登录不成功，可以重新操作，然后用token验证，详情看<a href="https://blog.csdn.net/u012102536/article/details/123888215">这篇博客</a>）<br><code>git remote add origin https://github.com/pgxie/pgxie.github.io</code><br>3、发布hexo到github page<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code><br>4、添加文件到本地仓库<br><code>git add</code><br>5、提交声明<br><code>git commit -m '内容'</code><br>6、推送到远程仓库（github）<br>这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件。<br>创建并切换到新建分支：<br><code>git checkout -b hexo</code><br>将分支推送到远程仓库：<br><code>git push origin hexo</code><br>这时打开网站就能看到效果了。</p><p>记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。<br>文章在hexo目录下的\source_posts文件夹中，是md格式，也就是Markdown格式。<br>以后可以用以下命令部署。也就是第三步</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">&#x2F;&#x2F;等于一次性执行了，清空、刷新、部署三个命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。</p></blockquote><h1 id="进阶-绑定域名"><a class="markdownIt-Anchor" href="#进阶-绑定域名"></a> 进阶-绑定域名</h1><p>域名可以自行去阿里云，景安等网站购买。一般都有系统提示步骤。<br>拿到域名之后，进行解析，推荐使用<a href="https://www.dnspod.cn/">dnspod</a>免费解析。<br>具体使用方法：<br>1、注册登录dnspod之后，添加域名，然后解析，添加两条记录<br><img src="https://img-blog.csdnimg.cn/img_convert/6feb800863e7650f29e98bc9db947f37.png" alt><br><img src="https://img-blog.csdnimg.cn/img_convert/a397a863eba619e08e8aa5bcbf40c400.png" alt><br>2、登录你注册域名网站的管理后台，修改DNS解析地址为</p><pre class="line-numbers language-auto" data-language="auto"><code class="language-auto">f1g1ns1.dnspod.netf1g1ns2.dnspod.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、登录github，找到项目，设置setting，找到GitHub Pages<br><img src="https://img-blog.csdnimg.cn/20201124100553707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhcGNoaWVm,size_16,color_FFFFFF,t_70#pic_center" alt="wapchief"></p><p>4、在master分支下的CNAME.MD文件写入注册的域名<br><img src="https://img-blog.csdnimg.cn/20201124100807390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhcGNoaWVm,size_16,color_FFFFFF,t_70#pic_center" alt="wapchief"></p><p>再次访问差不多就好了，如果延迟的话，可能解析立马不会生效。需要等会儿才能看到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用hexogithub免费搭建个人博客网站超详细教程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#使用hexogithub免费搭建个人博客网站超详细教程&quot;&gt;&lt;/a&gt; 使用hexo+github免费搭建个人博客网站超详细教程&lt;/h1&gt;</summary>
      
    
    
    
    <category term="其它技术" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/"/>
    
    <category term="hexo" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 内存管理</title>
    <link href="http://example.com/2022/07/10/javase/javase-nei-cun-guan-li/"/>
    <id>http://example.com/2022/07/10/javase/javase-nei-cun-guan-li/</id>
    <published>2022-07-09T16:00:00.000Z</published>
    <updated>2022-07-10T15:12:28.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javase-内存管理"><a class="markdownIt-Anchor" href="#javase-内存管理"></a> JavaSE 内存管理</h1><h1 id="java运行时数据区域"><a class="markdownIt-Anchor" href="#java运行时数据区域"></a> Java运行时数据区域</h1><p><img src="/2022/07/10/javase/javase-nei-cun-guan-li/807f240bec8afc3936f80fa0033ab5db.png" alt></p><p><strong>java分了5片内存。</strong></p><p>1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。</p><p><strong>栈</strong>：存储的都是局部变量 ( 函数中定义的变量，函数上的参数，语句中的变量 )；</p><p>只要数据运算完成所在的区域结束，该数据就会被释放。</p><p><strong>堆</strong>：用于存储数组和对象，也就是实体。啥是实体啊？就是用于封装多个数据的。</p><p>1：每一个实体都有内存首地址值。</p><p>2：堆内存中的变量都有默认初始化值。因为数据类型不同，值也不一样。</p><p>3：垃圾回收机制。</p><ul><li>垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈</li><li>引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存</li><li>String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是会重新分配一块内存，字符串池： <code>StringBuffer</code></li><li>在堆中的东西叫对象</li></ul><h2 id="对象访问过程"><a class="markdownIt-Anchor" href="#对象访问过程"></a> <strong>对象访问过程</strong></h2><p>在Java语言中，对象访问是如何进行的？</p><p>答：对象访问在Java语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java栈、Java堆、方法区这三个最重要内存区域之间的关联关系，如下面的这句代码：</p><p><strong>Object obj = new Object();</strong></p><p>假设这句代码出现在方法体中，那“Object obj”这部分的语义将会反映到<strong>Java栈</strong>的本地变量表中，作为一个reference类型数据出现。而“new Object()”这部分的语义将会反映到<strong>Java堆</strong>中，形成一块存储了Object类型所有实例数据值（Instance Data，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在<strong>方法区</strong>中。</p><p>例子：Person tom = new Person(1, 25)</p><p><img src="/2022/07/10/javase/javase-nei-cun-guan-li/06f961e3b532977bf275bf40ec860e5f.png" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;javase-内存管理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javase-内存管理&quot;&gt;&lt;/a&gt; JavaSE 内存管理&lt;/h1&gt;
&lt;h1 id=&quot;java运行时数据区域&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
    <category term="内存" scheme="http://example.com/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架</title>
    <link href="http://example.com/2022/07/10/javase/javase-ji-he-kuang-jia/"/>
    <id>http://example.com/2022/07/10/javase/javase-ji-he-kuang-jia/</id>
    <published>2022-07-09T16:00:00.000Z</published>
    <updated>2022-07-10T15:25:13.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java集合框架"><a class="markdownIt-Anchor" href="#java集合框架"></a> Java集合框架</h1><p><strong>List</strong></p><p><strong>Set</strong></p><p><strong>Map</strong></p><p>集合框架：用于存储数据的容器。</p><p>对于集合容器，有很多种。因为每一个容器的自身特点不同，其实原理在于每个容器的内部数据结构不同。</p><p>集合容器在不断向上抽取过程中。出现了集合体系。</p><p>在使用一个体系时，原则：参阅顶层内容。建立底层对象。</p><p><img src="/2022/07/10/javase/javase-ji-he-kuang-jia/81e03b8205895ed0f30afef076d3148f.png" alt></p><h1 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h1><p>–&lt; java.util &gt;-- List接口：</p><p><strong>List</strong> 本身是Collection接口的子接口，具备了Collection的所有方法。现在学习List体系特有的共性方法，查阅方法发现List的特有方法都有索引，这是该集合最大的特点。</p><p><strong>List</strong>：<strong>有序</strong>(元素存入集合的顺序和取出的顺序一致)，元素都<strong>有索引</strong>。<strong>元素可以重复</strong>。</p><ul><li>ArrayList：底层的数据结构是<strong>数组</strong>,线程不同步，ArrayList替代了Vector，查询元素的速度非常快。</li><li>LinkedList：底层的数据结构是<strong>链表</strong>，线程不同步，增删元素的速度非常快。</li><li>Vector：底层的数据结构就是数组，<strong>线程同步</strong>的，Vector无论查询和增删都巨慢。</li></ul><p><strong>可变长度数组的原理：</strong></p><p>当元素超出数组长度，会产生一个新数组，将原数组的数据复制到新数组中，再将新的元素添加到新数组中。</p><ul><li>ArrayList：是按照原数组的50%延长。构造一个初始容量为 10 的空列表。</li><li>Vector：是按照原数组的100%延长。</li></ul><h1 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h1><p>–&lt; java.util &gt;-- Set接口：</p><p>数据结构：数据的存储方式；</p><p><strong>Set</strong> 接口中的方法和Collection中方法一致的。Set接口取出方式只有一种，<strong>迭代器</strong>。</p><ul><li><strong>HashSet</strong>：底层数据结构是<strong>哈希表</strong>，线程是<strong>不同步</strong>的。<strong>无序</strong>，高效；</li><li>HashSet集合保证元素唯一性：是通过元素的hashCode方法，和equals方法完成的。</li><li>当元素的hashCode值相同时，才继续判断元素的equals是否为true。</li><li>如果为true，那么视为相同元素，不存。如果为false，那么存储。</li><li>如果hashCode值不同，那么不判断equals，从而提高对象比较的速度。</li><li><strong>LinkedHashSet</strong>：<strong>有序</strong>，hashset的子类。</li><li><strong>TreeSet</strong>：对Set集合中的元素的进行指定顺序的排序。不同步。TreeSet底层的数据结构就是<strong>二叉树</strong>。</li><li>对于ArrayList集合，判断元素是否存在，或者删除元素底层依据都是equals方法。</li><li>对于HashSet集合，判断元素是否存在，或者删除元素，底层依据的是hashCode方法和equals方法。</li></ul><h1 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h1><p><strong>Map</strong>集合：</p><ul><li><strong>Hashtable</strong>：底层是哈希表数据结构，是<strong>线程同步</strong>的。不可以存储null键，null值。</li><li><strong>HashMap</strong>：底层是哈希表数据结构，是<strong>线程不同步</strong>的。可以存储null键，null值。替代了Hashtable.</li><li><strong>TreeMap</strong>：底层是<strong>二叉树结构</strong>，可以对map集合中的键进行指定顺序的排序。</li></ul><p>Map集合存储和Collection有着很大不同：</p><p>Collection一次存一个元素；Map一次存一对元素。</p><p>Collection是单列集合；Map是双列集合。</p><p>Map中的存储的一对元素：一个是键，一个是值，键与值之间有对应(映射)关系。</p><p>特点：要保证<strong>map集合中键的唯一性</strong>。</p><p>☆ <strong>获取map中的所有元素的方法：</strong></p><p><strong>原理</strong>：map中是没有迭代器的，collection具备迭代器，只要将map集合转成Set集合，可以使用迭代器了。之所以转成set，是因为map集合具备着键的唯一性，其实set集合就来自于map，<strong>set集合底层其实用的就是map的方法。</strong></p><p>把map集合转成set的方法：</p><p>Set&lt; V &gt; keySet();</p><ul><li>Set&lt;Map.Entry&lt;K,V&gt; entrySet();//取的是键和值的映射关系。</li></ul><p>Entry就是Map接口中的内部接口；</p><p>为什么要定义在map内部呢？entry是访问键值关系的入口，是map的入口，访问的是map中的键值对</p><p><strong>取出map集合中所有元素的方式一</strong>：<mark>keySet</mark>()方法。</p><p>可以将map集合中的键都取出存放到set集合中。对set集合进行迭代。迭代完成，再通过get方法对获取到的键进行值的获取。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> keySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>取出map集合中所有元素的方式二</strong>：<mark>entrySet</mark>()方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> me <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"::::"</span><span class="token operator">+</span>me<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☆ <strong>将非同步集合转成同步集合的方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span>中的 XXX <span class="token keyword">synchronized</span> <span class="token function">XXX</span><span class="token punctuation">(</span>XXX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> <span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span> <span class="token function">synchronizedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：定义一个类，将集合所有的方法加同一把锁后返回。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span>\<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span>\<span class="token operator">></span> synmap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>☆ <strong>Collection 和 Collections的区别：</strong></p><ul><li>Collections是个java.util下的类，是针对集合类的一个<strong>工具类</strong>,提供一系列静态方法,实现对集合的查找、排序、替换、线程安全化（将非同步的集合转换成同步的）等操作。<ul><li>Collection是个java.util下的接口，它是各种集合结构的父接口，继承于它的接口主要有Set和List,提供了关于集合的一些操作,如插入、删除、判断一个元素是否其成员、遍历等。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java集合框架&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java集合框架&quot;&gt;&lt;/a&gt; Java集合框架&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Set&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 面向对象</title>
    <link href="http://example.com/2022/07/10/javase/javase-mian-xiang-dui-xiang/"/>
    <id>http://example.com/2022/07/10/javase/javase-mian-xiang-dui-xiang/</id>
    <published>2022-07-09T16:00:00.000Z</published>
    <updated>2022-07-10T15:07:53.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h1><ul><li>理解与特点<ul><li>类</li><li>对象</li><li>内部类</li><li>封装</li><li>继承<ul><li>this super</li><li>final static</li><li>抽象类</li><li>接口</li></ul></li><li>多态</li></ul></li></ul><h1 id="1-基本介绍"><a class="markdownIt-Anchor" href="#1-基本介绍"></a> 1 基本介绍</h1><h2 id="面向对象的理解"><a class="markdownIt-Anchor" href="#面向对象的理解"></a> 面向对象的理解</h2><p>面向对象和面向过程的思想有着本质上的区别, 作为面向对象的思维来说，当你拿到一个问题时，你分析这个问题不再是第一步先做什么，第二步再做什么，这是面向过程的思维，你应该分析这个问题里面有哪些<strong>类和对象</strong>，这是第一点，然后再分析这些类和对象应该具有哪些<strong>属性和方法</strong>。这是第二点。最后分析<strong>类和类之间具体有什么关系</strong>，这是第三点。</p><p>面向对象的基本思想是，从现实世界中客观存在的事物出发来构造软件系统，并在系统的构造中尽可能运用人类的自然思维方式。</p><p>面向对象更加强调运用人类在日常生活的逻辑思维中经常采用的思想方法与原则，如抽象、分类，继承、聚合、多态等。</p><h2 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h2><p>1：将复杂的事情简单化。</p><p>2：面向对象将以前的过程中的执行者，变成了指挥者。</p><p>3：面向对象这种思想是符合现在人们思考习惯的一种思想。</p><p>过程和对象在我们的程序中是如何体现的呢？过程其实就是函数；对象是将函数等一些内容进行了封装。</p><h2 id="特征"><a class="markdownIt-Anchor" href="#特征"></a> 特征</h2><p>（1）封装</p><p>（2）继承</p><p>（3）多态性</p><p><a href="https://www.cnblogs.com/fzz9/p/8973315.html#%E3%80%80%E3%80%801%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99srp">详情</a></p><h1 id="2-类"><a class="markdownIt-Anchor" href="#2-类"></a> 2 类</h1><p>在类中定义其实都称之为成员。成员有两种：</p><p>1：<strong>成员变量</strong>：其实对应的就是事物的属性。</p><p>2：<strong>成员函数</strong>：其实对应的就是事物的行为。</p><p>所以，其实定义类，就是在定义成员变量和成员函数。但是在定义前，必须先要对事物进行属性和行为的分析，才可以用代码来体现。</p><h2 id="成员变量"><a class="markdownIt-Anchor" href="#成员变量"></a> 成员变量</h2><p>☆ <strong>私有的成员变量</strong>：其他类不能直接创建对象访问，所以只有通过本类对外提供具体的访问方式来完成对私有的访问，可以通过对外提供函数的形式对其进行访问。</p><p><strong>好处</strong>：可以在函数中加入逻辑判断等操作，对数据进行判断等操作。</p><p><strong>总结</strong>：开发时，记住，属性是用于存储数据的，直接被访问，容易出现安全隐患，所以，类中的属性通常被私有化，并对外提供公共的访问方法。</p><p>这个方法一般有两个，规范写法：对于属性 xxx，可以使用setXXX(),getXXX()对其进行操作。</p><p>☆ <strong>成员变量和局部变量的区别：</strong></p><p>1：成员变量直接定义在类中。局部变量定义在方法中，参数上，语句中。</p><p>2：成员变量在这个类中有效。局部变量只在自己所属的大括号内有效，大括号结束，局部变量失去作用域。</p><p>3：成员变量存在于<strong>堆</strong>内存中，随着对象的产生而存在，消失而消失。</p><p>局部变量存在于<strong>栈</strong>内存中，随着所属区域的运行而存在，结束而释放。</p><h2 id="成员函数"><a class="markdownIt-Anchor" href="#成员函数"></a> 成员函数</h2><p>重载：方法名相同，参数不同</p><ul><li><p>子类重载父类方法、子类重载已有的方法</p></li><li><p>与返回类型无关，与参数类型及顺序有关</p></li></ul><p>覆盖：子类覆盖父类同名同参数类型的方法</p><p>静态函数：可以通过类直接调用静态函数</p><p><strong>构造函数</strong></p><p><strong>构造函数</strong>：用于给对象进行初始化，是给与之对应的对象进行初始化，它具有针对性，函数中的一种。</p><p><strong>特点</strong>：</p><p>1：该函数的名称和所在类的名称相同。</p><p>2：不需要定义返回值类型。</p><p>3：该函数没有具体的返回值。</p><p><strong>记住</strong>：所有对象创建时，都需要初始化才可以使用。</p><p><strong>注意事项</strong>：一个类在定义时，如果没有定义过构造函数，那么该类中会自动生成一个空参数的构造函数，为了方便该类创建对象，完成初始化。如果在类中自定义了构造函数，那么默认的构造函数就没有了。</p><p>一个类中，可以有多个构造函数，因为它们的函数名称都相同，所以只能通过参数列表来区分。所以，<strong>一个类中如果出现多个构造函数。它们的存在是以重载体现的</strong>。</p><p>☆ <strong>构造函数、一般函数、构造代码块 有什么区别呢？</strong></p><p>1：构造函数是在对象创建时，就被调用，用于初始化，而且初始化动作只执行一次。</p><p>2：一般函数，是对象创建后，需要调用才执行，可以被调用多次。</p><p>3：构造代码块：是给所有的对象进行初始化，也就是说，所有的对象都会调用一个代码块。只要对象一建立。就会调用这个代码块。</p><p><strong>执行顺序</strong>：（优先级从高到低。）静态代码块&gt;mian方法&gt;构造代码块&gt;构造方法。其中静态代码块只执行一次。构造代码块在每次创建对象是都会执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//结果：abcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☆ <strong>什么时候使用构造函数呢？</strong></p><p>分析事物时，发现具体事物一出现，就具备了一些特征，那就将这些特征定义到构造函数内。</p><p>☆ <strong>构造代码块和构造函数有什么区别？</strong></p><p><strong>构造代码块</strong>：是给所有的对象进行初始化，也就是说，所有的对象都会调用一个代码块，只要对象一建立，就会调用这个代码块。</p><p><strong>构造函数</strong>：是给与之对应的对象进行初始化，它具有针对性。</p><h1 id="3-对象"><a class="markdownIt-Anchor" href="#3-对象"></a> 3 对象</h1><p>☆ <strong>创建一个对象都在内存中做了什么事情？</strong></p><p>Person p = new Person(“tom”,18);</p><p>1：先将硬盘上指定位置的Person.class文件加载进内存。</p><p>2：执行main方法时，在栈内存中开辟了main方法的空间(压栈-进栈)，然后在main方法的栈区分配了一个变量p。</p><p>3：在堆内存中开辟一个实体空间，分配了一个内存首地址值。new</p><p>4：在该实体空间中进行属性的空间分配，并进行了默认初始化。</p><p>5：对空间中的属性进行显示初始化。</p><p>6：进行实体的构造代码块初始化。</p><p>7：调用该实体对应的构造函数，进行构造函数初始化。（）</p><p>8：将首地址赋值给p ，p变量就引用了该实体。(指向了该对象)</p><h1 id="4-内部类"><a class="markdownIt-Anchor" href="#4-内部类"></a> 4 内部类</h1><p><strong>内部类</strong>：如果A类需要直接访问B类中的成员，而B类又需要建立A类的对象。这时,为了方便设计和访问，直接将A类定义在B类中。就可以了。A类就称为内部类。内部类可以直接访问外部类中的成员。而外部类想要访问内部类，必须要建立内部类的对象。</p><p>当内部类定义在外部类中的成员位置上，可以使用一些成员修饰符修饰 private、static。</p><p><strong>1：默认修饰符。</strong></p><p>直接访问内部类格式：外部类名.内部类名 变量名 = 外部类对象.内部类对象;</p><p>Outer.Inner in = new Outer.new Inner();//这种形式很少用。</p><p>但是这种应用不多见，因为内部类之所以定义在内部就是为了封装。想要获取内部类对象通常都通过外部类的方法来获取。这样可以对内部类对象进行控制。</p><p><strong>2：私有修饰符。</strong></p><p>通常内部类被封装，都会被私有化，因为封装性不让其他程序直接访问。</p><p><strong>3：静态修饰符。</strong></p><p>如果内部类被静态修饰，相当于外部类，会出现访问局限性，只能访问外部类中的静态成员。</p><p><strong>注意</strong>；如果内部类中定义了静态成员，那么该内部类必须是静态的。</p><p>内部类编译后的文件名为：“<strong>外部类名$内部类名.java</strong>”；</p><p>☆ <strong>为什么内部类可以直接访问外部类中的成员呢？</strong></p><p>那是因为内部中都持有一个外部类的<strong>引用</strong>。这个是引用是 外部类名.this</p><p>内部类可以定义在外部类中的成员位置上，也可以定义在外部类中的局部位置上。当内部类被定义在局部位置上，只能访问局部中被final修饰的局部变量。</p><p>☆ <strong>匿名内部类（对象）</strong>：没有名字的内部类。就是内部类的简化形式。一般只用一次就可以用这种形式。匿名内部类其实就是一个匿名子类对象。想要定义匿名内部类：需要前提，内部类必须继承一个类或者实现接口。</p><p>☆ <strong>匿名内部类的格式</strong>：new 父类名&amp;接口名(){ 定义子类成员或者覆盖父类方法 }.方法。</p><p>☆ <strong>匿名内部类的使用场景：</strong></p><p>当函数的参数是接口类型引用时，如果接口中的方法不超过3个。可以通过匿名内部类来完成参数的传递。</p><p>其实就是在创建匿名内部类时，该类中的封装的方法不要过多，最好两个或者两个以内。</p><h1 id="5-封装"><a class="markdownIt-Anchor" href="#5-封装"></a> 5 封装</h1><p><strong>封 装</strong>（面向对象特征之一）：是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。</p><p><strong>好处</strong>：将变化隔离；便于使用；提高重用性；安全性</p><p><strong>封装原则</strong>：将不需要对外提供的内容都隐藏起来，把属性都隐藏，提供公共方法对其访问。</p><h1 id="6-继承"><a class="markdownIt-Anchor" href="#6-继承"></a> 6 继承</h1><h2 id="子类中的成员"><a class="markdownIt-Anchor" href="#子类中的成员"></a> ☆ <strong>子类中的成员：</strong></h2><p>1）从父类中继承的可视化（非私有的）的成员（字段、方法），不能继承父类的构造器</p><p>2）子类所特有的成员（字段、方法、构造器）</p><p>3）重载父类的成员（方法） 多态</p><p>☆ <strong>好处</strong>：</p><p><strong>1：提高了代码的复用性。</strong></p><p><strong>2：让类与类之间产生了关系，提供了另一个特征多态的前提。</strong></p><h2 id="重载"><a class="markdownIt-Anchor" href="#重载"></a> ☆ <strong>重载</strong></h2><p>父类的由来：其实是由多个类不断向上抽取共性内容而来的。</p><p>java中对于继承，java只支持单继承。java虽然不直接支持多继承，但是保留了这种多继承机制，进行改良。</p><ul><li>单继承：一个类只能有一个父类。</li><li>多继承：一个类可以有多个父类。</li></ul><p>☆ <strong>为什么不支持多继承呢？</strong></p><p>因为当一个类同时继承两个父类时，两个父类中有相同的功能，那么子类对象调用该功能时，运行哪一个呢？因为父类中的方法中存在方法体。</p><p>但是java支持多重继承。A继承B B继承C C继承D。</p><p>多重继承的出现，就有了继承体系。体系中的顶层父类是通过不断向上抽取而来的。它里面定义的该体系最基本最共性内容的功能。</p><p>所以，一个体系要想被使用，直接查阅该系统中的父类的功能即可知道该体系的基本用法。那么想要使用一个体系时，需要建立对象。建议建立最子类对象，因为最子类不仅可以使用父类中的功能。还可以使用子类特有的一些功能。</p><p>简单说：对于一个继承体系的使用，查阅顶层父类中的内容，创建最底层子类的对象。</p><p>☆ <strong>子父类出现后，类中的成员都有了哪些特点：</strong></p><p><strong>1：成员变量。</strong></p><p>当子父类中出现一样的属性时，子类类型的对象，调用该属性，值是子类的属性值。</p><p>如果想要调用父类中的属性值，需要使用一个关键字：super</p><ul><li>This：代表是本类类型的对象引用。</li><li>Super ：代表是子类所属的父类中的内存空间引用。</li></ul><p>注意：子父类中通常是不会出现同名成员变量的，因为父类中只要定义了，子类就不用在定义了，直接继承过来用就可以了。</p><p><strong>2：成员函数。</strong></p><p>当子父类中出现了一模一样的方法时，建立子类对象会运行子类中的方法。好像父类中的方法被覆盖掉一样。所以这种情况，是函数的另一个特性：覆盖(复写，重写)</p><p>什么时候使用覆盖呢？当一个类的功能内容需要修改时，可以通过覆盖来实现。</p><p><strong>3：构造函数。</strong></p><p>☆ <strong>子类构造函数运行时，先运行了父类的构造函数。为什么呢?</strong></p><p>原因：子类的所有构造函数中的第一行，其实都有一条隐身的语句super();</p><p>super(): 表示父类的构造函数，并会调用于参数相对应的父类中的构造函数。而super():是在调用父类中空参数的构造函数。</p><p>☆ <strong>为什么子类对象初始化时，都需要调用父类中的函数？(为什么要在子类构造函数的第一行加入这个super() ?)</strong></p><p>因为子类继承父类，会继承到父类中的数据，所以必须要看父类是如何对自己的数据进行初始化的。所以子类在进行对象初始化时，先调用父类的构造函数，这就是子类的实例化过程。</p><p><strong>注意</strong>：</p><p>子类中所有的构造函数都会默认访问父类中的空参数的构造函数，因为每一个子类构造内第一行都有默认的语句super();</p><ul><li>如果父类中没有空参数的构造函数，那么子类的构造函数内，必须通过super语句指定要访问的父类中的构造函数。</li><li>如果子类构造函数中用this来指定调用子类自己的构造函数，那么被调用的构造函数也一样会访问父类中的构造函数。</li></ul><p>☆ <strong>super()和this()是否可以同时出现的构造函数中？</strong></p><p>两个语句只能有一个定义在第一行，所以只能出现其中一个。</p><p>☆ <strong>super()或者this():为什么一定要定义在第一行？</strong></p><p>因为super()或者this()都是调用构造函数，构造函数用于初始化，所以初始化的动作要先完成。</p><p><strong>继承的细节：</strong></p><p>☆ <strong>什么时候使用继承呢？</strong></p><p>当类与类之间存在着所属关系时，才具备了继承的前提。a是b中的一种。a继承b。狼是犬科中的一种。</p><p>英文书中，所属关系：” is a “</p><blockquote><p><strong>注意</strong>：不要仅仅为了获取其他类中的已有成员进行继承。</p></blockquote><p>所以判断所属关系，可以简单看，如果继承后，被继承的类中的功能，都可以被该子类所具备，那么继承成立。如果不是，不可以继承。</p><p>☆ <strong>在方法覆盖时，注意两点：</strong></p><p>1：子类覆盖父类时，必须要保证，<strong>子类方法的权限</strong>必须大于等于父类方法权限可以实现继承。否则，编译失败。</p><p>2：覆盖时，要么都<strong>静态</strong>，要么都不静态。 (静态只能覆盖静态，或者被静态覆盖)</p><p>继承的一个弊端：打破了封装性。对于一些类，或者类中功能，是需要被继承，或者复写的。</p><p>这时如何解决问题呢？介绍一个关键字，<strong>final</strong>:【后面介绍】。</p><h2 id="this"><a class="markdownIt-Anchor" href="#this"></a> <strong>this</strong></h2><p><strong>This</strong>：代表对象，就是所在函数所属对象的引用。</p><p>☆ <strong>this到底代表什么呢？</strong></p><p>哪个对象调用了this所在的函数，this就代表哪个对象，就是哪个对象的引用。</p><p>☆ <strong>开发时，什么时候使用this呢？</strong></p><p>在定义功能时，如果该功能内部使用到了调用该功能的对象，这时就用this来表示这个对象。</p><p>this 还可以用于构造函数间的调用。</p><p>调用格式：this(实际参数)；</p><p>this对象后面跟上 . 调用的是成员<strong>属性</strong>和成员<strong>方法</strong>(一般方法)；</p><p>this对象后面跟上 () 调用的是本类中的对应参数的<strong>构造函数</strong>。</p><p>注意：用this调用构造函数，必须定义在构造函数的<strong>第一行</strong>。因为构造函数是用于初始化的，所以初始化动作一定要执行。否则编译失败。</p><h2 id="super"><a class="markdownIt-Anchor" href="#super"></a> <strong>super</strong></h2><h2 id="final"><a class="markdownIt-Anchor" href="#final"></a> <strong>final</strong></h2><p>☆ <strong>final特点：</strong></p><p>1：这个关键字是一个修饰符，可以修饰类，方法，变量。</p><p>2：被final修饰的类是一个最终类，不可以被继承。</p><ul><li>final类不能被继承，因此final类的成员方法没有机会被覆盖，默认都是final的。在设计类时候，如果这个类不需要有子类，类的实现细节不允许改变，并且确信这个类不会载被扩展，那么就设计为final类。</li></ul><p>3：被final修饰的方法是一个最终方法，不可以被覆盖。</p><ul><li>使用final方法的原因有二：</li><li>第一、把方法锁定，防止任何继承类修改它的意义和实现。</li><li>第二、高效。编译器在遇到调用final方法时候会转入内嵌机制，大大提高执行效率。</li></ul><p>4：被final修饰的变量是一个常量，只能赋值一次。</p><ul><li>final变量定义的时候，可以先声明，而不给初值，这中变量也称为final空白，无论什么情况，编译器都确保空白final在使用之前必须被初始化。但是，final空白在final关键字final的使用上提供了更大的灵活性，为此，一个类中的final数据成员就可以实现依对象而有所不同，却有保持其恒定不变的特征。<br>其实这样的原因的就是给一些固定的数据起个阅读性较强的名称。</li><li>不加final修饰不是也可以使用吗？那么这个值是一个变量，是可以更改的。加了final，程序更为严谨。常量名称定义时，有规范，所有字母都大写，如果由多个单词组成，中间用 _ 连接。</li></ul><p>5：final参数</p><p>当函数参数为final类型时，你可以读取使用该参数，但是无法改变该参数的值。</p><h2 id="static"><a class="markdownIt-Anchor" href="#static"></a> <strong>static</strong></h2><p>☆ <strong>static</strong>： 关键字，是一个修饰符，用于修饰成员(成员变量和成员函数)。</p><p>☆ <strong>static 可以修饰的内容</strong></p><p>字段：所有对象共享</p><p>方法：静态方法不能直接访问非静态的成员，如果需要访问，产生实例来访问；</p><ul><li>非静态方法能够直接访问静态成员和非静态成员</li><li>静态方法中不能有this、super关键字</li></ul><p>块：内存中只执行一次，通常用来初始化静态成员</p><p>☆ <strong>1、static变量</strong></p><p>被static修饰的变量叫静态变量或者<strong>类变量</strong>；</p><p>没有被static修饰的变量叫<strong>实例变量</strong>。</p><ul><li><strong>对于静态变量</strong>在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。</li><li><strong>对于实例变量</strong>，每创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。</li></ul><p>☆ <strong>2、静态方法</strong></p><p>静态方法可以直接通过类名调用，任何的实例也都可以调用，因此<strong>静态方法中不能用this和super关键字</strong>【因为this代表对象，而静态在时，有可能没有对象，所以this无法使用】，<strong>不能直接访问所属类的实例变量和实例方法</strong>(就是不带static的成员变量和成员成员方法)，<strong>只能访问所属类的静态成员变量和成员方法</strong>【因为静态方法加载时，优先于对象存在，所以没有办法访问对象中的成员】，因为实例成员与特定的对象关联。</p><p>由于static方法独立于任何实例，因此static方法必须被实现，而<strong>不能是抽象的</strong>abstract。</p><p>☆ <strong>3、static代码块</strong></p><p>static代码块也叫<strong>静态代码块</strong>，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，<strong>JVM加载类</strong>时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，<strong>每个代码块只会被执行一次</strong>。如果和主函数在同一类中，优先于主函数执行。</p><p><strong>特点：</strong></p><p>1，想要实现对象中的共性数据的对象共享，可以将这个数据进行静态修饰。</p><p>2，被静态修饰的成员，可以直接被类名所调用。也就是说，静态的成员多了一种调用方式。<strong>类名.静态方法名/变量名</strong>。</p><p>3，静态随着类的加载而加载，而且优先于对象存在。</p><p><strong>弊端：</strong></p><p>1，有些数据是对象特有的数据，是不可以被静态修饰的。</p><p>因为那样的话，特有数据会变成对象的共享数据。这样对事物的描述就出了问题。所以，在定义静态时，必须要明确，这个数据是否是被对象所共享的。</p><p>2，静态方法只能访问静态成员，不可以访问非静态成员。</p><p>因为静态方法加载时，优先于对象存在，所以没有办法访问对象中的成员。</p><p>3，<mark>静态方法中不能使用this，super关键字</mark>。</p><p>因为this代表对象，而静态在时，有可能没有对象，所以this无法使用。</p><p>4，主函数是静态的。</p><p>☆ <strong>什么时候定义静态成员呢？</strong></p><p>或者说：定义成员时，到底需不需要被静态修饰呢？</p><p><strong>成员分两种：</strong></p><p>1，<strong>成员变量</strong>。（数据共享时静态化）</p><p>该成员变量的数据是否是所有对象都一样：</p><p>如果是，那么该变量需要被静态修饰，因为是共享的数据。</p><p>如果不是，那么就说这是对象的特有数据，要存储到对象中。</p><p><strong>2，成员函数</strong>。（方法中没有调用特有数据时就定义成静态）</p><p>如何判断成员函数是否需要被静态修饰呢？</p><p>只要参考，该函数内是否访问了对象中的特有数据：</p><p>如果有访问特有数据，那方法不能被静态修饰。</p><p>如果没有访问过特有数据，那么这个方法需要被静态修饰。</p><p>☆ <strong>成员变量和静态变量的区别：</strong></p><p>1，成员变量所属于对象，所以也称为<strong>实例变量</strong>。</p><p>静态变量所属于类，所以也称为<strong>类变量</strong>。</p><p>2，成员变量存在于<strong>堆内存</strong>中。</p><p>静态变量存在于 <mark><strong>方法区</strong></mark> 中。</p><p>3，成员变量随着对象创建而存在，随着对象被回收而消失。</p><p>静态变量随着类的加载而存在，随着类的消失而消失。</p><p>4，成员变量只能被对象所调用。</p><p>静态变量可以被对象调用，也可以被类名调用。</p><p><strong>所以，成员变量可以称为对象的特有数据，静态变量称为对象的共享数据。</strong></p><p>☆ <strong>静态代码块、构造代码块、构造函数同时存在时的执行顺序</strong>：静态代码块 —&gt;构造代码块 –&gt; 构造函数；</p><h2 id="抽象类"><a class="markdownIt-Anchor" href="#抽象类"></a> <strong>抽象类</strong></h2><p><strong>抽象</strong>：不具体，看不明白。抽象类表象体现。</p><p>在不断抽取过程中，将共性内容中的方法声明抽取，但是方法不一样，没有抽取，这时抽取到的方法，并不具体，需要被指定关键字abstract所标示，声明为抽象方法。</p><p>抽象方法所在类一定要标示为抽象类，也就是说该类需要被abstract关键字所修饰。</p><p>☆ <strong>抽象类的特点：</strong></p><p>1：抽象方法只能定义在抽象类中，抽象类和抽象方法必须由abstract关键字修饰（可以描述类和方法，不可以描述变量）。</p><p>2：抽象方法只定义方法声明，并不定义方法实现。</p><p>3：抽象类不可以被创建对象(实例化)。</p><p>4：只有通过子类继承抽象类并覆盖了抽象类中的所有抽象方法后，该子类才可以实例化。否则，该子类还是一个抽象类。</p><p>☆ <strong>抽象类的细节：</strong></p><p>1：**抽象类中是否有构造函数？**有，用于给子类对象进行初始化。</p><p>2：<strong>抽象类中是否可以定义非抽象方法？</strong></p><p>可以。其实，抽象类和一般类没有太大的区别，都是在描述事物，只不过抽象类在描述事物时，有些功能不具体。</p><p>所以抽象类和一般类在定义上，都是需要定义属性和行为的。</p><p>只不过，比一般类多了一个抽象函数。而且比一般类少了一个创建对象的部分。</p><p>3：<strong>抽象关键字abstract和哪些不可以共存？</strong> <mark>final , private , static</mark></p><p>4：<strong>抽象类中可不可以不定义抽象方法？</strong> 可以。抽象方法目的仅仅为了不让该类创建对象。</p><h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> <strong>接口</strong></h2><p>1：是用关键字interface定义的。</p><p>2：接口中包含的成员，最常见的有全局常量、抽象方法。</p><p><strong>注意</strong>：接口中的成员都有固定的修饰符。（当修饰符没有写时，默认会自动添加）</p><p>成员变量：<strong>public static final</strong></p><p>成员方法：<strong>public abstract</strong></p><p>interface Inter{</p><p><strong>public static final</strong> int x = 3;</p><p><strong>public abstract</strong> void show();</p><p>}</p><p>3：接口中有抽象方法，说明接口不可以实例化。接口的子类必须实现了接口中所有的抽象方法后，该子类才可以实例化。否则，该子类还是一个抽象类。</p><p>4：类与类之间存在着继承关系，类与接口中间存在的是实现关系。</p><p>继承用extends ；实现用implements ；</p><p>5：接口和类不一样的地方，就是，接口可以被多实现，这就是多继承改良后的结果。java将多继承机制通过多现实来体现。</p><p>6：一个类在继承另一个类的同时，还可以实现多个接口。所以接口的出现避免了单继承的局限性。还可以将类进行功能的扩展。</p><p>7：其实java中是有多继承的。接口与接口之间存在着继承关系，接口可以多继承接口。</p><p>java类是单继承的。classB Extends classA</p><p>java接口可以多继承。Interface3 Extends Interface0, Interface1, interface……</p><p>不允许类多重继承的主要原因是，如果A同时继承B和C，而b和c同时有一个D方法，A如何决定该继承那一个呢？</p><p>但接口不存在这样的问题，接口全都是抽象方法继承谁都无所谓，所以接口可以继承多个接口。</p><p>☆ <strong>抽象类与接口：</strong></p><ul><li>抽象类：一般用于描述一个体系单元，将一组共性内容进行抽取，特点：可以在类中定义抽象内容让子类实现，可以定义非抽象内容让子类直接使用。它里面定义的都是一些体系中的基本内容。</li><li>接口：一般用于定义对象的扩展功能，是在继承之外还需这个对象具备的一些功能。</li></ul><p><strong>抽象类和接口的共性</strong>：都是不断向上抽取的结果。</p><p><strong>抽象类和接口的区别</strong>：</p><p>1：抽象类只能被继承，而且只能单继承。</p><p>接口需要被实现，而且可以多实现。</p><p>2：抽象类中可以定义非抽象方法，子类可以直接继承使用。</p><p>接口中都是抽象方法，需要子类去实现。</p><p>3：抽象类使用的是 is a 关系。</p><p>接口使用的 like a 关系。</p><p>4：抽象类的成员修饰符可以自定义。</p><p>接口中的成员修饰符是固定的。全都是public的。</p><h1 id="7-多态"><a class="markdownIt-Anchor" href="#7-多态"></a> <strong>7 多态</strong></h1><p>☆ <strong>概述</strong></p><p>动态绑定是指在“<strong>执行期间</strong>”（而非<strong>编译期间</strong>）判断所引用的实际对象类型，根据其实际的类型调用其相应的方法。所以实际当中找要调用的方法时是动态的去找的，<strong>new的是谁就找谁的方法，这就叫动态绑定</strong>。动态绑定帮助我们的程序的可扩展性达到了极致。</p><p>体现：父类引用或者接口的引用指向了自己的子类对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例子</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enjoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物的叫声……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> eyesColor<span class="token punctuation">;</span>    <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token class-name">String</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        eyesColor <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enjoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我养的猫高兴地叫了一声……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Lady</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Animal</span> pet<span class="token punctuation">;</span>    <span class="token class-name">Lady</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Animal</span> pet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//☆ 注意、这里的形参是 Animal</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pet <span class="token operator">=</span> pet<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPetEnjoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pet<span class="token punctuation">.</span><span class="token function">enjoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPolymoph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 在堆内存里面new了一只蓝猫对象出来，这个蓝猫对象里面包含有一个父类对象Animal。         */</span>        <span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Catname"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/**         * 在堆内存里面new出来个小姑娘，名字是l1         * l1养了一只宠物是c(Cat)，         * 注意：调用Lady类的构造方法时，传递过来的c是当成Animal来传递的，         * 因此使用c这个引用对象只能访问父类Animal里面的enjoy()方法。         */</span>        <span class="token class-name">Lady</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lady</span><span class="token punctuation">(</span><span class="token string">"l1"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                l1<span class="token punctuation">.</span><span class="token function">myPetEnjoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果：我养的猫高兴地叫了一声……</p></blockquote><p>☆ <strong>多态的好处</strong>：提高了程序的扩展性。继承的父类或接口一般是类库中的东西，（如果要修改某个方法的具体实现方式）只有通过子类去覆写要改变的某一个方法，这样在通过将父类的应用指向子类的实例去调用覆写过的方法就行了！</p><p>☆ <strong>多态的弊端</strong>：当父类引用指向子类对象时，虽然提高了扩展性，但是只能访问父类中具备的方法，不可以访问子类中特有的方法。(前期不能使用后期产生的功能，即访问的局限性)</p><p>☆ <strong>多态的存在有三个必要的条件：</strong></p><p>１. 要有继承（两个类之间存在继承关系，子类继承父类）</p><p>２. 要有重写（在子类里面重写从父类继承下来的方法）</p><p>３. 父类引用指向子类对象</p><p>这三个条件一旦满足，当你调用父类里面被重写的方法的时候，<strong>实际当中new的是哪个子类对象，就调用子类对象的方法</strong>（这个方法是从父类继承下来后重写后的方法）。</p><p>☆ <strong>判断一个对象是否所属于指定的类型</strong>： 对象 instanceof 类型</p><p>☆ <strong>动态多态和静态多态</strong></p><p>动态多态（运行时多态）：运行过程中才知道调用那个方法，指的是<strong>方法重写</strong></p><p>静态多态（编译时多态）：编译时就知道所调用的方法，指的是<strong>方法重载</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向对象&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#面向对象&quot;&gt;&lt;/a&gt; 面向对象&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;理解与特点
&lt;ul&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;内部类&lt;/li&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
    <category term="面向对象" scheme="http://example.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 基础知识</title>
    <link href="http://example.com/2022/07/10/javase/javase-ji-chu-zhi-shi/"/>
    <id>http://example.com/2022/07/10/javase/javase-ji-chu-zhi-shi/</id>
    <published>2022-07-09T16:00:00.000Z</published>
    <updated>2022-07-10T15:25:47.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javase-基础知识"><a class="markdownIt-Anchor" href="#javase-基础知识"></a> JavaSE 基础知识</h1><h2 id="java-的三种技术架构"><a class="markdownIt-Anchor" href="#java-的三种技术架构"></a> Java 的三种技术架构</h2><p>JAVAEE：Java Platform Enterprise Edition，开发企业环境下的应用程序，主要针对web程序开发；</p><p>JAVASE：Java Platform Standard Edition，完成桌面应用程序的开发，是其它两者的基础；</p><p>JAVAME：Java Platform Micro Edition，开发电子消费产品和嵌入式设备，如手机中的程序；</p><h2 id="jdk-和-jre"><a class="markdownIt-Anchor" href="#jdk-和-jre"></a> JDK 和 JRE</h2><p><strong>1，JDK：Java Development Kit</strong> ，java的开发和运行环境，java的开发工具和jre。</p><p><strong>2，JRE：Java Runtime Environment</strong>，java程序的运行环境，java运行的所需的类库</p><h2 id="java-环境配置"><a class="markdownIt-Anchor" href="#java-环境配置"></a> Java 环境配置</h2><pre class="line-numbers language-none"><code class="language-none">配置JavaHome :%JAVA_HOME% &#x3D; D:\\Program Files (x86)\\Java\\jdk1.7.0 path&#x3D;%JAVA_HOME%&#x2F;bin 配置pathpath&#x3D;%JAVA_HOME%&#x2F;bin     JAVA_HOME相关应用：tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置环境变量：目的是让java jdk\bin目录下的工具，可以在任意目录下运行，原因是，将该工具所在目录告诉了系统，当使用该工具时，由系统帮我们去找指定的目录。</p><p><strong>1 环境变量的配置：</strong></p><p>1）：永久配置方式：</p><p>JAVA_HOME=%安装路径%\Java\jdk</p><p>path=%JAVA_HOME%\bin</p><p>2）：临时配置方式：set path=%path%;C:\Program Files\Java\jdk\bin</p><p>特点：系统默认先去当前路径下找要执行的程序，如果没有，再去path中设置的路径下找。</p><p>设置JAVA_HOME变量的作用</p><p>一、方便引用，比如，JDK安装在D:\Program Files (x86)\Java\jdk1.7.0目录里，则设置JAVA_HOME为该目录路径, 那么以后要使用这个路径的时候, 只需输入%JAVA_HOME%即可, 避免每次引用都输入很长的路径串;</p><p>二、归一原则, 当JDK路径被迫改变的时候, 仅需更改JAVA_HOME的变量值即可。</p><p>三、第三方软件会引用约定好的JAVA_HOME变量, 典型的就是tomcat服务器，如果不配置JAVA_HOME变量，那么tomcat服务器根本运行不起来</p><p><strong>2 path 变量</strong></p><p>PATH 环境变量。作用是指定命令搜索路径，在命令行下面执行命令如 javac 编译java程序时，它会到PATH 变量所指定的路径中查找看是否能找到相应的命令程序。我们需要把jdk安装目录下的bin目录增加到现有的 PATH 变量中，bin目录中包含经常要用到的可执行文件如 javac/java/javadoc等待，设置好PATH变量后，就可以在任何目录下执行 javac/java 等工具了。</p><p>操作系统用path的路径来找可执行程序(.exe等程序)，在windows下当我们敲任何一个命令时，实际上就是在执行一个可执行文件，如输入notepad命令就可以打开一个记事本。</p><p>例：在cmd下输入notepad命令就可以打开一个记事本。</p><p>notepad.exe所在的Windows目录已经添加到了Path环境变量中，实际上是执行了c:\Windows下的notepad.exe这个可执行文件</p><p><strong>3 classpath的配置:</strong></p><p>1）：永久配置方式：classpath=.;c:;e:</p><p>2）：临时配置方式：set classpath=.;c:;e:</p><p><strong>4 javac命令和java命令</strong></p><p>要知道java是分两部分的：一个是编译，一个是运行。</p><p>javac：负责的是编译的部分，当执行javac时，会启动java的编译器程序。对指定扩展名的.java文件进行编译。生成了jvm可以识别的字节码文件。也就是class文件，也就是java的运行程序。</p><p>java：负责运行的部分.会启动jvm.加载运行时所需的类库,并对class文件进行执行.</p><p>一个文件要被执行,必须要有一个执行的起始点,这个起始点就是main函数.</p><h2 id="java-基本语法"><a class="markdownIt-Anchor" href="#java-基本语法"></a> Java 基本语法</h2><ul><li>关键字</li><li>标识符</li><li>常量和变量</li><li>数据类型</li><li>运算符</li><li>语句</li><li>访问修饰符</li><li>函数</li></ul><h3 id="1-关键字"><a class="markdownIt-Anchor" href="#1-关键字"></a> 1 关键字</h3><p><strong>关键字</strong>：其实就是某种语言赋予了特殊含义的单词。</p><p><strong>保留字</strong>：其实就是还没有赋予特殊含义，但是准备日后要使用过的单词。</p><p><strong>关键字总览</strong></p><p><img src="/2022/07/10/javase/javase-ji-chu-zhi-shi/dcce45b17861914401314ef7dc149cae.png" alt></p><p>详情：<a href="https://www.cnblogs.com/chenglc/p/6922834.html">java关键字及其作用</a></p><h3 id="2-标识符"><a class="markdownIt-Anchor" href="#2-标识符"></a> 2 标识符</h3><p><strong>标识符</strong>：其实就是在程序中自定义的名词。比如类名，变量名，函数名。包含 0-9、a-z、$、_ ；</p><p><strong>注意</strong>：</p><p>1）不可以以数字开头。</p><p>2）不可以使用关键字。</p><p>3）标识符大小写敏感</p><h3 id="3-常量-和-变量"><a class="markdownIt-Anchor" href="#3-常量-和-变量"></a> 3 常量 和 变量</h3><p><strong>常量</strong>：是在程序中的不会变化的数据。</p><p><strong>变量</strong>：其实就是内存中的一个存储空间，用于存储常量数据。</p><p><strong>作用</strong>：方便于运算。因为有些数据不确定。所以确定该数据的名词和存储空间。</p><p><strong>特点</strong>：变量空间可以重复使用。</p><p><strong>什么时候定义变量？</strong> 只要是数据不确定的时候，就定义变量。</p><p><strong>变量空间的开辟需要什么要素呢？</strong></p><p>1，这个空间要存储什么数据？<strong>数据类型</strong>。</p><p>2，这个空间叫什么名字啊？<strong>变量名称</strong>。</p><p>3，这个空间的第一次的数据是什么？ <strong>变量的初始化值</strong>。</p><p><strong>变量的作用域和生存期:</strong></p><p>变量的作用域： 作用域从变量定义的位置开始，到该变量所在的那对大括号结束；</p><p>生命周期： 变量从定义的位置开始就在内存中活了；变量到达它所在的作用域的时候就在内存中消失了；</p><h3 id="4-数据类型"><a class="markdownIt-Anchor" href="#4-数据类型"></a> 4 数据类型</h3><p>1）：基本数据类型：byte、short、int、long、float、double、char、boolean</p><p>2）：引用数据类型: 数组、类、接口。</p><p><img src="/2022/07/10/javase/javase-ji-chu-zhi-shi/3df8a3488900452563ae436835967399.png" alt></p><p><strong>级别从低到高为</strong>： byte,char,short(这三个平级)–&gt;int–&gt;float–&gt;long–&gt;double</p><p><strong>自动类型转换</strong>：从低级别到高级别，系统自动转的；</p><p><strong>强制类型转换</strong>：什么情况下使用把一个高级别的数赋给一个别该数的级别低的变量；</p><p><strong>unicode码范围</strong></p><p>汉字：[\u4e00,\u9fa5]</p><p>数字：[0x30,0x39]</p><p>小写字母：[0x61,0x7a]</p><p>大写字母：[0x41,0x5a]</p><h3 id="5-运算符"><a class="markdownIt-Anchor" href="#5-运算符"></a> 5 运算符</h3><p><img src="/2022/07/10/javase/javase-ji-chu-zhi-shi/b102839c3dc42984669a5cf391ffb0ae.png" alt></p><ol><li><p>算术运算符。<br>符号 + - * / %<br>% :任何整数模2不是0就是1，所以只要改变被模数就可以实现开关运算。<br>+ :连接符。<br>++,–-</p></li><li><p>赋值运算符。</p><p>= +=, -=, *=, /= , %=</p></li><li><p>比较运算符。 ==<br>特点：该运算符的特点是：运算完的结果，要么是true，要么是false。</p></li><li><p>逻辑运算符。<br>&amp; , | , ^<br>! ,&amp;&amp; , ||<br>逻辑运算符除了 ! 外都是用于连接两个boolean类型表达式。</p></li></ol><ul><li>&amp;: 只有两边都为true结果是true。否则就是false。</li><li>|: 只有两边都为false结果是false，否则就是true</li><li>^: 异或：和或有点不一样。<br>两边结果一样，就为false。<br>两边结果不一样，就为true.</li><li>&amp; 和 &amp;&amp;区别：<br>&amp; ：无论左边结果是什么，<strong>右边都参与运算</strong>。<br>&amp;&amp;：短路与，如果左边为false，那么右边不参与运算。</li><li>| 和|| 区别：<br>|：两边都运算。<br>||：短路或，如果左边为true，那么右边不参与运算。</li></ul><ol><li>位运算符:用于操作二进制位的运算符。<br>&amp; | ^<br>&amp; &lt;&lt; &gt;&gt; &gt;&gt;&gt;(无符号右移)</li></ol><p>练习：对两个变量的数据进行互换。不需要第三方变量。</p><pre class="line-numbers language-none"><code class="language-none">int a &#x3D; 3,b &#x3D; 5;--&gt;b &#x3D; 3,a &#x3D; 5; a &#x3D; a + b; a &#x3D; 8; b &#x3D; a - b; b &#x3D; 3; a &#x3D; a - b; a &#x3D; 5;   a &#x3D; a ^ b;&#x2F;&#x2F; b &#x3D; a ^ b;&#x2F;&#x2F;b &#x3D; a ^ b ^ b &#x3D; a a &#x3D; a ^ b;&#x2F;&#x2F;a &#x3D; a ^ b ^ a &#x3D; b; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-语句"><a class="markdownIt-Anchor" href="#6-语句"></a> 6 语句</h3><p>If、 switch 、do while 、while 、for</p><p>1）、当判断固定个数的值的时候，可以使用if，也可以使用switch。</p><p>2）、当判断数据范围，获取判断运算结果boolean类型时，需要使用if。</p><p>3）、当某些语句需要执行很多次时，就用循环结构。 while和for可以进行互换。</p><ul><li>区别在于：如果需要定义变量控制循环次数。建议使用for。因为for循环完毕，变量在内存中释放。</li></ul><p><strong>break</strong>: 作用于switch ，和循环语句，用于跳出，或者称为结束。</p><p>break语句单独存在时，下面不要定义其他语句，因为执行不到，编译会失败。当循环嵌套时，break只跳出当前所在循环。要跳出嵌套中的外部循环，只要给循环起名字即可，这个名字称之为标号。</p><p><strong>continue</strong>:只作用于循环结构，继续循环用的。</p><p>作用：结束本次循环，继续下次循环。该语句单独存在时，下面不可以定义语句，执行不到。</p><h3 id="7-访问修饰符"><a class="markdownIt-Anchor" href="#7-访问修饰符"></a> 7 访问修饰符</h3><p><strong>java中的访问修饰符</strong></p><ul><li>public： 所有</li><li>protected： 自己、同一包中、子类可以访问</li><li>default： 默认什么都不加，就是default，自己、同一包中可以访问，但是比protected级别要低即限制更多</li><li>private： 自己</li></ul><h3 id="8-函数"><a class="markdownIt-Anchor" href="#8-函数"></a> 8 函数</h3><p>函 数：为了提高代码的复用性，可以将其定义成一个单独的功能，该功能的体现就是java中的函数。</p><p>☆ <strong>函数定义的格式</strong></p><pre class="line-numbers language-none"><code class="language-none">修饰符 返回值类型 函数名(参数类型 形式参数1，参数类型 形式参数1，…)&#123;  执行语句；  return 返回值； &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>没有具体的返回值时，返回的返回值类型用void关键字表示。</li><li>如果函数的返回值类型是void时，return语句可以省略不写的，系统会帮你自动加上。</li><li>return的作用：结束函数。结束功能。</li></ul><p>☆ <strong>如何定义一个函数</strong></p><p>函数其实就是一个功能，定义函数就是实现功能，通过两个明确来完成：</p><p>1）明确该功能的运算完的结果，其实是在明确这个函数的返回值类型。</p><p>2）在实现该功能的过程中是否有未知内容参与了运算，其实就是在明确这个函数的参数列表(参数类型&amp;参数个数)。</p><p>☆ <strong>函数的作用</strong></p><p>1）、用于定义功能。</p><p>2）、用于封装代码提高代码的复用性。</p><p>注意：函数中只能调用函数，不能定义函数。</p><p>☆ <strong>主函数：</strong></p><p>保证该类的独立运行。因为它是程序的入口。因为它在被jvm调用。</p><p>☆ <strong>主函数的构成</strong></p><ul><li>Public：访问权限最大。</li><li>static：不需要对象，直接类名即可。</li><li>void：主函数没有返回值。</li><li>Main：主函数特定的名称。</li><li>(String[] args)：主函数的参数，是一个字符串数组类型的参数，jvm调用main方法时，传递的实际参数是 new String[0]。</li></ul><p>jvm默认传递的是长度为0的字符串数组，我们在运行该类时，也可以指定具体的参数进行传递。可以在控制台，运行该类时，在后面加入参数。参数之间通过空格隔开。jvm会自动将这些字符串参数作为args数组中的元素，进行存储。</p><p>☆ <strong>函数定义名称是为什么呢？</strong></p><p>1）、为了对该功能进行标示，方便于<strong>调用</strong>。</p><p>2）、为了通过名称就可以明确函数的功能，为了<strong>增加代码的阅读性</strong>。</p><p>☆ <strong>重载</strong></p><p><strong>重载的定义</strong>是：在一个类中，如果出现了两个或者两个以上的同名函数，只要它们的参数的个数，或者参数的类型不同，即可称之为该函数重载了。</p><p>如何区分重载：当函数同名时，只看参数列表。和返回值类型没关系。</p><p>☆ <strong>覆盖</strong>：当子类重写父类中的方法时，若子类方法的参数列表与父类完全相同，则表示子类覆盖了父类的该方法。</p><p>☆ <strong>重载的条件</strong>：</p><p>a）发生在同一个类或者父子类之间</p><p>b）方法名称相同，参数列表（参数的个数，参数的数据类型、参数的顺序）不同</p><p>c）返回值无所谓</p><p>d）访问权限无所谓</p><p>☆ <strong>歧义重载：</strong></p><pre class="line-numbers language-none"><code class="language-none">ma(12,34)&#x2F;&#x2F;歧义重载，编译错误  public void ma(int i,double j)&#123;&#x2F;&#x2F;打印1&#125;  public void ma(double i,int j)&#123;&#x2F;&#x2F;打印2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☆ <strong>构造器重载：</strong></p><p><strong>this：</strong></p><p>this.成员（字段、方法）：调用本类的字段、方法</p><p>this(参数列表):调用本类的其他构造方法，必须在构造方法的第一句</p><pre class="line-numbers language-none"><code class="language-none">public Person(int age)&#123;this(age,””);&#x2F;&#x2F;调用下面那个构造器&#125;public Person(int age,String name)&#123;this.age&#x3D; age;&#x2F;&#x2F;调用本类的字段this.name&#x3D; name;&#125;public Person(int age)&#123;this(age,””);&#x2F;&#x2F;调用下面那个构造器&#125;public Person(int age,String name)&#123;this.age&#x3D; age;&#x2F;&#x2F;调用本类的字段this.name&#x3D; name;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>super</strong>：父类的对象</p><p>super.成员：调用父类的成员（方法、字段）</p><p>super(参数列表)：调用父类的构造方法，必须位于子类构造方法的第一句</p><ul><li>如果父类中没有无参的构造器，在子类中必须显式的调用父类带参数的构造方法（super（参数类表或者this（参数列表）））；</li><li>如果父类有无参的构造器，则子类中可以不用显式调用父类的构造器，因为系统默认调用super（）（在子类构造器的第一句位置）;</li></ul><p>☆ <strong>重写父类的成员（方法） 多态</strong></p><p>重写的条件 ：</p><p>a）发生在父子类之间</p><p>b）方法名称相同，参数列表（参数的个数，参数的数据类型、参数的顺序）相同</p><p>c）返回值必须相同</p><p>d）子类覆盖方法的<strong>访问权限</strong>大于等于父类被覆盖方法的访问权限</p><p>e）子类不能抛出比父类异常更大的<strong>异常</strong>（RuntimeException例外）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;javase-基础知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javase-基础知识&quot;&gt;&lt;/a&gt; JavaSE 基础知识&lt;/h1&gt;
&lt;h2 id=&quot;java-的三种技术架构&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE常用类</title>
    <link href="http://example.com/2022/07/10/javase/javase-chang-yong-lei/"/>
    <id>http://example.com/2022/07/10/javase/javase-chang-yong-lei/</id>
    <published>2022-07-09T16:00:00.000Z</published>
    <updated>2022-07-10T15:25:37.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javase常用类"><a class="markdownIt-Anchor" href="#javase常用类"></a> JavaSE常用类</h1><ul><li>数组</li><li>String</li><li>Object</li><li>Math</li><li>Date</li><li>File</li><li><strong>Properties</strong></li></ul><h1 id="1-数组"><a class="markdownIt-Anchor" href="#1-数组"></a> 1 数组</h1><p>用于存储同一类型数据的一个容器。好处：可以对该容器中的数据进行编号，从0开始。数组用于封装数据，就是一个具体的实体。</p><ul><li>数组可以看成是多个相同类型数据组合，对这些数据的统一管理。</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</li><li>数组的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>C和C++中的数组都可以分配在栈上面，而JAVA中的数组是只能分配在堆上面的，因为JAVA中的数组是引用类型。</li></ul><p>☆ <strong>数组的创建与初始化</strong> 一维数组的声明方式有2种：</p><ul><li>格式一：数组元素类型 数组名[ ]; 即type var[ ];</li><li>格式二：数组元素类型[ ] 数组名; 即type[ ] var;</li></ul><p>一维数组的初始化化：</p><ul><li><p>动态初始化：数组定义与为数组元素分配空间和赋值的操作分开进行。</p><pre><code>Date days=new Date[3];days[0] =new Date(1,1,2020);</code></pre></li><li><p>静态初始化</p><pre><code>int a[ ] =&#123; 3, 9, 8&#125;;Date days[ ] =&#123;    new Date(1, 4, 2004),    new Date(2,4,2004),    new Date(3,4, 2004)&#125;;</code></pre></li></ul><p>二维数组</p><pre class="line-numbers language-none"><code class="language-none">int[][] a&#x3D;new int[3][];&#x2F;&#x2F;a : int[] 类型的 数组 ,该数组有3个元素a[0] &#x3D;new int[2]; &#x2F;&#x2F;a 的元素 a[0] 的数据类型为 int 类型的数组，空间大小为2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="2-string"><a class="markdownIt-Anchor" href="#2-string"></a> 2 String</h1><p>☆ <strong>数组、集合、字符串之间的转换</strong></p><p>将数组转换成集合</p><pre><code>a. Arrays.asList( array )例：List list = Arrays.asList(names);//将数组转换成集合。</code></pre><p>将数组转换成字符串、也可将整数转换成字符串</p><pre><code>b. String.valueOf( array)例：char [] ch1 = &#123;'a','c','a','b','a'&#125;;String str2 = String.valueOf(ch1);例：int num = 123456; String str =String.valueOf(num);</code></pre><p>将字符串转换成数组</p><pre><code>c. toCharArray()例：String str = &quot;gdfgdfgd&quot;;char[] ch = str.toCharArray();</code></pre><p>将字符数组变成字符串特定格式输出</p><pre><code>d.Arrays.toString()，如[1,2,3]例：String str1 = Arrays.toString(ch);System.out.println(str1);</code></pre><p>将字符串反转</p><pre><code>e.str.reverse();例：StringBuffer sb =new StringBuffer(&quot;adfsdsd&quot;);sb.reverse();</code></pre><p><strong>☆replace();函数</strong></p><pre><code>例1：//将字符串&quot;abcdabcdabdcadcbadcb&quot;的字符出现的次数输出String num=&quot;abcdabcdabdcadcbadcb&quot;;String t=num.replace(&quot;a&quot;,&quot;&quot;);//将所有的a转化为空字符--消去字符aSystem.out.println(num.length()-t.length());</code></pre><p>☆replaceAll()，用正则表达式</p><pre class="line-numbers language-none"><code class="language-none">例2：&#x2F;&#x2F;将字符串中的数字去除String num1&#x3D;&quot;ab23c7da45bc5da65bd5c67ad7cb9adcb&quot;;String t1&#x3D;num1.replaceAll(&quot;[0-9]&quot;, &quot;&quot;);System.out.println(t1);例3：&#x2F;&#x2F;计算字符串的长度，一个字符算两个byte[] b&#x3D;str.getBytes();System.out.println(b.length);&#x2F;&#x2F;若出现一个汉字代表3个字节的情况，将Utf-8换成GBK就可以了String m&#x3D;str.replaceAll(&quot;[\\u4e00-\\u9fa5]&quot;, &quot;xx&quot;);System.out.println(m.length());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☆ <strong>String类型是否可以被继承，为什么？</strong></p><p>不能被继承，因为是被<strong>final</strong>修饰的类</p><p>☆ <strong>String类型是否是基本类型，比较String类型变量时，== 和equals有何区别？</strong></p><p>不是，是引用类型</p><pre><code>如果 String类型是直接赋值 == 和 equals 效果相同String a = “abc “;String b = “abc”;a == b 和 a.equals(b)都为true如果String是通过new构建的 == 和equals效果不同String a = new String（“abc”）；String b = new String（“abc”）；a ==b 结果为false a．equals（b）结果为true</code></pre><p>☆ <strong>char类型中是否可以存放一个汉字，为什么？</strong></p><p>可以，char类型中存放的数据以Unicode码存放。</p><p>☆ <strong>string中的方法：</strong></p><ul><li>charAt（） 方法：一般与for循环一起，遍历字符串</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str<span class="token operator">=</span>“<span class="token class-name">HelloJava</span><span class="token punctuation">,</span><span class="token class-name">HelloWorld</span>”<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>concat()</strong> 方法;拼接字符串，将指定字符串连接到此字符串的结尾</p><pre><code>str.concat(“s”); //得到Hello Java,Hello Worlds</code></pre></li><li><p>startWith() 方法;测试此字符串是否已指定的前缀开始，</p><pre><code>boolean str. startWith(“Hello”); //true</code></pre></li><li><p>format() 方法:将字符串按照某种格式输出 int i=1;int j=2;<br>System.out.println(String.format(&quot;%d+%d=%d&quot;,i,j,i+j));//1+2=3 indexOf(String) 方法:输出字符串第一次出现的索引，没有的话输出-1<br>System.out.println(str.indexOf(“Hello”));//0</p></li><li><p>lastIndexOf() 方法:输出字符串最后一次出现的索引</p></li><li><p>replace(old String, new String) 方法:替换字符串</p></li><li><p>split() 方法 :分割字符串</p></li><li><p>substring(int start,int end) 方法:截取字符串</p></li><li><p>toCharArray() 方法:变成字符数组</p></li><li><p>trim() 方法:去掉字符串两端的空格，字符串中间的去不掉</p></li><li><p>toUpperCase() 方法:将字符串转化为大写</p></li></ul><p>☆ <strong>StringBuffer和StringBuilder区别</strong></p><ul><li>StringBuffer线程安全的，同步的，效率比较低，JDK1.0之后出现</li><li>StringBuilder线程不安全，不同步的，效率比较高，JDK1.5之后出现</li></ul><h1 id="stringbuilder"><a class="markdownIt-Anchor" href="#stringbuilder"></a> StringBuilder</h1><pre><code>- `public StringBuilder()`：构造一个空的StringBuilder容器。- `public StringBuilder(String str)`：构造一个StringBuilder容器，并将字符串添加进去。- `public StringBuilder append(...)`：添加任意类型数据的字符串形式，并返回当前对象自身。- `public String toString()`：将当前StringBuilder对象转换为String对象。</code></pre><h1 id="3-object"><a class="markdownIt-Anchor" href="#3-object"></a> <strong>3 Object</strong></h1><p><strong>Object</strong>：引用类型的根，是所有类的超类，是java中唯一一个没有父类的类</p><p>1、<strong>toString</strong>():将对象转成字符串，默认返回的格式：</p><pre><code>类名@哈希值 = getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode())</code></pre><p>2、 <strong>boolean equals(Object obj)</strong>：用于比较两个对象是否相等，其实内部比较的就是两个对象地址。</p><p>equals（）和 == 的区别： ==：可以判断基本数据类型和引用数据类型</p><ul><li>对于引用数据类型，表示两个对象的引用是否相等，即栈里面引用的地址是否相等</li><li>对于基本数据类型，表示两个变量的数值是否相等</li><li>equals：可以判断引用数据类型</li><li>引用数据类型：表示两个对象的引用是否相等，但是包装类、String、Date、File除外（这些判断的是对象的值是否相等，即堆内存里面的值是否相等）</li></ul><p><strong>3. hashcode()</strong> 返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode()方法，返回的就不再是内存地址。</p><p>hashcode()相同的对象，这两个对象不一定相同；如果两个对象相同，则hashcode()一定相同。因此，<strong>重写equals方法必须先重写hashcode方法</strong></p><p><strong>4、Class getClass()</strong>：获取任意对象运行时的所属字节码文件对象。</p><p>通常equals，toString，hashCode，在应用中都会被复写，建立具体对象的特有的内容。</p><h1 id="4-math"><a class="markdownIt-Anchor" href="#4-math"></a> <strong>4 Math</strong></h1><p>☆ <strong>Math方法</strong></p><pre class="line-numbers language-none"><code class="language-none">Math.ceil(2.4);&#x2F;&#x2F;3取比值大的最小整数Math.ceil(-2.4);&#x2F;&#x2F;-2Math.floor(2.5);&#x2F;&#x2F;2取比值小的最大整数Math.round(2.5);&#x2F;&#x2F;3四舍五入Math.round(-2.5);&#x2F;&#x2F;-2Math.random()&#x2F;&#x2F;范围是[0,1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☆ <strong>获取随机数的方法</strong></p><ul><li>**Math.random()**获取[0,1)的值，取不到1； 用法：</li></ul><pre class="line-numbers language-none"><code class="language-none">（int）Math.random()\*n+1;&#x2F;&#x2F;取到1到n之间的整数Random r &#x3D; new Random(); int n &#x3D; r.nextInt(n)+1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-date"><a class="markdownIt-Anchor" href="#5-date"></a> <strong>5 Date</strong></h1><p>☆ <strong>date与String 格式的时间转换</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;SimpleDateFormat类：改变时间的格式SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy&#x2F;MM&#x2F;dd HH:mm:ss&quot;);Date date&#x3D;new Date();&#x2F;&#x2F;将日期格式转换成指定的字符串String time &#x3D; sdf.format(date);System.out.println(time);&#x2F;&#x2F;现在的时间以yyyy&#x2F;MM&#x2F;dd HH:mm:ss格式输出 &#x2F;&#x2F;将格式化的字符串转换成日期对象Date date&#x3D;sdf.parse(“1995&#x2F;07&#x2F;1203:00:00”);System.out.println(date);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-file"><a class="markdownIt-Anchor" href="#6-file"></a> <strong>6 File</strong></h1><p>java.io.File 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><p>☆ <strong>构造方法</strong></p><ul><li>public File(String pathname) ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。</li><li>public File(String parent, String child) ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li>public File(File parent, String child) ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。</li></ul><p>☆ <strong>常用方法</strong></p><p>1 获取功能的方法</p><ul><li>public String getAbsolutePath() ：返回此File的绝对路径名字符串。</li><li>public String getPath() ：将此File转换为路径名字符串。</li><li>public String getName() ：返回由此File表示的文件或目录的名称。</li><li>public long length() ：返回由此File表示的文件的长度。</li></ul><p>** 绝对路径和相对路径**</p><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</li></ul><p><strong>2 判断功能的方法</strong></p><ul><li>public boolean exists() ：此File表示的文件或目录是否实际存在。</li><li>public boolean isDirectory() ：此File表示的是否为目录。</li><li>public boolean isFile() ：此File表示的是否为文件。</li></ul><p><strong>3 创建、删除功能的方法</strong></p><ul><li>public boolean createNewFile() ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</li><li>public boolean delete() ：删除由此File表示的文件或目录。</li><li>public boolean mkdir() ： 创建由此File表示的目录。</li><li>public boolean mkdirs() ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 创建一级目录Filef2&#x3D;new File(&quot;newDir&quot;);    System.out.println(&quot;是否存在:&quot;+f2.exists());&#x2F;&#x2F; falseSystem.out.println(&quot;是否创建:&quot;+f2.mkdir());    &#x2F;&#x2F; trueSystem.out.println(&quot;是否存在:&quot;+f2.exists());&#x2F;&#x2F; true&#x2F;&#x2F; 创建多级目录Filef3&#x3D;new File(&quot;newDira\\newDirb&quot;);System.out.println(f3.mkdir());&#x2F;&#x2F; falseFilef4&#x3D;new File(&quot;newDira\\newDirb&quot;);System.out.println(f4.mkdirs());&#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☆ <strong>目录的遍历</strong></p><ul><li>public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li>public File[] listFiles() ：返回一个File数组，表示该File目录中的所有的子文件或目录。</li></ul><h1 id="7-properties"><a class="markdownIt-Anchor" href="#7-properties"></a> <strong>7 Properties</strong></h1><p>java.util.Properties 继承于Hashtable ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时，System.getProperties 方法就是返回一个Properties对象。</p><p>☆ <strong>构造方法</strong></p><ul><li>public Properties() :创建一个空的属性列表。</li></ul><p>☆ <strong>基本的存储方法</strong></p><ul><li>public Object setProperty(String key, String value) ： 保存一对属性。</li><li>public String getProperty(String key) ：使用此属性列表中指定的键搜索属性值。</li><li>public Set&lt; String&gt; stringPropertyNames() ：所有键的名称的集合。</li></ul><p>☆ <strong>与流相关的方法</strong></p><ul><li>public void load(InputStream inStream)： 从字节输入流中读取键值对。 参数中使用了字节输入流，通过流对象，可以关联到某文件上，这样就能够加载文本中的数据了。文本数据格式:</li></ul><pre class="line-numbers language-none"><code class="language-none">filename&#x3D;a.txtlength&#x3D;209385038location&#x3D;D:\\a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>小贴士：文本中的数据，必须是键值对形式，可以使用空格、等号、冒号等符号分隔。</p></blockquote><h1 id="date补充"><a class="markdownIt-Anchor" href="#date补充"></a> Date补充</h1><h2 id="date"><a class="markdownIt-Anchor" href="#date"></a> Date</h2><ul><li>public Date()：分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</li><li>public Date(long date)：分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</li></ul><blockquote><p>tips: 由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 创建日期对象，当前的时间System.out.println(new Date()); &#x2F;&#x2F; Tue Jan 16 14:37:35 CST 2018&#x2F;&#x2F; 创建日期对象，把当前的毫秒值转成日期对象System.out.println(new Date(0L)); &#x2F;&#x2F; Thu Jan 01 08:00:00 CST 1970<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>public long getTime()  把日期对象转换成对应的时间毫秒值。</li></ul><h2 id="dateformat"><a class="markdownIt-Anchor" href="#dateformat"></a> DateFormat</h2><p><code>java.text.DateFormat</code> 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。</p><p>java.text.DateFormat:是日期/时间格式化子类的抽象类</p><p>成员方法:</p><ul><li>String format(Date date) 按照指定的模式,把Date日期,格式化为符合模式的字符串</li><li>Date parse(String source)把符合模式的字符串,解析为Date日期</li><li>DateFormat类是一个<strong>抽象</strong>类,无法直接创建对象使用,可以使用DateFormat类的子类SimpleDateFormat</li></ul><blockquote><p>参数pattern是一个字符串，代表日期时间的自定义格式。</p></blockquote><p>格式规则</p><table><thead><tr><th>y</th><th>年</th></tr></thead><tbody><tr><td>M</td><td>月</td></tr><tr><td>d</td><td>日</td></tr><tr><td>H</td><td>时</td></tr><tr><td>m</td><td>分</td></tr><tr><td>s</td><td>秒</td></tr></tbody></table><p>DateFormat format = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>- <code>public String format(Date date)</code>：将Date对象格式化为字符串。<br>- <code>public Date parse(String source)</code>：将字符串解析为Date对象。</p><p>eg：</p><pre class="line-numbers language-none"><code class="language-none">DateFormat df &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);String str &#x3D; &quot;2018年12月11日&quot;;Date date &#x3D; df.parse(str);System.out.println(date); &#x2F;&#x2F; Tue Dec 11 00:00:00 CST 2018<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;javase常用类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javase常用类&quot;&gt;&lt;/a&gt; JavaSE常用类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;M</summary>
      
    
    
    
    <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/07/07/hello-world/"/>
    <id>http://example.com/2022/07/07/hello-world/</id>
    <published>2022-07-07T06:14:03.377Z</published>
    <updated>2022-07-07T06:14:03.378Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo-theme-matery【readme】</title>
    <link href="http://example.com/2022/04/14/readme-cn/"/>
    <id>http://example.com/2022/04/14/readme-cn/</id>
    <published>2022-04-14T07:27:31.000Z</published>
    <updated>2022-07-08T13:32:54.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-theme-matery"><a class="markdownIt-Anchor" href="#hexo-theme-matery"></a> hexo-theme-matery</h1><p><a href="http://hits.dwyl.io/blinkfox/hexo-theme-matery"><img src="http://hits.dwyl.io/blinkfox/hexo-theme-matery.svg" alt="HitCount"></a> <a href="https://gitter.im/hexo-theme-matery/Lobby?utm_source=badge"><img src="https://img.shields.io/gitter/room/blinkfox/hexo-theme-matery.svg" alt="Gitter"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/issues"><img src="https://img.shields.io/github/issues/blinkfox/hexo-theme-matery.svg" alt="GitHub issues"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/LICENSE"><img src="https://img.shields.io/github/license/blinkfox/hexo-theme-matery.svg" alt="GitHub license"></a> <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master"><img src="https://img.shields.io/badge/downloads-master-green.svg" alt="Download"></a> <a href="http://hexo.io"><img src="https://img.shields.io/badge/hexo-%3E%3D%205.0.0-blue.svg" alt="Hexo Version"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/network"><img src="https://img.shields.io/github/forks/blinkfox/hexo-theme-matery.svg" alt="GitHub forks"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/stargazers"><img src="https://img.shields.io/github/stars/blinkfox/hexo-theme-matery.svg" alt="GitHub stars"></a></p><p><a href="README.md">🇺🇸English Document</a> | <a href="http://blinkfox.com">国内访问示例 (http://blinkfox.com)</a> | <a href="https://blinkfox.github.io">Github 部署演示示例 (https://blinkfox.github.io)</a> | QQ 交流群1（已满）: <a href="https://jq.qq.com/?_wv=1027&amp;k=5zMDYHT"><code>926552981</code></a> | QQ 交流群2（推荐）: <a href="https://jq.qq.com/?_wv=1027&amp;k=53q2Ayp"><code>971887688</code></a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a class="markdownIt-Anchor" href="#特性"></a> 特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a class="markdownIt-Anchor" href="#贡献者"></a> 贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><h3 id="切换主题"><a class="markdownIt-Anchor" href="#切换主题"></a> 切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="_configyml-文件的其它修改建议"><a class="markdownIt-Anchor" href="#_configyml-文件的其它修改建议"></a> <code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a class="markdownIt-Anchor" href="#新建分类-categories-页"></a> 新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a class="markdownIt-Anchor" href="#新建标签-tags-页"></a> 新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a class="markdownIt-Anchor" href="#新建关于我-about-页"></a> 新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页可选的"><a class="markdownIt-Anchor" href="#新建留言板-contact-页可选的"></a> 新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页可选的"><a class="markdownIt-Anchor" href="#新建友情链接-friends-页可选的"></a> 新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a class="markdownIt-Anchor" href="#新建-404-页"></a> 新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a class="markdownIt-Anchor" href="#菜单导航配置"></a> 菜单导航配置</h3><h4 id="配置基本菜单导航的名称-路径url和图标icon"><a class="markdownIt-Anchor" href="#配置基本菜单导航的名称-路径url和图标icon"></a> 配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a class="markdownIt-Anchor" href="#二级菜单配置方法"></a> 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a class="markdownIt-Anchor" href="#代码高亮"></a> 代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a class="markdownIt-Anchor" href="#搜索"></a> 搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音建议安装"><a class="markdownIt-Anchor" href="#中文链接转拼音建议安装"></a> 中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件建议安装"><a class="markdownIt-Anchor" href="#文章字数统计插件建议安装"></a> 文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持可选的"><a class="markdownIt-Anchor" href="#添加emoji表情支持可选的"></a> 添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-rss-订阅支持可选的"><a class="markdownIt-Anchor" href="#添加-rss-订阅支持可选的"></a> 添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-daovoice-在线聊天功能可选的"><a class="markdownIt-Anchor" href="#添加-daovoice-在线聊天功能可选的"></a> 添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-tidio-在线聊天功能可选的"><a class="markdownIt-Anchor" href="#添加-tidio-在线聊天功能可选的"></a> 添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a class="markdownIt-Anchor" href="#修改页脚"></a> 修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a class="markdownIt-Anchor" href="#修改社交链接"></a> 修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.socialLink.github) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;% &#125; %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a class="markdownIt-Anchor" href="#修改打赏的二维码图片"></a> 修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器可选的"><a class="markdownIt-Anchor" href="#配置音乐播放器可选的"></a> 配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-front-matter-介绍"><a class="markdownIt-Anchor" href="#文章-front-matter-介绍"></a> 文章 Front-matter 介绍</h2><h3 id="front-matter-选项详解"><a class="markdownIt-Anchor" href="#front-matter-选项详解"></a> Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a class="markdownIt-Anchor" href="#最简示例"></a> 最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a class="markdownIt-Anchor" href="#最全示例"></a> 最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a class="markdownIt-Anchor" href="#效果截图"></a> 效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a class="markdownIt-Anchor" href="#自定制修改"></a> 自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a class="markdownIt-Anchor" href="#修改主题颜色"></a> 修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a class="markdownIt-Anchor" href="#修改-banner-图和文章特色图"></a> 修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a class="markdownIt-Anchor" href="#版本变更记录"></a> 版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-theme-matery&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexo-theme-matery&quot;&gt;&lt;/a&gt; hexo-theme-matery&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://hits.dwyl.i</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch第一天</title>
    <link href="http://example.com/2022/03/14/1/"/>
    <id>http://example.com/2022/03/14/1/</id>
    <published>2022-03-14T07:27:31.000Z</published>
    <updated>2022-07-10T15:26:29.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch第一天"><a class="markdownIt-Anchor" href="#elasticsearch第一天"></a> ElasticSearch第一天</h1><h2 id="学习目标"><a class="markdownIt-Anchor" href="#学习目标"></a> 学习目标：</h2><ol><li>能够理解ElasticSearch的作用</li><li>能够安装ElasticSearch服务</li><li>能够理解ElasticSearch的相关概念</li><li>能够使用Postman发送Restful请求操作ElasticSearch</li><li>能够理解分词器的作用</li><li>能够使用ElasticSearch集成IK分词器</li><li>能够完成es集群搭建</li></ol><h1 id="第一章-elasticsearch简介"><a class="markdownIt-Anchor" href="#第一章-elasticsearch简介"></a> 第一章 ElasticSearch简介</h1><h2 id="11-什么是elasticsearch"><a class="markdownIt-Anchor" href="#11-什么是elasticsearch"></a> 1.1 什么是ElasticSearch</h2><p>Elaticsearch，简称为es， es是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><h2 id="12-elasticsearch的使用案例"><a class="markdownIt-Anchor" href="#12-elasticsearch的使用案例"></a> 1.2 ElasticSearch的使用案例</h2><ul><li>2013年初，GitHub抛弃了Solr，采取ElasticSearch 来做PB级的搜索。 “GitHub使用ElasticSearch搜索20TB的数据，包括13亿文件和1300亿行代码”</li><li>维基百科：启动以elasticsearch为基础的核心搜索架构</li><li>SoundCloud：“SoundCloud使用ElasticSearch为1.8亿用户提供即时而精准的音乐搜索服务”</li><li>百度：百度目前广泛使用ElasticSearch作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部20多个业务线（包括casio、云分析、网盟、预测、文库、直达号、钱包、风控等），单集群最大100台机器，200个ES节点，每天导入30TB+数据</li><li>新浪使用ES 分析处理32亿条实时日志</li><li>阿里使用ES 构建挖财自己的日志采集和分析体系</li></ul><h2 id="13-elasticsearch对比solr"><a class="markdownIt-Anchor" href="#13-elasticsearch对比solr"></a> 1.3 ElasticSearch对比Solr</h2><ul><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li><li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li><li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch</li></ul><h1 id="第二章-elasticsearch安装与启动"><a class="markdownIt-Anchor" href="#第二章-elasticsearch安装与启动"></a> 第二章 ElasticSearch安装与启动</h1><h2 id="21-下载es压缩包"><a class="markdownIt-Anchor" href="#21-下载es压缩包"></a> 2.1 下载ES压缩包</h2><p>ElasticSearch分为Linux和Window版本，基于我们主要学习的是ElasticSearch的Java客户端的使用，所以我们课程中使用的是安装较为简便的Window版本，项目上线后，公司的运维人员会安装Linux版的ES供我们连接使用。</p><p>ElasticSearch的官方地址： <a href="https://www.elastic.co/products/elasticsearch">https://www.elastic.co/products/elasticsearch</a></p><p><img src="/2022/03/14/1/image%5C1.png" alt></p><p><img src="/2022/03/14/1/image%5C2.png" alt></p><p><img src="/2022/03/14/1/image%5C7.png" alt></p><p><img src="/2022/03/14/1/image%5C8.png" alt></p><p>在资料中已经提供了下载好的5.6.8的压缩包：</p><p><img src="/2022/03/14/1/image%5C4.png" alt></p><h2 id="22-安装es服务"><a class="markdownIt-Anchor" href="#22-安装es服务"></a> 2.2 安装ES服务</h2><p>Window版的ElasticSearch的安装很简单，类似Window版的Tomcat，解压开即安装完毕，解压后的ElasticSearch的目录结构如下：</p><p><img src="/2022/03/14/1/image%5C5.png" alt></p><p>修改elasticsearch配置文件：config/elasticsearch.yml，增加以下两句命令：</p><pre class="line-numbers language-none"><code class="language-none">http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此步为允许elasticsearch跨越访问，如果不安装后面的elasticsearch-head是可以不修改，直接启动。</p><h2 id="23-启动es服务"><a class="markdownIt-Anchor" href="#23-启动es服务"></a> 2.3 启动ES服务</h2><p>点击ElasticSearch下的bin目录下的elasticsearch.bat启动，控制台显示的日志信息如下：</p><p><img src="/2022/03/14/1/image%5C6.png" alt></p><p><img src="/2022/03/14/1/image%5C9.png" alt></p><p>注意：9300是tcp通讯端口，集群间和TCPClient都执行该端口，9200是http协议的RESTful接口 。</p><p>通过浏览器访问ElasticSearch服务器，看到如下返回的json信息，代表服务启动成功：</p><p><img src="/2022/03/14/1/image%5C10.png" alt></p><pre class="line-numbers language-none"><code class="language-none">注意：ElasticSearch是使用java开发的，且本版本的es需要的jdk版本要是1.8以上，所以安装ElasticSearch之前保证JDK1.8+安装完毕，并正确的配置好JDK环境变量，否则启动ElasticSearch失败。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="24-安装es的图形化界面插件"><a class="markdownIt-Anchor" href="#24-安装es的图形化界面插件"></a> 2.4 安装ES的图形化界面插件</h2><p>ElasticSearch不同于Solr自带图形化界面，我们可以通过安装ElasticSearch的head插件，完成图形化界面的效果，完成索引数据的查看。安装插件的方式有两种，在线安装和本地安装。本文档采用本地安装方式进行head插件的安装。elasticsearch-5-*以上版本安装head需要安装node和grunt</p><p>1）下载head插件：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>在资料中已经提供了elasticsearch-head-master插件压缩包：</p><p><img src="/2022/03/14/1/image%5C3.png" alt></p><p>2）将elasticsearch-head-master压缩包解压到任意目录，但是要和elasticsearch的安装目录区别开</p><p>3）下载nodejs：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>在资料中已经提供了nodejs安装程序：</p><p><img src="/2022/03/14/1/image%5C14.png" alt></p><p>双击安装程序，步骤截图如下：</p><p><img src="/2022/03/14/1/image%5C15.png" alt></p><p><img src="/2022/03/14/1/image%5C16.png" alt></p><p><img src="/2022/03/14/1/image%5C17.png" alt></p><p><img src="/2022/03/14/1/image%5C18.png" alt></p><p><img src="/2022/03/14/1/image%5C20.png" alt></p><p>安装完毕，可以通过cmd控制台输入：node -v 查看版本号</p><p>5）将grunt安装为全局命令 ，Grunt是基于Node.js的项目构建工具</p><p>在cmd控制台中输入如下执行命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g grunt-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果如下图：</p><p><img src="/2022/03/14/1/image%5C21.png" alt></p><p>6）进入elasticsearch-head-master目录启动head，在命令提示符下输入命令：</p><pre class="line-numbers language-none"><code class="language-none">&gt;npm install&gt;grunt server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/03/14/1/image%5C23.png" alt></p><p>7）打开浏览器，输入 <a href="http://localhost:9100">http://localhost:9100</a>，看到如下页面：</p><p><img src="/2022/03/14/1/image%5C24.png" alt></p><p>如果不能成功连接到es服务，需要修改ElasticSearch的config目录下的配置文件：config/elasticsearch.yml，增加以下两句命令：</p><pre class="line-numbers language-none"><code class="language-none">http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后重新启动ElasticSearch服务。</p><h1 id="第三章-elasticsearch相关概念术语"><a class="markdownIt-Anchor" href="#第三章-elasticsearch相关概念术语"></a> 第三章 ElasticSearch相关概念(术语)</h1><h2 id="31-概述"><a class="markdownIt-Anchor" href="#31-概述"></a> 3.1 概述</h2><p>Elasticsearch是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。Elasticsearch比传统关系型数据库如下：</p><pre class="line-numbers language-none"><code class="language-none">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; ColumnsElasticsearch -&gt; Indices   -&gt; Types  -&gt; Documents -&gt; Fields<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="32-elasticsearch核心概念"><a class="markdownIt-Anchor" href="#32-elasticsearch核心概念"></a> 3.2 <strong>Elasticsearch核心概念</strong></h2><h3 id="321-索引-index"><a class="markdownIt-Anchor" href="#321-索引-index"></a> 3.2.1 索引 index</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><h3 id="322-类型-type"><a class="markdownIt-Anchor" href="#322-类型-type"></a> 3.2.2 类型 type</h3><p>在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。</p><h3 id="323-字段field"><a class="markdownIt-Anchor" href="#323-字段field"></a> 3.2.3 字段Field</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p><h3 id="324-映射-mapping"><a class="markdownIt-Anchor" href="#324-映射-mapping"></a> 3.2.4 映射 mapping</h3><p>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h3 id="325-文档-document"><a class="markdownIt-Anchor" href="#325-文档-document"></a> 3.2.5 文档 document</h3><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。</p><p>在一个index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。</p><h3 id="326-接近实时-nrt"><a class="markdownIt-Anchor" href="#326-接近实时-nrt"></a> 3.2.6 接近实时 NRT</h3><p>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒以内）</p><h3 id="327-集群-cluster"><a class="markdownIt-Anchor" href="#327-集群-cluster"></a> 3.2.7 集群 cluster</h3><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群</p><h3 id="328-节点-node"><a class="markdownIt-Anchor" href="#328-节点-node"></a> 3.2.8 节点 node</h3><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p><h3 id="329-分片和复制-shardsreplicas"><a class="markdownIt-Anchor" href="#329-分片和复制-shardsreplicas"></a> 3.2.9 分片和复制 shards&amp;replicas</h3><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：<br>1）允许你水平分割/扩展你的内容容量。<br>2）允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量。</p><p>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。</p><p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p><p>复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。</p><h1 id="第四章-elasticsearch的客户端操作"><a class="markdownIt-Anchor" href="#第四章-elasticsearch的客户端操作"></a> 第四章 ElasticSearch的客户端操作</h1><p>实际开发中，主要有三种方式可以作为elasticsearch服务的客户端：</p><ul><li>第一种，elasticsearch-head插件</li><li>第二种，使用elasticsearch提供的Restful接口直接访问</li><li>第三种，使用elasticsearch提供的API进行访问</li></ul><h2 id="41-安装postman工具"><a class="markdownIt-Anchor" href="#41-安装postman工具"></a> 4.1 安装Postman工具</h2><p>Postman中文版是postman这款强大网页调试工具的windows客户端，提供功能强大的Web API &amp; HTTP 请求调试。软件功能非常强大，界面简洁明晰、操作方便快捷，设计得很人性化。Postman中文版能够发送任何类型的HTTP 请求 (GET, HEAD, POST, PUT…)，且可以附带任何数量的参数。</p><h2 id="41-下载postman工具"><a class="markdownIt-Anchor" href="#41-下载postman工具"></a> 4.1 下载Postman工具</h2><p>Postman官网：<a href="https://www.getpostman.com">https://www.getpostman.com</a></p><p>课程资料中已经提供了安装包</p><p><img src="/2022/03/14/1/image%5C41.png" alt></p><h2 id="42-注册postman工具"><a class="markdownIt-Anchor" href="#42-注册postman工具"></a> 4.2 注册Postman工具</h2><p><img src="/2022/03/14/1/image%5C42.png" alt></p><p><img src="/2022/03/14/1/image%5C43.png" alt></p><h2 id="42-使用postman工具进行restful接口访问"><a class="markdownIt-Anchor" href="#42-使用postman工具进行restful接口访问"></a> 4.2 使用Postman工具进行Restful接口访问</h2><h3 id="421-elasticsearch的接口语法"><a class="markdownIt-Anchor" href="#421-elasticsearch的接口语法"></a> 4.2.1 ElasticSearch的接口语法</h3><pre class="line-numbers language-none"><code class="language-none">curl -X&lt;VERB&gt; &#39;&lt;PROTOCOL&gt;:&#x2F;&#x2F;&lt;HOST&gt;:&lt;PORT&gt;&#x2F;&lt;PATH&gt;?&lt;QUERY_STRING&gt;&#39; -d &#39;&lt;BODY&gt;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>VERB</code></td><td>适当的 HTTP <em>方法</em> 或 <em>谓词</em> : <code>GET</code>、 <code>POST</code>、 <code>PUT</code>、 <code>HEAD</code> 或者 <code>DELETE</code>。</td></tr><tr><td><code>PROTOCOL</code></td><td><code>http</code> 或者 <code>https</code>（如果你在 Elasticsearch 前面有一个 <code>https</code> 代理）</td></tr><tr><td><code>HOST</code></td><td>Elasticsearch 集群中任意节点的主机名，或者用 <code>localhost</code> 代表本地机器上的节点。</td></tr><tr><td><code>PORT</code></td><td>运行 Elasticsearch HTTP 服务的端口号，默认是 <code>9200</code> 。</td></tr><tr><td><code>PATH</code></td><td>API 的终端路径（例如 <code>_count</code> 将返回集群中文档数量）。Path 可能包含多个组件，例如：<code>_cluster/stats</code> 和 <code>_nodes/stats/jvm</code> 。</td></tr><tr><td><code>QUERY_STRING</code></td><td>任意可选的查询字符串参数 (例如 <code>?pretty</code> 将格式化地输出 JSON 返回值，使其更容易阅读)</td></tr><tr><td><code>BODY</code></td><td>一个 JSON 格式的请求体 (如果请求需要的话)</td></tr></tbody></table><h3 id="422-创建索引index和映射mapping"><a class="markdownIt-Anchor" href="#422-创建索引index和映射mapping"></a> 4.2.2 创建索引index和映射mapping</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"article"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"not_analyzed"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C46.png" alt></p><p>elasticsearch-head查看：</p><p><img src="/2022/03/14/1/image%5C47.png" alt></p><p>###4.2.3 创建索引后设置Mapping</p><p>我们可以在创建索引时设置mapping信息，当然也可以先创建索引然后再设置mapping。</p><p>在上一个步骤中不设置maping信息，直接使用put方法创建一个索引，然后设置mapping信息。</p><p>请求的url：</p><pre class="line-numbers language-none"><code class="language-none">POSThttp:&#x2F;&#x2F;127.0.0.1:9200&#x2F;blog2&#x2F;hello&#x2F;_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"long"</span><span class="token punctuation">,</span>                <span class="token property">"store"</span><span class="token operator">:</span><span class="token boolean">true</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"store"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"content"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"store"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PostMan截图<br><img src="/2022/03/14/1/image%5C61.png" alt></p><h3 id="424-删除索引index"><a class="markdownIt-Anchor" href="#424-删除索引index"></a> 4.2.4 删除索引index</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">DELETElocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C48.png" alt></p><p>elasticsearch-head查看：</p><p><img src="/2022/03/14/1/image%5C49.png" alt></p><h3 id="425-创建文档document"><a class="markdownIt-Anchor" href="#425-创建文档document"></a> 4.2.5 创建文档document</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C50.png" alt></p><p>elasticsearch-head查看：</p><p><img src="/2022/03/14/1/image%5C51.png" alt></p><h3 id="426-修改文档document"><a class="markdownIt-Anchor" href="#426-修改文档document"></a> 4.2.6 修改文档document</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"【修改】ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"【修改】它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C52.png" alt></p><p>elasticsearch-head查看：</p><p><img src="/2022/03/14/1/image%5C53.png" alt></p><h3 id="427-删除文档document"><a class="markdownIt-Anchor" href="#427-删除文档document"></a> 4.2.7 删除文档document</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">DELETElocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C54.png" alt></p><p>elasticsearch-head查看：</p><p><img src="/2022/03/14/1/image%5C55.png" alt></p><h3 id="428-查询文档-根据id查询"><a class="markdownIt-Anchor" href="#428-查询文档-根据id查询"></a> 4.2.8 查询文档-根据id查询</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GETlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C56.png" alt></p><h3 id="429-查询文档-querystring查询"><a class="markdownIt-Anchor" href="#429-查询文档-querystring查询"></a> 4.2.9 查询文档-querystring查询</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"query_string"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"default_field"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"搜索服务器"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C57.png" alt></p><p>注意：</p><p>将搜索内容&quot;搜索服务器&quot;修改为&quot;钢索&quot;，同样也能搜索到文档，该原因会在下面讲解中得到答案</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"query_string"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"default_field"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"钢索"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4210-查询文档-term查询"><a class="markdownIt-Anchor" href="#4210-查询文档-term查询"></a> 4.2.10 查询文档-term查询</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"搜索"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C58.png" alt></p><h1 id="第五章-ik-分词器和elasticsearch集成使用"><a class="markdownIt-Anchor" href="#第五章-ik-分词器和elasticsearch集成使用"></a> 第五章 IK 分词器和ElasticSearch集成使用</h1><h2 id="51-上述查询存在问题分析"><a class="markdownIt-Anchor" href="#51-上述查询存在问题分析"></a> 5.1 上述查询存在问题分析</h2><p>在进行字符串查询时，我们发现去搜索&quot;搜索服务器&quot;和&quot;钢索&quot;都可以搜索到数据；</p><p>而在进行词条查询时，我们搜索&quot;搜索&quot;却没有搜索到数据；</p><p>究其原因是ElasticSearch的标准分词器导致的，当我们创建索引时，字段使用的是标准分词器：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"article"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"not_analyzed"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span><span class="token comment">//标准分词器</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span><span class="token comment">//标准分词器</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如对 “我是程序员” 进行分词</p><p>标准分词器分词效果测试：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1:9200/_analyze?analyzer=standard&amp;pretty=true&amp;text=我是程序员</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分词结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"是"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"程"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"序"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"员"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而我们需要的分词效果是：我、是、程序、程序员</p><p>这样的话就需要对中文支持良好的分析器的支持，支持中文分词的分词器有很多，word分词器、庖丁解牛、盘古分词、Ansj分词等，但我们常用的还是下面要介绍的IK分词器。</p><h2 id="52-ik分词器简介"><a class="markdownIt-Anchor" href="#52-ik分词器简介"></a> 5.2 IK分词器简介</h2><p>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出 了3个大版本。最初，它是以开源项目Lucene为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IKAnalyzer3.0则发展为 面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。</p><p>IK分词器3.0的特性如下：</p><p>1）采用了特有的“正向迭代最细粒度切分算法“，具有60万字/秒的高速处理能力。<br>2）采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。<br>3）对中英联合支持不是很好,在这方面的处理比较麻烦.需再做一次查询,同时是支持个人词条的优化的词典存储，更小的内存占用。<br>4）支持用户词典扩展定义。<br>5）针对Lucene全文检索优化的查询分析器IKQueryParser；采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。</p><h2 id="53-elasticsearch集成ik分词器"><a class="markdownIt-Anchor" href="#53-elasticsearch集成ik分词器"></a> 5.3 ElasticSearch集成IK分词器</h2><h3 id="531-ik分词器的安装"><a class="markdownIt-Anchor" href="#531-ik分词器的安装"></a> 5.3.1 IK分词器的安装</h3><p>1）下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>课程资料也提供了IK分词器的压缩包：</p><p><img src="/2022/03/14/1/34.png" alt></p><p>2）解压，将解压后的elasticsearch文件夹拷贝到elasticsearch-5.6.8\plugins下，并重命名文件夹为analysis-ik</p><p><img src="/2022/03/14/1/35.png" alt></p><p>3）重新启动ElasticSearch，即可加载IK分词器</p><p><img src="/2022/03/14/1/36.png" alt></p><h3 id="532-ik分词器测试"><a class="markdownIt-Anchor" href="#532-ik分词器测试"></a> 5.3.2 IK分词器测试</h3><p>IK提供了两个分词算法ik_smart 和 ik_max_word</p><p>其中 ik_smart 为最少切分，ik_max_word为最细粒度划分</p><p>我们分别来试一下</p><p>1）最小切分：在浏览器地址栏输入地址</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1:9200/_analyze?analyzer=ik_smart&amp;pretty=true&amp;text=我是程序员</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的结果为：</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;tokens&quot; : [    &#123;      &quot;token&quot; : &quot;我&quot;,      &quot;start_offset&quot; : 0,      &quot;end_offset&quot; : 1,      &quot;type&quot; : &quot;CN_CHAR&quot;,      &quot;position&quot; : 0    &#125;,    &#123;      &quot;token&quot; : &quot;是&quot;,      &quot;start_offset&quot; : 1,      &quot;end_offset&quot; : 2,      &quot;type&quot; : &quot;CN_CHAR&quot;,      &quot;position&quot; : 1    &#125;,    &#123;      &quot;token&quot; : &quot;程序员&quot;,      &quot;start_offset&quot; : 2,      &quot;end_offset&quot; : 5,      &quot;type&quot; : &quot;CN_WORD&quot;,      &quot;position&quot; : 2    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）最细切分：在浏览器地址栏输入地址</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1:9200/_analyze?analyzer=ik_max_word&amp;pretty=true&amp;text=我是程序员</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的结果为：</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;tokens&quot; : [    &#123;      &quot;token&quot; : &quot;我&quot;,      &quot;start_offset&quot; : 0,      &quot;end_offset&quot; : 1,      &quot;type&quot; : &quot;CN_CHAR&quot;,      &quot;position&quot; : 0    &#125;,    &#123;      &quot;token&quot; : &quot;是&quot;,      &quot;start_offset&quot; : 1,      &quot;end_offset&quot; : 2,      &quot;type&quot; : &quot;CN_CHAR&quot;,      &quot;position&quot; : 1    &#125;,    &#123;      &quot;token&quot; : &quot;程序员&quot;,      &quot;start_offset&quot; : 2,      &quot;end_offset&quot; : 5,      &quot;type&quot; : &quot;CN_WORD&quot;,      &quot;position&quot; : 2    &#125;,    &#123;      &quot;token&quot; : &quot;程序&quot;,      &quot;start_offset&quot; : 2,      &quot;end_offset&quot; : 4,      &quot;type&quot; : &quot;CN_WORD&quot;,      &quot;position&quot; : 3    &#125;,    &#123;      &quot;token&quot; : &quot;员&quot;,      &quot;start_offset&quot; : 4,      &quot;end_offset&quot; : 5,      &quot;type&quot; : &quot;CN_CHAR&quot;,      &quot;position&quot; : 4    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="54-修改索引映射mapping"><a class="markdownIt-Anchor" href="#54-修改索引映射mapping"></a> 5.4 修改索引映射mapping</h2><h3 id="541-重建索引"><a class="markdownIt-Anchor" href="#541-重建索引"></a> 5.4.1 重建索引</h3><p>删除原有blog1索引</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">DELETElocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建blog1索引，此时分词器使用ik_max_word</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"article"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"not_analyzed"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建文档</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="542-再次测试querystring查询"><a class="markdownIt-Anchor" href="#542-再次测试querystring查询"></a> 5.4.2 再次测试queryString查询</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"query_string"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"default_field"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"搜索服务器"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/57.png" alt></p><p>将请求体搜索字符串修改为&quot;钢索&quot;，再次查询：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"query_string"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"default_field"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"钢索"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C59.png" alt></p><h3 id="543-再次测试term测试"><a class="markdownIt-Anchor" href="#543-再次测试term测试"></a> 5.4.3 再次测试term测试</h3><p>请求url：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"搜索"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman截图：</p><p><img src="/2022/03/14/1/image%5C60.png" alt></p><h1 id="第六章-elasticsearch集群"><a class="markdownIt-Anchor" href="#第六章-elasticsearch集群"></a> 第六章 ElasticSearch集群</h1><p>​ES集群是一个 P2P类型(使用 gossip 协议)的分布式系统，除了集群状态管理以外，其他所有的请求都可以发送到集群内任意一台节点上，这个节点可以自己找到需要转发给哪些节点，并且直接跟这些节点通信。所以，从网络架构及服务配置上来说，构建集群所需要的配置极其简单。在 Elasticsearch 2.0 之前，无阻碍的网络下，所有配置了相同 <a href="http://cluster.name">cluster.name</a> 的节点都自动归属到一个集群中。2.0 版本之后，基于安全的考虑避免开发环境过于随便造成的麻烦，从 2.0 版本开始，默认的自动发现方式改为了单播(unicast)方式。配置里提供几台节点的地址，ES 将其视作 gossip router 角色，借以完成集群的发现。由于这只是 ES 内一个很小的功能，所以 gossip router 角色并不需要单独配置，每个 ES 节点都可以担任。所以，采用单播方式的集群，各节点都配置相同的几个节点列表作为 router 即可。</p><p>​集群中节点数量没有限制，一般大于等于2个节点就可以看做是集群了。一般处于高性能及高可用方面来考虑一般集群中的节点数量都是3个及3个以上。</p><h2 id="61-集群的相关概念"><a class="markdownIt-Anchor" href="#61-集群的相关概念"></a> 6.1 集群的相关概念</h2><h3 id="611-集群-cluster"><a class="markdownIt-Anchor" href="#611-集群-cluster"></a> 6.1.1 集群 cluster</h3><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群</p><h3 id="612-节点-node"><a class="markdownIt-Anchor" href="#612-节点-node"></a> 6.1.2 节点 node</h3><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p><h3 id="613-分片和复制-shardsreplicas"><a class="markdownIt-Anchor" href="#613-分片和复制-shardsreplicas"></a> 6.1.3 分片和复制 shards&amp;replicas</h3><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：<br>1）允许你水平分割/扩展你的内容容量。<br>2）允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量。</p><p>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。</p><p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p><p>复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。</p><h2 id="62-集群的搭建"><a class="markdownIt-Anchor" href="#62-集群的搭建"></a> 6.2 集群的搭建</h2><h3 id="621-准备三台elasticsearch服务器"><a class="markdownIt-Anchor" href="#621-准备三台elasticsearch服务器"></a> 6.2.1 准备三台elasticsearch服务器</h3><p>创建elasticsearch-cluster文件夹，在内部复制三个elasticsearch服务</p><h3 id="622-修改每台服务器配置"><a class="markdownIt-Anchor" href="#622-修改每台服务器配置"></a> 6.2.2 修改每台服务器配置</h3><p>修改elasticsearch-cluster\node*\config\elasticsearch.yml配置文件</p><h4 id="node1节点"><a class="markdownIt-Anchor" href="#node1节点"></a> node1节点：</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点1的配置信息：</span><span class="token comment">#集群名称，保证唯一</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，必须不一样</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span><span class="token comment">#必须为本机的ip地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 127.0.0.1<span class="token comment">#服务端口号，在同一机器下必须不一样</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token comment">#集群间通信端口号，在同一机器下必须不一样</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9300</span><span class="token comment">#设置集群自动发现机器ip集合</span><span class="token key atrule">discovery.zen.ping.unicast.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"127.0.0.1:9300"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1:9301"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1:9302"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="node2节点"><a class="markdownIt-Anchor" href="#node2节点"></a> node2节点：</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点2的配置信息：</span><span class="token comment">#集群名称，保证唯一</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，必须不一样</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">2</span><span class="token comment">#必须为本机的ip地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 127.0.0.1<span class="token comment">#服务端口号，在同一机器下必须不一样</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9201</span><span class="token comment">#集群间通信端口号，在同一机器下必须不一样</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9301</span><span class="token comment">#设置集群自动发现机器ip集合</span><span class="token key atrule">discovery.zen.ping.unicast.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"127.0.0.1:9300"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1:9301"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1:9302"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="node3节点"><a class="markdownIt-Anchor" href="#node3节点"></a> node3节点：</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点3的配置信息：</span><span class="token comment">#集群名称，保证唯一</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，必须不一样</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">3</span><span class="token comment">#必须为本机的ip地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 127.0.0.1<span class="token comment">#服务端口号，在同一机器下必须不一样</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9202</span><span class="token comment">#集群间通信端口号，在同一机器下必须不一样</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9302</span><span class="token comment">#设置集群自动发现机器ip集合</span><span class="token key atrule">discovery.zen.ping.unicast.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"127.0.0.1:9300"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1:9301"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1:9302"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="623-启动各个节点服务器"><a class="markdownIt-Anchor" href="#623-启动各个节点服务器"></a> 6.2.3 启动各个节点服务器</h3><p>双击elasticsearch-cluster\node*\bin\elasticsearch.bat</p><h4 id="启动节点1"><a class="markdownIt-Anchor" href="#启动节点1"></a> 启动节点1：</h4><p><img src="/2022/03/14/1/image%5C21.png" alt></p><h4 id="启动节点2"><a class="markdownIt-Anchor" href="#启动节点2"></a> 启动节点2：</h4><p><img src="/2022/03/14/1/image%5C22.png" alt></p><h4 id="启动节点3"><a class="markdownIt-Anchor" href="#启动节点3"></a> 启动节点3：</h4><p><img src="/2022/03/14/1/image%5C23.png" alt></p><h3 id="624-集群测试"><a class="markdownIt-Anchor" href="#624-集群测试"></a> 6.2.4 集群测试</h3><h4 id="添加索引和映射"><a class="markdownIt-Anchor" href="#添加索引和映射"></a> 添加索引和映射</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"article"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"not_analyzed"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"analyzed"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加文档"><a class="markdownIt-Anchor" href="#添加文档"></a> 添加文档</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">POSTlocalhost<span class="token operator">:</span><span class="token number">9200</span>/blog1/article/<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用elasticsearch-header查看集群情况"><a class="markdownIt-Anchor" href="#使用elasticsearch-header查看集群情况"></a> 使用elasticsearch-header查看集群情况</h4><p><img src="/2022/03/14/1/image%5C62.png" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;elasticsearch第一天&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#elasticsearch第一天&quot;&gt;&lt;/a&gt; ElasticSearch第一天&lt;/h1&gt;
&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a class=&quot;markdownI</summary>
      
    
    
    
    <category term="框架" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="ElasticSearch" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Lucene</title>
    <link href="http://example.com/2022/03/14/3/"/>
    <id>http://example.com/2022/03/14/3/</id>
    <published>2022-03-14T07:27:31.000Z</published>
    <updated>2022-07-08T13:32:03.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-全文检索"><a class="markdownIt-Anchor" href="#一-全文检索"></a> 一、全文检索</h1><ol><li><p>数据的分类</p><ul><li>1 结构化数据<ul><li>格式固定，长度固定、数据类型固定</li><li>比如数据库中的数据</li></ul></li><li>2 非结构化数据<ul><li>格式不固定、长度不固定、数据类型不固定</li><li>比如 word、PDF、邮件、HTML、txt</li></ul></li></ul></li><li><p>数据的查询</p><ul><li>1 结构化数据的查询<ul><li>SQL语句，查询结构化数据的方法，简单，速度快</li></ul></li><li>2 非结构化数据的查询<ul><li>从文本文件中找出包含指定单词的文件<ul><li>目测</li><li>使用程序把文档读取到内存中，然后匹配字符串。属性扫描。</li><li>把非结构化数据编程结构化数据<ul><li>先根据空格进行字符串拆分，得到一个单词列表，基于单词列表创建一个<strong>索引</strong>。</li><li>根据单词与索引的对应关系找到文档列表，这个过程叫做<strong>全文检索</strong>。<ul><li>索引：一个为了提高查询速度，创建<strong>某种数据结构的集合</strong>。</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>全文检索</p></li></ol><ul><li>先创建索引后然后查询索引的过程叫做全文检索</li><li>索引创建一次，可以<code>多次查询</code>，表现为每次查询的速度都很快</li></ul><h1 id="二-全文索引的应用场景"><a class="markdownIt-Anchor" href="#二-全文索引的应用场景"></a> 二、全文索引的应用场景</h1><ol><li><p>搜索引擎</p><ul><li>百度、谷歌</li></ul></li><li><p>站内索引</p><ul><li>论坛搜索、微博、文章搜索</li></ul></li><li><p>电商搜索</p><ul><li>淘宝搜索、京东搜索</li></ul></li><li><p>只要是有搜索的地方就可以使用全文检索技术</p></li></ol><h1 id="三-lucene"><a class="markdownIt-Anchor" href="#三-lucene"></a> 三、Lucene</h1><p>Lucene是一个基于java开发的全文检索工具包。</p><h1 id="四-lucene实现全文检索的流程"><a class="markdownIt-Anchor" href="#四-lucene实现全文检索的流程"></a> 四、Lucene实现全文检索的流程</h1><ol><li><p>创建索引</p><ul><li><p>1 获取文档</p><ul><li>原始文档：基于哪些数据进行检索，那么这些数据就是原始文档</li><li>搜索引擎：使用爬虫来获取原始文档</li><li>站内搜索：数据库中的数据</li><li>案例：直接使用IO流来读取磁盘上的文件</li></ul></li><li><p>2 构建文档对象</p><ul><li>对应每个原始文档来创建一个document对象</li><li>每个document对象中包含多个域（field）</li><li>域中保存的就是原始文档的数据<ul><li>域的名称</li><li>域的值</li></ul></li><li>每个文档中都有一个唯一的编号，就是文档的id</li></ul></li><li><p>3 分析文档</p><ul><li>分词的过程<ul><li>根据空格进行字符串的拆分，得到一个单词列表</li><li>把单词全部转化为小写</li><li>去除标点符号</li><li>去除停用词：无意义的词</li><li>每个关键词都封装成一个term对象中<ul><li>term包含两部分内容：<ul><li>关键词所在的域</li><li>关键词本身</li></ul></li><li>不同的域中拆分出来的相同的关键词是不同的term</li></ul></li></ul></li></ul></li><li><p>4创建索引</p><ul><li>基于关键词列表创建一个索引，保存到索引库中。</li><li>索引库中包含：<ul><li>索引</li><li>document</li><li>关键词和文档的对应关系</li></ul></li><li>通过词语查找文档，这种索引的结构叫做倒排索引结构</li></ul></li></ul></li><li><p>查询索引</p><ul><li>用户查询接口<ul><li>用户输入查询条件的地方</li><li>例如：百度的索引框</li></ul></li><li>把关键词封装成一个查询对象<ul><li>要查询的域</li><li>要搜索的关键词</li></ul></li><li>执行查询<ul><li>根据要查询的关键词到对应的域上进行搜索</li><li>找到关键词，根据关键词找到对应文档</li></ul></li><li>渲染结果<ul><li>根据文档的id找到文档对象</li><li>对关键词进行高亮显示</li><li>分页处理</li><li>最终展示给用户看</li></ul></li></ul></li></ol><h1 id="五-入门程序"><a class="markdownIt-Anchor" href="#五-入门程序"></a> 五、入门程序</h1><ol><li><p>创建索引</p><ul><li>环境：<ul><li>下载Lucene程序</li><li>最低要求jdk1.8</li></ul></li><li>工程搭建<ul><li>创建一个java工程：</li><li>添加jar包：core 、analyzers 、commons-io.jar</li></ul></li><li>步骤：<ul><li>创建一个directory对象，指定索引保存的位置</li><li>基于Directory对象创建IndexWriter对象</li><li>读取磁盘上的文件，对应每个文件创建一个文档对象</li><li>向文档对象中添加域</li><li>把文档对象写入索引库</li><li>关闭IndexWriter对象</li></ul></li></ul></li><li><p>使用luke查看索引库中的内容</p><ul><li>jdk9</li></ul></li><li><p>查询索引库</p><ul><li>步骤<ul><li>创建一个directory对象，指定索引库的位置</li><li>创建一个IndexReader对象</li><li>创建一个IndexSearcher对象，构造方法中的参数：IndexReader</li><li>创建一个Query对象，TermQuery</li><li>执行查询，得到查询结果，TopDoc对象</li><li>获取查询结果的总记录数</li><li>取文档列表</li><li>打印文档中的内容</li><li>关闭indexReader对象</li></ul></li></ul></li></ol><h1 id="六-分析器"><a class="markdownIt-Anchor" href="#六-分析器"></a> 六、分析器</h1><p>默认使用的是标准分析器StandardAnalyzer</p><ol><li><p>查看分析器的分析效果</p><ul><li>使用Analyzer对象的tokenStream方法返回一个tokenStream对象，词对象中包含了最终分词结果</li><li>实现步骤<ul><li>创建Analyzer对象，StandardAnalyzer对象</li><li>使用分析器对象的tokenStream方法获得TokenStream对象</li><li>向TokenStream对象中设置一个引用。相当于一个指针</li><li>调用TokenStream对象的rest方法，如果不调用，会抛出异常</li><li>使用while循环遍历TokenStream对象</li><li>关闭TokenStream对象</li></ul></li></ul></li><li><p>IKanalyzer的使用方法</p><ul><li>把IKAnalyze入队jar包添加到工程中</li><li>把配置文件和扩展词典都添加的工程的classpath下</li><li>扩展词典严禁使用windows记事本编辑，保证扩展词典的编辑格式是utf-8<ul><li>扩展词典：可以添加一些新词</li><li>停用词词典：无意义的词、敏感词汇</li></ul></li></ul></li></ol><h1 id="七-索引库的维护"><a class="markdownIt-Anchor" href="#七-索引库的维护"></a> 七、索引库的维护</h1><ol><li>添加文档</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-全文检索&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-全文检索&quot;&gt;&lt;/a&gt; 一、全文检索&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据的分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 结构化数据
&lt;ul&gt;
&lt;li&gt;格式固定，长度固定、数据类型</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch第二天</title>
    <link href="http://example.com/2022/02/14/2/"/>
    <id>http://example.com/2022/02/14/2/</id>
    <published>2022-02-14T07:27:31.000Z</published>
    <updated>2022-07-08T13:31:03.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch第二天"><a class="markdownIt-Anchor" href="#elasticsearch第二天"></a> ElasticSearch第二天</h1><h2 id="学习目标"><a class="markdownIt-Anchor" href="#学习目标"></a> 学习目标：</h2><ol><li>能够使用java客户端完成创建、删除索引的操作</li><li>能够使用java客户端完成文档的增删改的操作</li><li>能够使用java客户端完成文档的查询操作</li><li>能够完成文档的分页操作</li><li>能够完成文档的高亮查询操作</li><li>能够搭建Spring Data ElasticSearch的环境</li><li>能够完成Spring Data ElasticSearch的基本增删改查操作</li><li>能够掌握基本条件查询的方法命名规则</li></ol><h1 id="第一章-elasticsearch编程操作"><a class="markdownIt-Anchor" href="#第一章-elasticsearch编程操作"></a> 第一章 ElasticSearch编程操作</h1><h2 id="11-创建工程导入坐标"><a class="markdownIt-Anchor" href="#11-创建工程导入坐标"></a> 1.1 创建工程，导入坐标</h2><p>pom.xml坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>transport<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-to-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-创建索引index"><a class="markdownIt-Anchor" href="#12-创建索引index"></a> 1.2 创建索引index</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment">//创建索引</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Client连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建名称为blog2的索引</span>    client<span class="token punctuation">.</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepareCreate</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/14/2/1.png" alt></p><p><img src="/2022/02/14/2/2.png" alt></p><h2 id="13-创建映射mapping"><a class="markdownIt-Anchor" href="#13-创建映射mapping"></a> 1.3 创建映射mapping</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment">//创建映射</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Client连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加映射</span>    <span class="token comment">/**         * 格式：         * "mappings" : &#123;             "article" : &#123;                "dynamic" : "false",                 "properties" : &#123;                    "id" : &#123; "type" : "string" &#125;,                     "content" : &#123; "type" : "string" &#125;,                    "author" : &#123; "type" : "string" &#125;                 &#125;            &#125;         &#125;         */</span>    <span class="token class-name">XContentBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">XContentFactory</span><span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"integer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"store"</span><span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"store"</span><span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"analyzer"</span><span class="token punctuation">,</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"store"</span><span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"analyzer"</span><span class="token punctuation">,</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建映射</span>    <span class="token class-name">PutMappingRequest</span> mapping <span class="token operator">=</span> <span class="token class-name">Requests</span><span class="token punctuation">.</span><span class="token function">putMappingRequest</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/14/2/4.png" alt></p><p><img src="/2022/02/14/2/5.png" alt></p><h2 id="14-建立文档document"><a class="markdownIt-Anchor" href="#14-建立文档document"></a> 1.4 建立文档document</h2><h3 id="141-建立文档通过xcontentbuilder"><a class="markdownIt-Anchor" href="#141-建立文档通过xcontentbuilder"></a> 1.4.1 建立文档（通过XContentBuilder）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment">//创建文档(通过XContentBuilder)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Client连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建文档信息</span>    <span class="token class-name">XContentBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">XContentFactory</span><span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span>               <span class="token string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立文档对象</span>    <span class="token comment">/**         * 参数一blog1：表示索引对象         * 参数二article：类型         * 参数三1：建立id         */</span>    client<span class="token punctuation">.</span><span class="token function">prepareIndex</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">,</span> <span class="token string">"article"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/14/2/6.png" alt></p><h3 id="142-建立文档使用jackson转换实体"><a class="markdownIt-Anchor" href="#142-建立文档使用jackson转换实体"></a> 1.4.2 建立文档（使用Jackson转换实体）</h3><p>1）创建Article实体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    getter<span class="token operator">/</span>setter<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）添加jackson坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment">//创建文档(通过实体转json)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Client连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 描述json 数据</span>    <span class="token comment">//&#123;id:xxx, title:xxx, content:xxx&#125;</span>    <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"搜索工作其实很快乐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立文档</span>    client<span class="token punctuation">.</span><span class="token function">prepareIndex</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">,</span> <span class="token string">"article"</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//.setSource(objectMapper.writeValueAsString(article)).get();</span>        <span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/14/2/7.png" alt></p><h2 id="15-查询文档操作"><a class="markdownIt-Anchor" href="#15-查询文档操作"></a> 1.5 查询文档操作</h2><h3 id="151关键词查询"><a class="markdownIt-Anchor" href="#151关键词查询"></a> 1.5.1关键词查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTermQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1、创建es客户端连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2、设置搜索条件</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token string">"搜索"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3、遍历搜索结果数据</span>    <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取命中次数，查询结果有多少对象</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果有："</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SearchHit</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SearchHit</span> searchHit <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个查询对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取字符串格式打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"title:"</span> <span class="token operator">+</span> searchHit<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4、释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="252-字符串查询"><a class="markdownIt-Anchor" href="#252-字符串查询"></a> 2.5.2  字符串查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1、创建es客户端连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2、设置搜索条件</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">queryStringQuery</span><span class="token punctuation">(</span><span class="token string">"搜索"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3、遍历搜索结果数据</span>    <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取命中次数，查询结果有多少对象</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果有："</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SearchHit</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SearchHit</span> searchHit <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个查询对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取字符串格式打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"title:"</span> <span class="token operator">+</span> searchHit<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4、释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="252-使用文档id查询文档"><a class="markdownIt-Anchor" href="#252-使用文档id查询文档"></a> 2.5.2 使用文档ID查询文档</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIdQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//client对象为TransportClient对象</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>                <span class="token comment">//设置要查询的id</span>                <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">idsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIds</span><span class="token punctuation">(</span><span class="token string">"test002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//执行查询</span>                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取查询结果</span>        <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取查询结果总记录数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SearchHit</span><span class="token punctuation">></span></span> hitIterator <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hitIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SearchHit</span> searchHit <span class="token operator">=</span> hitIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印整行数据</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-查询文档分页操作"><a class="markdownIt-Anchor" href="#26-查询文档分页操作"></a> 2.6 查询文档分页操作</h2><h3 id="261-批量插入数据"><a class="markdownIt-Anchor" href="#261-批量插入数据"></a> 2.6.1 批量插入数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token comment">//批量插入100条数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Client连接对象</span>        <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 描述json 数据</span>            <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"搜索工作其实很快乐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>i                    <span class="token operator">+</span> <span class="token string">"我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 建立文档</span>            client<span class="token punctuation">.</span><span class="token function">prepareIndex</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">,</span> <span class="token string">"article"</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">//.setSource(objectMapper.writeValueAsString(article)).get();</span>                    <span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//释放资源</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/14/2/12.png" alt></p><h3 id="262-分页查询"><a class="markdownIt-Anchor" href="#262-分页查询"></a> 2.6.2 分页查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment">//分页查询</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Client连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 搜索数据</span>    <span class="token class-name">SearchRequestBuilder</span> searchRequestBuilder <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认每页10条记录</span>    <span class="token comment">// 查询第2页数据，每页20条</span>    <span class="token comment">//setFrom()：从第几条开始检索，默认是0。</span>    <span class="token comment">//setSize():每页最多显示的记录数。</span>    searchRequestBuilder<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> searchRequestBuilder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取命中次数，查询结果有多少对象</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果有："</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SearchHit</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SearchHit</span> searchHit <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个查询对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取字符串格式打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span> <span class="token operator">+</span> searchHit<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"title:"</span> <span class="token operator">+</span> searchHit<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content:"</span> <span class="token operator">+</span> searchHit<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/14/2/13.png" alt></p><h2 id="27-查询结果高亮操作"><a class="markdownIt-Anchor" href="#27-查询结果高亮操作"></a> 2.7 查询结果高亮操作</h2><h3 id="271-什么是高亮显示"><a class="markdownIt-Anchor" href="#271-什么是高亮显示"></a> 2.7.1 什么是高亮显示</h3><p>在进行关键字搜索时，搜索出的内容中的关键字会显示不同的颜色，称之为高亮</p><p>百度搜索关键字&quot;传智播客&quot;</p><p><img src="/2022/02/14/2/14.png" alt></p><p>京东商城搜索&quot;笔记本&quot;</p><p><img src="/2022/02/14/2/15.png" alt></p><h3 id="272-高亮显示的html分析"><a class="markdownIt-Anchor" href="#272-高亮显示的html分析"></a> 2.7.2 高亮显示的html分析</h3><p>通过开发者工具查看高亮数据的html代码实现：</p><p><img src="/2022/02/14/2/16.png" alt></p><p>ElasticSearch可以对查询出的内容中关键字部分进行标签和样式的设置，但是你需要告诉ElasticSearch使用什么标签对高亮关键字进行包裹</p><h3 id="273-高亮显示代码实现"><a class="markdownIt-Anchor" href="#273-高亮显示代码实现"></a> 2.7.3 高亮显示代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment">//高亮查询</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Client连接对象</span>    <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 搜索数据</span>    <span class="token class-name">SearchRequestBuilder</span> searchRequestBuilder <span class="token operator">=</span> client        <span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"搜索"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置高亮数据</span>    <span class="token class-name">HighlightBuilder</span> hiBuilder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HighlightBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hiBuilder<span class="token punctuation">.</span><span class="token function">preTags</span><span class="token punctuation">(</span><span class="token string">"&lt;font style='color:red'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hiBuilder<span class="token punctuation">.</span><span class="token function">postTags</span><span class="token punctuation">(</span><span class="token string">"&lt;/font>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hiBuilder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchRequestBuilder<span class="token punctuation">.</span><span class="token function">highlighter</span><span class="token punctuation">(</span>hiBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获得查询结果数据</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> searchRequestBuilder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取查询结果集</span>    <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共搜到:"</span><span class="token operator">+</span>searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"条结果!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历结果</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit<span class="token operator">:</span>searchHits<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String方式打印文档搜索内容:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Map方式打印高亮内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getHighlightFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历高亮集合，打印高亮片段:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Text</span><span class="token punctuation">[</span><span class="token punctuation">]</span> text <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getHighlightFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Text</span> str <span class="token operator">:</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//释放资源</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/14/2/17.png" alt></p><h1 id="第三章-spring-data-elasticsearch-使用"><a class="markdownIt-Anchor" href="#第三章-spring-data-elasticsearch-使用"></a> 第三章 Spring Data ElasticSearch 使用</h1><h2 id="31-spring-data-elasticsearch简介"><a class="markdownIt-Anchor" href="#31-spring-data-elasticsearch简介"></a> 3.1 Spring Data ElasticSearch简介</h2><h3 id="311-什么是spring-data"><a class="markdownIt-Anchor" href="#311-什么是spring-data"></a> 3.1.1 什么是Spring Data</h3><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持map-reduce框架和云计算数据服务。 Spring Data可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD外，还包括如分页、排序等一些常用的功能。</p><p>Spring Data的官网：<a href="http://projects.spring.io/spring-data/">http://projects.spring.io/spring-data/</a></p><p>Spring Data常用的功能模块如下：</p><p><img src="/2022/02/14/2/image%5C18.png" alt></p><p><img src="/2022/02/14/2/image%5C19.png" alt></p><h3 id="312-什么是spring-data-elasticsearch"><a class="markdownIt-Anchor" href="#312-什么是spring-data-elasticsearch"></a> 3.1.2 什么是Spring Data ElasticSearch</h3><p>Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 。Spring Data为Elasticsearch项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储库数据访问层。</p><p>官方网站：<a href="http://projects.spring.io/spring-data-elasticsearch/">http://projects.spring.io/spring-data-elasticsearch/</a></p><h2 id="32-spring-data-elasticsearch入门"><a class="markdownIt-Anchor" href="#32-spring-data-elasticsearch入门"></a> 3.2 Spring Data ElasticSearch入门</h2><p>1）导入Spring Data ElasticSearch坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>itheima_elasticsearch_demo3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>transport<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-to-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>transport-netty4-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）创建applicationContext.xml配置文件，引入elasticsearch命名空间</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>elasticsearch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/data/elasticsearch<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/data/elasticsearchhttp://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）编写实体Article</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> title<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Article [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", title="</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">", content="</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）编写Dao</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRepository</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleRepository</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）编写Service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ArticleRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6） 配置applicationContext.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>elasticsearch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/data/elasticsearch<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/data/elasticsearchhttp://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 扫描Dao包，自动创建实例 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">elasticsearch:</span>repositories</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 扫描Service包，创建Service的实体 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 配置elasticSearch的连接 --></span>        <span class="token comment">&lt;!-- 配置elasticSearch的连接 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">elasticsearch:</span>transport-client</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client<span class="token punctuation">"</span></span> <span class="token attr-name">cluster-nodes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost:9300<span class="token punctuation">"</span></span> <span class="token attr-name">cluster-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-elasticsearch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- ElasticSearch模版对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elasticsearchTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.data.elasticsearch.core.ElasticsearchTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）配置实体</p><p>基于spring data elasticsearch注解配置索引、映射和实体的关系</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">FieldType</span></span><span class="token punctuation">;</span><span class="token comment">//@Document 文档对象 （索引信息、文档类型 ）</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName<span class="token operator">=</span><span class="token string">"blog3"</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@Id 文档主键 唯一标识</span>    <span class="token annotation punctuation">@Id</span>    <span class="token comment">//@Field 每个文档的字段配置（类型、是否分词、是否存储、分词器 ）</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>store<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Integer</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>analyzer<span class="token operator">=</span><span class="token string">"ik_smart"</span><span class="token punctuation">,</span>store<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>searchAnalyzer<span class="token operator">=</span><span class="token string">"ik_smart"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>analyzer<span class="token operator">=</span><span class="token string">"ik_smart"</span><span class="token punctuation">,</span>store<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>searchAnalyzer<span class="token operator">=</span><span class="token string">"ik_smart"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> title<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Article [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", title="</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">", content="</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">其中，注解解释如下：@Document(indexName&#x3D;&quot;blob3&quot;,type&#x3D;&quot;article&quot;)：    indexName：索引的名称（必填项）    type：索引的类型@Id：主键的唯一标识@Field(index&#x3D;true,analyzer&#x3D;&quot;ik_smart&quot;,store&#x3D;true,searchAnalyzer&#x3D;&quot;ik_smart&quot;,type &#x3D; FieldType.text)    index：是否设置分词    analyzer：存储时使用的分词器    searchAnalyze：搜索时使用的分词器    store：是否存储    type: 数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）创建测试类SpringDataESTest</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>transport<span class="token punctuation">.</span></span><span class="token class-name">TransportClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations<span class="token operator">=</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleService</span> articleService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TransportClient</span> client<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span>    <span class="token comment">/**创建索引和映射*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**测试保存文档*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"测试SpringData ElasticSearch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 \n"</span> <span class="token operator">+</span>                <span class="token string">"    Spring Data为Elasticsearch Elasticsearch项目提供集成搜索引擎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-spring-data-elasticsearch的常用操作"><a class="markdownIt-Anchor" href="#33-spring-data-elasticsearch的常用操作"></a> 3.3 Spring Data ElasticSearch的常用操作</h2><h3 id="331-增删改查方法测试"><a class="markdownIt-Anchor" href="#331-增删改查方法测试"></a> 3.3.1 增删改查方法测试</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Pageable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//保存</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//删除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查询全部</span>    <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//分页查询</span>    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ArticleRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Pageable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> iter <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> iter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> articleRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>transport<span class="token punctuation">.</span></span><span class="token class-name">TransportClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">PageRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Pageable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations<span class="token operator">=</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleService</span> articleService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TransportClient</span> client<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span>    <span class="token comment">/**创建索引和映射*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**测试保存文档*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"测试SpringData ElasticSearch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 \n"</span> <span class="token operator">+</span>                <span class="token string">"    Spring Data为Elasticsearch Elasticsearch项目提供集成搜索引擎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**测试保存*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"elasticSearch 3.0版本发布"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**测试更新*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"elasticSearch 3.0版本发布...更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**测试删除*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**批量插入*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"elasticSearch 3.0版本发布..，更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            articleService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**分页查询*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAllPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token operator">:</span>page<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="332-常用查询命名规则"><a class="markdownIt-Anchor" href="#332-常用查询命名规则"></a> 3.3.2 常用查询命名规则</h3><table><thead><tr><th>关键字</th><th>命名规则</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>findByField1AndField2</td><td>根据Field1和Field2获得数据</td><td>findByTitleAndContent</td></tr><tr><td>or</td><td>findByField1OrField2</td><td>根据Field1或Field2获得数据</td><td>findByTitleOrContent</td></tr><tr><td>is</td><td>findByField</td><td>根据Field获得数据</td><td>findByTitle</td></tr><tr><td>not</td><td>findByFieldNot</td><td>根据Field获得补集数据</td><td>findByTitleNot</td></tr><tr><td>between</td><td>findByFieldBetween</td><td>获得指定范围的数据</td><td>findByPriceBetween</td></tr><tr><td>lessThanEqual</td><td>findByFieldLessThan</td><td>获得小于等于指定值的数据</td><td>findByPriceLessThan</td></tr></tbody></table><h3 id="333-查询方法测试"><a class="markdownIt-Anchor" href="#333-查询方法测试"></a> 3.3.3 查询方法测试</h3><p>1）dao层实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Pageable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleRepository</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//根据标题查询</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findByTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据标题查询(含分页)</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findByTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）service层实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//根据标题查询</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findByTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据标题查询(含分页)</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findByTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ArticleRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Pageable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findByTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> articleRepository<span class="token punctuation">.</span><span class="token function">findByTitle</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findByTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> articleRepository<span class="token punctuation">.</span><span class="token function">findByTitle</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>transport<span class="token punctuation">.</span></span><span class="token class-name">TransportClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">PageRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Pageable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations<span class="token operator">=</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleService</span> articleService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TransportClient</span> client<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span>    <span class="token comment">/**条件查询*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> condition <span class="token operator">=</span> <span class="token string">"版本"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articleList <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">findByTitle</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token operator">:</span>articleList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**条件分页查询*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByTitlePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> condition <span class="token operator">=</span> <span class="token string">"版本"</span><span class="token punctuation">;</span>        <span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">findByTitle</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token operator">:</span>page<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###3.3.4使用Elasticsearch的原生查询对象进行查询。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByNativeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个SearchQuery对象</span>        <span class="token class-name">SearchQuery</span> searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//设置查询条件，此处可以使用QueryBuilders创建多种查询</span>                <span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">queryStringQuery</span><span class="token punctuation">(</span><span class="token string">"备份节点上没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultField</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//还可以设置分页信息</span>                <span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span><span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//创建SearchQuery对象</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用模板对象执行查询</span>        elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> <span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;elasticsearch第二天&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#elasticsearch第二天&quot;&gt;&lt;/a&gt; ElasticSearch第二天&lt;/h1&gt;
&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a class=&quot;markdownI</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>1111111111111</title>
    <link href="http://example.com/2020/01/14/5w2h-godweiyang-fu-ben/"/>
    <id>http://example.com/2020/01/14/5w2h-godweiyang-fu-ben/</id>
    <published>2020-01-14T07:27:31.000Z</published>
    <updated>2021-11-14T15:35:33.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="/2020/01/14/5w2h-godweiyang-fu-ben/contact.jpg" alt></p><h2 id="when什么时候开始写的"><a class="markdownIt-Anchor" href="#when什么时候开始写的"></a> When？什么时候开始写的？</h2><p>第一次写博客是 2015 年了，在 CSDN 和博客园上面，当时写文章是为了记录 ACM 竞赛的题解，陆陆续续写了几十篇。但是最后还是没有坚持下去，主要还是因为 CSDN 和博客园的体验太差了，写起文章来很难受，又丑又慢。另一个原因是， CSDN 发个文章还需要审核，定制主题自由度也太差。</p><p>第二次就是 2017 年暑假了，当时自己建了个人博客，域名是：<a href="https://godweiyang.com/">godweiyang.com</a>。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。算法题解的话最近也开始更新起来了，主要写一些 LeetCode上面的题解。</p><p>最后就是知乎专栏和微信公众号了，这两个平台是最近才搞的，主要把个人博客的文章同步更新过去，内容都差不多。微信公众号本来不想搞的，不支持 markdown ，写起来挺麻烦的。但是考虑到以后的发展，以及可能会有一些变现的操作，还是重操旧业了（其实我公众号两年前就注册过了，只是一直没有更新）。</p><h2 id="why为什么会想起来写博客"><a class="markdownIt-Anchor" href="#why为什么会想起来写博客"></a> Why？为什么会想起来写博客？</h2><p>其实刚开始写博客，主要还是为了记录自己平时学到的一些东西，以后可能还能翻出来复习复习。但是现在看来，基本不会再去翻以前写的东西了。</p><p>另一个目的，也是我写博客最主要的目的，还是想分享我知道的一些东西，能够让更多的人因此受益。因为写博客，其实还是认识了不少天南地北的朋友的，有各个高校甚至初高中的学生，也有工作了很多年想学习学习编程的，也有国外一些名校的学生。不管是谁，我觉得都可以扩展我的人脉，现在微信好友人数上限扩展到了 5000 人了，而我才用了十分之一多一点，什么时候能达到上限也算是圆满了。</p><p>最后，有句话叫做：“不以盈利为目的的博客最后都死亡了”。因为如果不能因此获得任何的收入的话，极少有人有这个毅力坚持更新博客。虽然我也想因此获利，但是暂时我并不想因此改变了初衷，去写一些刻意迎合大众的水文，从而获得粉丝。</p><h2 id="what都写一些什么主题的博客"><a class="markdownIt-Anchor" href="#what都写一些什么主题的博客"></a> What？都写一些什么主题的博客？</h2><p>主要都是与我相关的一些计算机相关知识。最主要的就是深度学习和自然语言处理了，但是因为我是做句法分析的，这个方向受众比较小，如果纯粹写这个方向的内容的话，看的人可能会很少。而如果写深度学习和自然语言处理的入门普及或者综合一点热门一点的方向的话，看得人应该会很多。但是这样又有一个弊端，非常的浪费我时间，因为过于基础的知识对我的提升微乎其微，只适合以后我面试前看看补补基础。而主要我现在重心还在发论文，继续搞学术，所以只能写一些结合我最近所学知识的文章。</p><p>还会写一些算法题解，现在主要在做 LeetCode 上面的中等和困难题目，然后每日一更。尽管网上各种 LeetCode 的题解已经太多了，但是我觉得，大多数的题解都非常的模糊，讲解的很不清楚，抄来抄去的有什么意思？而他们的代码风格，更是让我看不下去，最基本的美观都做不到，代码的简洁精炼就更不用谈了。所以我的目的还是尽量用美观精炼的代码来让更多人的算法思想和代码能力得到提升。</p><p>偶尔，我还会分享一些计算机基础知识，比如怎么搭博客（这是我阅读量最高的一篇博客了）、好用的软件、常用的一些软件的安装配置等等。其实讲道理，我是不愿意写这一类文章的，因为非常的费时费力，需要自己动手模拟一遍，确保能够正确完成才能写进文章。不然就会像很多网上的教程那样，抄来抄去一堆错误，根本没有自己动手实践过。但是这种文章其实对很多人帮助还挺大的，大家也乐意去看，如果你在知乎发的话，你会发现这类文章收藏量都挺高的。如果我以后用空了，我还是会经常把我平时的一些经验分享给大家的，比如 LaTeX 常用写作技巧之类的。</p><p>那么其他火的博客都写些什么呢？我觉得当代人闲暇时候、上厕所刷手机的时候，那些碎片时间是没办法好好学习一些知识的，最爱看的还是有趣的故事，例如 99 行代码做出冰雪奇缘特效、程序员脱发、程序员单身狗啦之类的。这些故事背后的技术可能是很深奥的，但是大多数人并不会去关心，只是会看完惊叹一句“卧槽”而已。其他的吸引人的内容还有资料下载、课程学习（当然基本都是广告）等等。不过我个人目前并不想写这些东西，首先这些新闻类的文章很多地方都有了，写来写去就那么些东西，同质化严重。而资料下载确实是个不错的主意，可以分享好东西给大家，但是我个人最近也没有太多值得珍藏的好资料，况且大多数网上都有现成的，我不赞同为了增加粉丝而不放出链接，把资料放在公众号后台的行为。</p><p>总之，不忘初心，粉丝什么的随缘吧。我非常佛系，即使没人看我也会日常更新，就当记日记不是吗？</p><h2 id="who写出来的博客都是给谁看的"><a class="markdownIt-Anchor" href="#who写出来的博客都是给谁看的"></a> Who？写出来的博客都是给谁看的？</h2><p>大多数看我博客的都是自然语言处理相关的学生。就拿我在知乎专栏的粉丝来看，大多数人是来看我的论文赏析的，而少部分人是看到了那篇博客搭建教程来的。至于算法题解，貌似并没有很多人看，可能这一类文章网上实在是太多了，没有什么独特的吸引力。而公众号粉丝，目前为止还很少，绝大多数还都是好友粉丝。主要原因还是公众号太封闭了，很难让好友之外的人知道并且关注你。一个方法可以在知乎等平台引流，但是现在这属于违规操作，最好还是不要干了。</p><p>其实我目标的受众群体还是包括但不仅限于计算机系的学生，像一些计算机基础知识，就算你是个小白，也可以从这里学到很多东西。甚至还有很多考研的学生来咨询我问题，虽然我是保研的，但是很多导师选取、学习方面的问题我还是愿意给出我自己的建议的。我这个人向来喜欢分享，也喜欢倾听，如果别人来问我问题，我基本是会耐心回答的。曾经有啥都不会的小白来问我怎么搭建博客，我得从最基本的命令行教他，讲道理这其实很烦，我都不想教，但我还是会尽量把关键点都告诉他。有人会觉得，我这样最后会得到什么呢？是的，也不赚钱，最多偶尔有些朋友会打赏个红包，我还浪费了大把时间（其实还好，白天工作的时候我都简单回复，晚上一般会详细点），但是认识的人多了，许多人还是多少知道我这个名字的，虽然没啥用，但是也算是种隐形财富吧，以后有什么用再说。</p><h2 id="where都在什么平台写博客呢"><a class="markdownIt-Anchor" href="#where都在什么平台写博客呢"></a> Where？都在什么平台写博客呢？</h2><p>这个其实上面都说过了，我现在文章主要更新在个人博客、知乎专栏、微信公众号和 CSDN 上面，我简要说一些这些平台的优缺点吧。</p><p>个人博客可以个性化定制主题，想怎么好看就怎么好看，还不用发文章审核，想发什么就发什么。但是缺点就是发文章麻烦一点的，步骤略多，并且搜索引擎收录很慢的。</p><p>知乎专栏是我比较喜欢的一个平台，主要是它支持markdown，还可以把公式变成矢量图片，还是挺不错的。但是发知乎文章要注意千万别带着营销、引流等内容，不然容易被人举报被删除甚至禁言。</p><p>微信公众号是我最近才开始运营的，相对而言，它的编辑界面是最不友好的一个，只支持富文本编辑，连markdown都没有。但是也有解决方法，比如我现在用<a href="https://mdnice.com/">mdnice.com</a>这个网站，把markdown转换成微信公众号的富文本格式，还是非常好用的。公众号还有个缺点，太封闭了，很难宣传出去，刚开始只能亲朋好友关注关注，但是如果你真的做大了知名度，还是可以借助微信的优势，赚得不少广告钱的。</p><p>CSDN因为几年前被永久封过号，然后现在不知道为什么又被解封了，所以用的不是特别多，主要都是通过知乎专栏自动同步文章过去的。CSDN 好处就是流量大，很多人都在上面搜东西，百度搜出来也基本都是 CSDN ，但是排版是真的真的烂，不过现在好多了，也支持 markdown 了。但是还是谈不上喜欢，广告什么的都太多了，除非迫不得已，我一般不去 CSDN 看技术文章，我一般都是个人博客或者知乎看论文解读之类的。</p><h2 id="how按照什么流程来写博客"><a class="markdownIt-Anchor" href="#how按照什么流程来写博客"></a> How？按照什么流程来写博客？</h2><p>其实同时维护好几个平台还是挺累的，你得找到一个最佳的顺序来发布文章，这样才能事半功倍。我一般都是先在个人博客上写好 markdown 文章，然后发布完之后，打开<a href="https://mdnice.com/">mdnice.com</a>在线编辑网站，把 markdown 粘贴进去，转成微信公众号和知乎专栏的格式，最后分别发布在两个地方就行了。 CSDN 就不用管了，它会每天自动同步知乎专栏的文章的，倒是为我省了不少事。markdown 写作也挺轻松的，完全不用管排版之类的问题，安安心心写内容就行了。</p><p>微信公众号现在设置的是每天早上 8:05 推送，其实稍微晚一点比较好，这样别人的都推送完了，你的就会置顶在最上面。而知乎专栏和个人博客我就随性发布了，想什么时候发就什么时候发，经常会前一天就写好内容，早早的发布出去了。</p><p>我个人现在来看，写一篇博客最累的是敲公式和找图片，当然像我这篇就一个公式和图都没有，是最最轻松的了。我这个人有强迫症，公式一定要手打 LaTeX 公式，然后转成矢量图才行，这样看着又清楚又舒服。遇到复杂的矩阵公式，能把我敲的头晕。这也是我为什么不喜欢 CSDN 的一个原因，上面很多文章公式全是截图，看的我头都大了。</p><h2 id="how-much要花多少时间和金钱来运营维护"><a class="markdownIt-Anchor" href="#how-much要花多少时间和金钱来运营维护"></a> How much？要花多少时间和金钱来运营维护？</h2><p>写博客挺花时间的，特别是现在还在为发论文而忙活的时候，可能论文截稿前那段时间甚至我会停更好久哈哈。不过现在放假了，还算比较闲，有功夫搞搞这些。我个人是倾向于白天还是老老实实学习吧，晚上把部分的游戏时间抽出来写会儿文章，更新一波。这样也不算太浪费时间，毕竟就算不写，时间也都用来打游戏了，游戏输了还坏了心情（我的亚索怎么会输？）。</p><p>那什么时候做 LeetCode 呢？我一般都是白天吃饭时，或者走在路上时，手机 app 上随机选一道题，然后吃个饭的时间就能想出个解法，回到实验室后敲一顿代码通过了就行了。这样看来也节约了不少时间嘛，还能和室友一起讨论讨论，帮他提高一波算法能力。</p><p>金钱的话就基本没有花销了，除了开了个素材设计网站的会员（我是真的睿智，用 PS 不就行了嘛，脑子瓦特了充钱了）以外，其他不需要啥了，偶尔还能吃点打赏钱，粉丝太少了，没有广告。</p><p>因为写文章这上面花时间比较多，写出好的文章、不水文章的话花的时间更多，所以很容易坚持不下去。而又要迎合大众的口味，众口难调嘛，又要坚持自己的初心，尽量写对自己提升大的内容，还是比较难以平衡的。特别是粉丝特别少，没有什么人看的时候，你会很想放弃。</p><p>但是，总会有人在你坚持不下去的时候，给你鼓励的目光，支持你继续走下去的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关注公众号【算法码上来】，每日算法干货马上就来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2020/01/14/5w2h-godweiyang-fu-ben/contact.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;whe</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>5W2H | 关于写博客的七点反思</title>
    <link href="http://example.com/2020/01/14/5w2h-godweiyang/"/>
    <id>http://example.com/2020/01/14/5w2h-godweiyang/</id>
    <published>2020-01-14T07:27:31.000Z</published>
    <updated>2022-07-07T04:06:18.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="/2020/01/14/5w2h-godweiyang/contact.jpg" alt></p><h2 id="when什么时候开始写的"><a class="markdownIt-Anchor" href="#when什么时候开始写的"></a> When？什么时候开始写的？</h2><p>第一次写博客是 2015 年了，在 CSDN 和博客园上面，当时写文章是为了记录 ACM 竞赛的题解，陆陆续续写了几十篇。但是最后还是没有坚持下去，主要还是因为 CSDN 和博客园的体验太差了，写起文章来很难受，又丑又慢。另一个原因是， CSDN 发个文章还需要审核，定制主题自由度也太差。</p><p>第二次就是 2017 年暑假了，当时自己建了个人博客，域名是：<a href="https://godweiyang.com/">godweiyang.com</a>。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。算法题解的话最近也开始更新起来了，主要写一些 LeetCode上面的题解。</p><p>最后就是知乎专栏和微信公众号了，这两个平台是最近才搞的，主要把个人博客的文章同步更新过去，内容都差不多。微信公众号本来不想搞的，不支持 markdown ，写起来挺麻烦的。但是考虑到以后的发展，以及可能会有一些变现的操作，还是重操旧业了（其实我公众号两年前就注册过了，只是一直没有更新）。</p><h2 id="why为什么会想起来写博客"><a class="markdownIt-Anchor" href="#why为什么会想起来写博客"></a> Why？为什么会想起来写博客？</h2><p>其实刚开始写博客，主要还是为了记录自己平时学到的一些东西，以后可能还能翻出来复习复习。但是现在看来，基本不会再去翻以前写的东西了。</p><p>另一个目的，也是我写博客最主要的目的，还是想分享我知道的一些东西，能够让更多的人因此受益。因为写博客，其实还是认识了不少天南地北的朋友的，有各个高校甚至初高中的学生，也有工作了很多年想学习学习编程的，也有国外一些名校的学生。不管是谁，我觉得都可以扩展我的人脉，现在微信好友人数上限扩展到了 5000 人了，而我才用了十分之一多一点，什么时候能达到上限也算是圆满了。</p><p>最后，有句话叫做：“不以盈利为目的的博客最后都死亡了”。因为如果不能因此获得任何的收入的话，极少有人有这个毅力坚持更新博客。虽然我也想因此获利，但是暂时我并不想因此改变了初衷，去写一些刻意迎合大众的水文，从而获得粉丝。</p><h2 id="what都写一些什么主题的博客"><a class="markdownIt-Anchor" href="#what都写一些什么主题的博客"></a> What？都写一些什么主题的博客？</h2><p>主要都是与我相关的一些计算机相关知识。最主要的就是深度学习和自然语言处理了，但是因为我是做句法分析的，这个方向受众比较小，如果纯粹写这个方向的内容的话，看的人可能会很少。而如果写深度学习和自然语言处理的入门普及或者综合一点热门一点的方向的话，看得人应该会很多。但是这样又有一个弊端，非常的浪费我时间，因为过于基础的知识对我的提升微乎其微，只适合以后我面试前看看补补基础。而主要我现在重心还在发论文，继续搞学术，所以只能写一些结合我最近所学知识的文章。</p><p>还会写一些算法题解，现在主要在做 LeetCode 上面的中等和困难题目，然后每日一更。尽管网上各种 LeetCode 的题解已经太多了，但是我觉得，大多数的题解都非常的模糊，讲解的很不清楚，抄来抄去的有什么意思？而他们的代码风格，更是让我看不下去，最基本的美观都做不到，代码的简洁精炼就更不用谈了。所以我的目的还是尽量用美观精炼的代码来让更多人的算法思想和代码能力得到提升。</p><p>偶尔，我还会分享一些计算机基础知识，比如怎么搭博客（这是我阅读量最高的一篇博客了）、好用的软件、常用的一些软件的安装配置等等。其实讲道理，我是不愿意写这一类文章的，因为非常的费时费力，需要自己动手模拟一遍，确保能够正确完成才能写进文章。不然就会像很多网上的教程那样，抄来抄去一堆错误，根本没有自己动手实践过。但是这种文章其实对很多人帮助还挺大的，大家也乐意去看，如果你在知乎发的话，你会发现这类文章收藏量都挺高的。如果我以后用空了，我还是会经常把我平时的一些经验分享给大家的，比如 LaTeX 常用写作技巧之类的。</p><p>那么其他火的博客都写些什么呢？我觉得当代人闲暇时候、上厕所刷手机的时候，那些碎片时间是没办法好好学习一些知识的，最爱看的还是有趣的故事，例如 99 行代码做出冰雪奇缘特效、程序员脱发、程序员单身狗啦之类的。这些故事背后的技术可能是很深奥的，但是大多数人并不会去关心，只是会看完惊叹一句“卧槽”而已。其他的吸引人的内容还有资料下载、课程学习（当然基本都是广告）等等。不过我个人目前并不想写这些东西，首先这些新闻类的文章很多地方都有了，写来写去就那么些东西，同质化严重。而资料下载确实是个不错的主意，可以分享好东西给大家，但是我个人最近也没有太多值得珍藏的好资料，况且大多数网上都有现成的，我不赞同为了增加粉丝而不放出链接，把资料放在公众号后台的行为。</p><p>总之，不忘初心，粉丝什么的随缘吧。我非常佛系，即使没人看我也会日常更新，就当记日记不是吗？</p><h2 id="who写出来的博客都是给谁看的"><a class="markdownIt-Anchor" href="#who写出来的博客都是给谁看的"></a> Who？写出来的博客都是给谁看的？</h2><p>大多数看我博客的都是自然语言处理相关的学生。就拿我在知乎专栏的粉丝来看，大多数人是来看我的论文赏析的，而少部分人是看到了那篇博客搭建教程来的。至于算法题解，貌似并没有很多人看，可能这一类文章网上实在是太多了，没有什么独特的吸引力。而公众号粉丝，目前为止还很少，绝大多数还都是好友粉丝。主要原因还是公众号太封闭了，很难让好友之外的人知道并且关注你。一个方法可以在知乎等平台引流，但是现在这属于违规操作，最好还是不要干了。</p><p>其实我目标的受众群体还是包括但不仅限于计算机系的学生，像一些计算机基础知识，就算你是个小白，也可以从这里学到很多东西。甚至还有很多考研的学生来咨询我问题，虽然我是保研的，但是很多导师选取、学习方面的问题我还是愿意给出我自己的建议的。我这个人向来喜欢分享，也喜欢倾听，如果别人来问我问题，我基本是会耐心回答的。曾经有啥都不会的小白来问我怎么搭建博客，我得从最基本的命令行教他，讲道理这其实很烦，我都不想教，但我还是会尽量把关键点都告诉他。有人会觉得，我这样最后会得到什么呢？是的，也不赚钱，最多偶尔有些朋友会打赏个红包，我还浪费了大把时间（其实还好，白天工作的时候我都简单回复，晚上一般会详细点），但是认识的人多了，许多人还是多少知道我这个名字的，虽然没啥用，但是也算是种隐形财富吧，以后有什么用再说。</p><h2 id="where都在什么平台写博客呢"><a class="markdownIt-Anchor" href="#where都在什么平台写博客呢"></a> Where？都在什么平台写博客呢？</h2><p>这个其实上面都说过了，我现在文章主要更新在个人博客、知乎专栏、微信公众号和 CSDN 上面，我简要说一些这些平台的优缺点吧。</p><p>个人博客可以个性化定制主题，想怎么好看就怎么好看，还不用发文章审核，想发什么就发什么。但是缺点就是发文章麻烦一点的，步骤略多，并且搜索引擎收录很慢的。</p><p>知乎专栏是我比较喜欢的一个平台，主要是它支持markdown，还可以把公式变成矢量图片，还是挺不错的。但是发知乎文章要注意千万别带着营销、引流等内容，不然容易被人举报被删除甚至禁言。</p><p>微信公众号是我最近才开始运营的，相对而言，它的编辑界面是最不友好的一个，只支持富文本编辑，连markdown都没有。但是也有解决方法，比如我现在用<a href="https://mdnice.com/">mdnice.com</a>这个网站，把markdown转换成微信公众号的富文本格式，还是非常好用的。公众号还有个缺点，太封闭了，很难宣传出去，刚开始只能亲朋好友关注关注，但是如果你真的做大了知名度，还是可以借助微信的优势，赚得不少广告钱的。</p><p>CSDN因为几年前被永久封过号，然后现在不知道为什么又被解封了，所以用的不是特别多，主要都是通过知乎专栏自动同步文章过去的。CSDN 好处就是流量大，很多人都在上面搜东西，百度搜出来也基本都是 CSDN ，但是排版是真的真的烂，不过现在好多了，也支持 markdown 了。但是还是谈不上喜欢，广告什么的都太多了，除非迫不得已，我一般不去 CSDN 看技术文章，我一般都是个人博客或者知乎看论文解读之类的。</p><h2 id="how按照什么流程来写博客"><a class="markdownIt-Anchor" href="#how按照什么流程来写博客"></a> How？按照什么流程来写博客？</h2><p>其实同时维护好几个平台还是挺累的，你得找到一个最佳的顺序来发布文章，这样才能事半功倍。我一般都是先在个人博客上写好 markdown 文章，然后发布完之后，打开<a href="https://mdnice.com/">mdnice.com</a>在线编辑网站，把 markdown 粘贴进去，转成微信公众号和知乎专栏的格式，最后分别发布在两个地方就行了。 CSDN 就不用管了，它会每天自动同步知乎专栏的文章的，倒是为我省了不少事。markdown 写作也挺轻松的，完全不用管排版之类的问题，安安心心写内容就行了。</p><p>微信公众号现在设置的是每天早上 8:05 推送，其实稍微晚一点比较好，这样别人的都推送完了，你的就会置顶在最上面。而知乎专栏和个人博客我就随性发布了，想什么时候发就什么时候发，经常会前一天就写好内容，早早的发布出去了。</p><p>我个人现在来看，写一篇博客最累的是敲公式和找图片，当然像我这篇就一个公式和图都没有，是最最轻松的了。我这个人有强迫症，公式一定要手打 LaTeX 公式，然后转成矢量图才行，这样看着又清楚又舒服。遇到复杂的矩阵公式，能把我敲的头晕。这也是我为什么不喜欢 CSDN 的一个原因，上面很多文章公式全是截图，看的我头都大了。</p><h2 id="how-much要花多少时间和金钱来运营维护"><a class="markdownIt-Anchor" href="#how-much要花多少时间和金钱来运营维护"></a> How much？要花多少时间和金钱来运营维护？</h2><p>写博客挺花时间的，特别是现在还在为发论文而忙活的时候，可能论文截稿前那段时间甚至我会停更好久哈哈。不过现在放假了，还算比较闲，有功夫搞搞这些。我个人是倾向于白天还是老老实实学习吧，晚上把部分的游戏时间抽出来写会儿文章，更新一波。这样也不算太浪费时间，毕竟就算不写，时间也都用来打游戏了，游戏输了还坏了心情（我的亚索怎么会输？）。</p><p>那什么时候做 LeetCode 呢？我一般都是白天吃饭时，或者走在路上时，手机 app 上随机选一道题，然后吃个饭的时间就能想出个解法，回到实验室后敲一顿代码通过了就行了。这样看来也节约了不少时间嘛，还能和室友一起讨论讨论，帮他提高一波算法能力。</p><p>金钱的话就基本没有花销了，除了开了个素材设计网站的会员（我是真的睿智，用 PS 不就行了嘛，脑子瓦特了充钱了）以外，其他不需要啥了，偶尔还能吃点打赏钱，粉丝太少了，没有广告。</p><p>因为写文章这上面花时间比较多，写出好的文章、不水文章的话花的时间更多，所以很容易坚持不下去。而又要迎合大众的口味，众口难调嘛，又要坚持自己的初心，尽量写对自己提升大的内容，还是比较难以平衡的。特别是粉丝特别少，没有什么人看的时候，你会很想放弃。</p><p>但是，总会有人在你坚持不下去的时候，给你鼓励的目光，支持你继续走下去的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关注公众号【算法码上来】，每日算法干货马上就来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2020/01/14/5w2h-godweiyang/contact.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;when什么时候开始</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
